#include "oscrypt.oh"

void oscrypt_blockmix_salsa8(obliv const uint32_t * Bin, obliv uint32_t * Bout, size_t r) {
	size_t ii, jj;
	obliv uint32_t X[16];

	for (jj = 0; jj < 16; jj++) {
		X[jj] = Bin[(2*r -1) * 16 + jj];
	}

	for (ii = 0; ii < 2 * r; ii += 2) {

		for (jj = 0; jj < 16; jj++) {
			X[jj] ^= Bin[ii * 16 + jj];
		}

		osalsa8(X);

		for (jj = 0; jj < 16; jj++) {
			Bout[ii * 8 + jj] = X[jj];
			X[jj] ^= Bin[ii * 16 + 16 + jj];
		}

		osalsa8(X);

		for (jj = 0; jj < 16; jj++) {
			Bout[ii * 8 + r * 16 + jj] = X[jj];
		}
	}
}

obliv uint64_t integerify(obliv uint32_t * B, size_t r) {
	obliv uint64_t result = B[(2*r-1)*16+1];
	result = (result << 32) | B[(2*r-1)*16];
	return result;
}

void oscrypt_smix(obliv uint8_t * B, size_t r, uint64_t N) {
	obliv uint32_t * X = calloc(32 * r, sizeof(obliv uint32_t));
	obliv uint32_t * Y = calloc(32 * r, sizeof(obliv uint32_t));
	obliv uint64_t index, blockint;
	obliv uint32_t temp;
	oram * V;
	V = oram_new(32*r*N);

	for (size_t jj = 0; jj < 32 * r; jj++) {
		X[jj] = le32dec(&B[4*jj]);
	}

	for (uint64_t ii = 0; ii < N; ii += 2) {
		for (size_t jj = 0; jj < 32 * r; jj++) {
			index = 32 * r * ii + jj;
			oram_write(V, X[jj], index);
		} 

		oscrypt_blockmix_salsa8(X, Y, r);

		for (size_t jj = 0; jj < 32 * r; jj++) {
			index = 32 * r * (ii + 1) + jj;
			oram_write(V, Y[jj], index);
		}

		oscrypt_blockmix_salsa8(Y, X, r);
	}

	for (uint64_t ii = 0; ii < N; ii += 2) {
		blockint = integerify(X, r) & (N - 1);

		for (size_t jj = 0; jj < 32 * r; jj++) {
			index = 32 * r * blockint + jj;
			oram_read(&temp, V, index);
			X[jj] ^= temp;
		}

		oscrypt_blockmix_salsa8(X, Y, r);

		blockint = integerify(Y, r) & (N - 1);

		for (size_t jj = 0; jj < 32 * r; jj++) {
			index = 32 * r * blockint + jj;
			oram_read(&temp, V, index);
			Y[jj] ^= temp;
		}

		oscrypt_blockmix_salsa8(Y, X, r);
	}

	for (size_t jj = 0; jj < 32 * r; jj++) {
		le32enc(&B[4 * jj], X[jj]);
	}

	oram_free(V);
	free(X);
	free(Y);
}

void oscrypt(obliv const uint8_t * passwd, size_t passwdlen, obliv const uint8_t * salt, size_t saltlen, uint64_t N, size_t r, size_t p, obliv uint8_t * buf, size_t buflen) {
	obliv uint8_t * B = calloc(p * 128 * r, sizeof(obliv uint8_t));

	oPBKDF2_SHA256(passwd, passwdlen, salt, saltlen, 1, B, p * 128 * r);

	for (size_t ii = 0; ii < p; ii++) {
		oscrypt_smix(&B[ii * 128 * r], r, N);
	}

	oPBKDF2_SHA256(passwd, passwdlen, B, p * 128 * r, 1, buf, buflen);

	free(B);
}