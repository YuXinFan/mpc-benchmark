#include "ochacha20.oh"

#define Rotate(a,b) (((a) << (b)) | ((a) >> (32 - (b))))
#define QR(a,b,c,d) a += b; d ^= a; d = Rotate(d,16); \
					c += d; b ^= c; b = Rotate(b,12); \
					a += b; d ^= a; d = Rotate(d,8); \
					c += d; b ^= c; b = Rotate(b,7);

void oChacha20(obliv uint8_t B[64], int rounds) {
	obliv uint32_t x[16];
	size_t ii, jj;

	for (ii = 0; ii < 16; ii++) {
		x[ii] = 0;
		for (jj = 0; jj < 4; jj++) {
			x[ii] = (x[ii] << 8) + B[ii*4+(3 -jj)];
		}
	}

	oChacha20_Kernel(x, rounds);

	for (ii = 0; ii < 16; ii++) {

		for (jj = 0; jj < 4; jj++) {
			x[ii] += ((obliv uint32_t)B[ii*4+jj]) << (8*jj);
			B[ii*4+jj] = (x[ii] >> (8*jj)) & 0xFF;
		}
	}
}

void oChacha20_Kernel(obliv uint32_t x[16], int rounds) {
	for (size_t ii = 0; ii < rounds; ii += 2) {

		QR(x[0],x[4],x[8],x[12]);
		QR(x[1],x[5],x[9],x[13]);
		QR(x[2],x[6],x[10],x[14]);
		QR(x[3],x[7],x[11],x[15]);
		QR(x[0],x[5],x[10],x[15]);
		QR(x[1],x[6],x[11],x[12]);
		QR(x[2],x[7],x[8],x[13]);
		QR(x[3],x[4],x[9],x[14]);

	}
}