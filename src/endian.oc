#include "endian.oh"

void be32enc(obliv uint8_t * dst, obliv uint32_t x) {
	dst[3] = x & 0xff;
	dst[2] = (x >> 8) & 0xff;
	dst[1] = (x >> 16) & 0xff;
	dst[0] = (x >> 24) & 0xff;
}

obliv uint32_t be32dec(obliv uint8_t * p) {
	obliv uint32_t result = 0;
	for (int ii = 0; ii < 4; ii++) {
		result += (obliv uint32_t)p[3-ii] << (ii*8);
	}
	return result;
}

void be64enc(obliv uint8_t * dst, obliv uint64_t x) {
	dst[7] = x & 0xff;
	dst[6] = (x >> 8) & 0xff;
	dst[5] = (x >> 16) & 0xff;
	dst[4] = (x >> 24) & 0xff;
	dst[3] = (x >> 32) & 0xff;
	dst[2] = (x >> 40) & 0xff;
	dst[1] = (x >> 48) & 0xff;
	dst[0] = (x >> 56) & 0xff;
}

void be32enc_vect(obliv uint8_t * dst, obliv const uint32_t * src, size_t len) {
	for (size_t ii = 0; ii < len / 4; ii++) {
		dst[ii * 4 + 3] = src[ii] & 0xFF;
		dst[ii * 4 + 2] = (src[ii] >> 8) & 0xFF;
		dst[ii * 4 + 1] = (src[ii] >> 16) & 0xFF;
		dst[ii * 4 + 0] = (src[ii] >> 24) & 0xFF;
	}
}

void be64enc_vect(obliv uint8_t * dst, obliv const uint64_t * src, size_t len) {
	for (size_t ii = 0; ii < len / 8; ii++) {
		dst[ii * 8 + 7] = src[ii] & 0xFF;
		dst[ii * 8 + 6] = (src[ii] >> 8) & 0xFF;
		dst[ii * 8 + 5] = (src[ii] >> 16) & 0xFF;
		dst[ii * 8 + 4] = (src[ii] >> 24) & 0xFF;
		dst[ii * 8 + 3] = (src[ii] >> 32) & 0xFF;
		dst[ii * 8 + 2] = (src[ii] >> 40) & 0xFF;
		dst[ii * 8 + 1] = (src[ii] >> 48) & 0xFF;
		dst[ii * 8 + 0] = (src[ii] >> 56) & 0xFF;
	}
}

void le32enc(obliv uint8_t * p, obliv uint32_t x) {
	p[0] = x & 0xFF;
	p[1] = (x >> 8) & 0xFF;
	p[2] = (x >> 16) & 0xFF;
	p[3] = (x >> 24) & 0xFF;
}

obliv uint32_t le32dec(obliv uint8_t * p) {
	obliv uint32_t result = 0;
	for (int ii = 0; ii < 4; ii++) {
		result += (obliv uint32_t)p[ii] << (ii*8);
	}
	return result;
}