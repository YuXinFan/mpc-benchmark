#include "almost_search.oh"
#include <obliv_common.h>
#include "stdbool.h"

void binary_almost_search_main(obliv int *idx, obliv int needle, obliv int* arr, int l, int r) obliv {
    if (r >= l)
    {
        int mid = l + (r - l) / 2;
        // If the element is present at
        // one of the middle 3 positions
        obliv bool left = mid > l;
        obliv if (left) {
            left = arr[mid-1] == needle;
        }
        obliv bool right = mid < r;
        obliv if (right) {
            right =  arr[mid+1] == needle;
        }
        obliv if (arr[mid] == needle){
            *idx = mid;
        }else obliv if ( left ){
            *idx = (mid-1);
        }else obliv if ( right ){
            *idx = (mid + 1);
        }else {
            obliv bool ogt = arr[mid] > needle;
            obliv if (ogt){
                binary_almost_search_main(idx, needle, arr, l, mid - 2);
            } else {
                binary_almost_search_main(idx, needle, arr, mid + 2, r);
            }
        }
    }
}
void binary_almost_search(obliv int *idx, obliv int needle, obliv int* arr, int n){
    binary_almost_search_main(idx, needle, arr, 0, n-1);
}


void binary_almost_search_opt_main(obliv int *idx, obliv int needle, obliv int* arr, int l, int r) obliv {
    if (r >= l)
    {
        int mid = l + (r - l) / 2;
        // If the element is present at
        // one of the middle 3 positions
        obliv bool oeq = arr[mid] == needle;
        bool eq;
        ~obliv(c){
            revealOblivBool(&eq, oeq, 0);
        }
        if (eq) {
            *idx = mid;
            return ;
        }
        obliv bool left = mid > l;
        obliv if (left) {
            left = arr[mid-1] == needle;
        }
        obliv bool right = mid < r;
        obliv if (right) {
            right =  arr[mid+1] == needle;
        }
        obliv if ( left ){
            *idx = (mid-1);
        }else obliv if ( right ){
            *idx = (mid + 1);
        }else {
            obliv bool ogt = arr[mid] > needle;
            obliv if (ogt){
                binary_almost_search_opt_main(idx, needle, arr, l, mid - 2);
            } else {
                binary_almost_search_opt_main(idx, needle, arr, mid + 2, r);
            }
        }
    }
}
void binary_almost_search_opt(obliv int *idx, obliv int needle, obliv int* arr, int n){
    binary_almost_search_opt_main(idx, needle, arr, 0, n-1);
}