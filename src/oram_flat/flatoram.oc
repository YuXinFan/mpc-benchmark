#include "flatoram.oh"
#include "flatoram_util.oh"
#include "scanrom.oh"
#include "bitpropagate.oh"
#include "ackutil.h"

struct flatoram {
	OcCopy* cpy;
	OcCopy blockcpy;
	scanwrom* wrom;
	scanrom* rom;
	bitpropagator* bitpropagator;
	obliv uint8_t* stash;
	obliv int32_t* stashi;
	obliv uint8_t* activeblock_pair;
	uint8_t* blockvector_local;
	bool * bitvector_local;
	uint8_t* rom_key_half;
	obliv uint8_t* blocktemp;
	uint8_t* blocktemp_local;
	uint64_t period;
	uint64_t progress;
	uint64_t size;
	uint64_t blockcount;
	uint32_t blockmultiple;
	uint32_t elementsperblock;
};

void flatoram_read(void* data, flatoram* ram, obliv size_t index) obliv {
	obliv size_t blockid = index / ram->elementsperblock;
	obliv size_t subblockid = index % ram->elementsperblock;
	~obliv() bitpropagator_getblockvector(ram->activeblock_pair, ram->blockvector_local, ram->bitvector_local, ram->bitpropagator, blockid);
	scanrom_read_with_bitvector(ram->blocktemp, ram->rom, blockid, ram->bitvector_local);
	for (size_t ii = 0; ii < ram->period; ii ++) {
		obliv if (blockid == ram->stashi[ii]) ocCopy(&ram->blockcpy, ram->blocktemp, element(&ram->blockcpy, ram->stash, ii));
	}
	for (size_t ii = 0; ii < ram->elementsperblock; ii ++) {
		obliv if (subblockid == ii) ocCopy(ram->cpy, data, element(ram->cpy, ram->blocktemp, ii));
	}
}

void flatoram_refresh(flatoram* ram) {
	ram->progress = 0;
	get_random_bytes(ram->rom_key_half, KEYSIZE);
	scanrom_set_key(ram->rom, ram->rom_key_half);
	scanrom_import_from_scanwrom(ram->rom, ram->wrom);
	for (size_t ii = 0; ii < ram->period; ii++) {
		ram->stashi[ii] = -1;
	}
}

typedef struct facb_pass {
	flatoram * ram;
	obliv size_t blockid;
	obliv size_t subblockid;
	obliv bool found;
} facb_pass;

void flatoram_scan_callback(facb_pass * input) {
	flatoram * ram = input->ram;
	obliv size_t blockid = input->blockid;
	obliv size_t subblockid = input->subblockid;
	obliv bool found = false;
	if (ram->progress > 0) {
		ocCopy(&ram->blockcpy, element(&ram->blockcpy, ram->stash, ram->progress), ram->stash);
		ram->stashi[ram->progress] = ram->stashi[0];
		ram->stashi[0] = -1;
		for (size_t ii = 1; ii <= ram->progress; ii ++) {
			obliv if (blockid == ram->stashi[ii]) {
				ocCopy(&ram->blockcpy, ram->stash, element(&ram->blockcpy, ram->stash, ii));
				ram->stashi[0] = ram->stashi[ii];
				ram->stashi[ii] = -1;
				found = true;
			}
		}
	}
	input->found=found;
}

void flatoram_apply(flatoram* ram, void* data, flatoram_block_access_function fn, obliv size_t index) obliv {
	obliv size_t blockid = index / ram->elementsperblock;
	obliv size_t subblockid = index % ram->elementsperblock;

	facb_pass facb_data = {.ram=ram, .blockid = blockid, .subblockid = subblockid, .found = false};

	~obliv() bitpropagator_getblockvector_with_callback(ram->activeblock_pair, ram->blockvector_local, ram->bitvector_local, ram->bitpropagator, blockid, flatoram_scan_callback, &facb_data);

	obliv if (facb_data.found == false) {
		scanrom_read_with_bitvector(ram->stash, ram->rom, blockid, ram->bitvector_local);
		ram->stashi[0] = blockid;
	}

	ocCopy(&ram->blockcpy, ram->blocktemp, ram->stash);

	for (uint32_t jj = 0; jj < ram->elementsperblock; jj ++) {
		obliv if (subblockid == jj) fn(ram->cpy, element(ram->cpy, ram->stash, jj), data);
	}

	scanwrom_write_with_blockvector(ram->wrom, ram->activeblock_pair, ram->blockvector_local, ram->bitvector_local, element(&ram->blockcpy, ram->stash, 0), ram->blocktemp);
	~obliv() {
		ram->progress++;
		if (ram->progress == ram->period) flatoram_refresh(ram);
	}
}

void writer_function(OcCopy * cpy, void * oram_block, void * ext_block) obliv {
  ocCopy(cpy, oram_block, ext_block);
}

void flatoram_write(flatoram* ram, void* data, obliv size_t index) obliv {
	flatoram_apply(ram, data, writer_function, index);
}

flatoram* flatoram_new(OcCopy* cpy, void* data, size_t n) {
	flatoram * ram = malloc(sizeof(flatoram));
	ram->cpy = cpy;
	ram->size = n;
	ram->progress = 0;

	size_t elementsize = cpy->eltsize/sizeof(obliv uint8_t);
	if (elementsize >= BLOCKSIZE/2) {
		ram->blockcount = n;
		ram->blockmultiple = ((elementsize / BLOCKSIZE) + (elementsize%BLOCKSIZE?1:0));
		ram->elementsperblock = 1;
	} else {
		ram->blockmultiple = 1;
		ram->elementsperblock = BLOCKSIZE/elementsize;
		ram->blockcount = (n/ram->elementsperblock) + (n%ram->elementsperblock?1:0);
	}

	ram->blockcpy=ocCopyCharN(ram->blockmultiple * BLOCKSIZE);

	ram->bitpropagator = bitpropagator_new(ram->blockcount, MIN(5, LOG2LL(ram->blockcount)));
	flatoram_pma(&ram->blockvector_local, 16, ram->blockcount * BLOCKSIZE);
	flatoram_pma(&ram->bitvector_local, 16, ram->blockcount * sizeof(bool));
	ram->blocktemp_local = malloc(ram->blockmultiple * BLOCKSIZE);
	ram->activeblock_pair = calloc(2, BLOCKSIZE * sizeof(obliv uint8_t));

	//ram->period = (uint32_t)ceil(sqrt(ram->blockcount));

	// Based on B = 128*b; c = B*p/2+n*b/p = 64*p+n/p; dc/dp = 64-n/p^2; dc/dp = 0 when p = sqrt(n)/8
	ram->period = (uint32_t)ceil(sqrt(ram->blockcount)/(8));
	ram->blocktemp = calloc(1, ram->blockcpy.eltsize);
	ram->stash = calloc(ram->period, ram->blockcpy.eltsize);
	ram->stashi = calloc(ram->period, sizeof(obliv size_t));
	for (size_t ii = 0; ii < ram->period; ii++) {
		ram->stashi[ii] = -1;
	}

	//Set initial romkey and wromkey. Each party is expected to supply a different random value
	ram->rom_key_half = malloc(KEYSIZE);
	get_random_bytes(ram->rom_key_half, KEYSIZE);

	ram->rom = scanrom_new(&ram->blockcpy, ram->blockcount, ram->rom_key_half);
	ram->wrom = scanwrom_new(&ram->blockcpy, ram->blockcount);

	uint8_t * loadtemp_local;
	flatoram_pma(&loadtemp_local, 16, ram->blockcount * ram->blockmultiple * BLOCKSIZE);

	//Now fill the scanrom with data, if there is data with which to fill it
	if (data != NULL) {

		obliv uint8_t * loadtemp = calloc(ram->blockcount, ram->blockcpy.eltsize);

		get_random_bytes(loadtemp_local, BLOCKSIZE * ram->blockcount * ram->blockmultiple);	

		feedOblivCharArray(loadtemp, loadtemp_local, BLOCKSIZE * ram->blockcount * ram->blockmultiple, 2);

		for (size_t ii = 0; ii<(ram->blockmultiple * BLOCKSIZE * ram->blockcount);ii++) loadtemp[ii] ^= feedOblivChar(loadtemp_local[ii], 1);
		for (size_t ii = 0; ii<(ram->blockmultiple * BLOCKSIZE * ram->blockcount);ii++) revealOblivChar(&(loadtemp_local[ii]), loadtemp[ii], 2);

		size_t blockid, subblockid;
		for (size_t ii = 0; ii < ram->size; ii++) {
			blockid = ii / ram->elementsperblock;
			subblockid = ii % ram->elementsperblock;

			size_t elosize = cpy->eltsize/sizeof(obliv uint8_t);

			for (size_t jj = 0; jj < elosize; jj++){
				loadtemp[blockid * BLOCKSIZE * ram->blockmultiple + subblockid*elosize + jj] ^= ((obliv uint8_t *)element(cpy,data,ii))[jj];
			}
		}

		for (size_t ii = 0; ii<(ram->blockmultiple * BLOCKSIZE * ram->blockcount);ii++) revealOblivChar(&(loadtemp_local[ii]), loadtemp[ii], 1);

		free(loadtemp);
		
		scanrom_write_xor_shares(ram->rom, loadtemp_local, 0, ram->blockcount);
		scanwrom_write_xor_shares(ram->wrom, loadtemp_local, 0, ram->blockcount);
	} else {
		memset(loadtemp_local, 0, ram->blockmultiple * BLOCKSIZE * ram->blockcount);
		scanrom_write_xor_shares(ram->rom, loadtemp_local, 0, ram->blockcount);
	}

	free(loadtemp_local);

	return ram;
}

void flatoram_free(flatoram* ram) {
	bitpropagator_free(ram->bitpropagator);
	scanrom_free(ram->rom);
	scanwrom_free(ram->wrom);
	free(ram->blocktemp);
	free(ram->blocktemp_local);
	free(ram->activeblock_pair);
	free(ram->blockvector_local);
	free(ram->bitvector_local);
	free(ram->rom_key_half);
	free(ram->stashi);
	free(ram->stash);
	free(ram);
}