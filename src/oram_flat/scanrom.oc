#include "scanrom.oh"
#include "scanrom.h"
#include "../oaes.oh"
#include "endian.oh"
#include "bitpropagate.oh"
#include "bitpropagate.h"
#include "flatoram_util.oh"

struct scanrom {
	OcCopy * blockcpy;
	uint8_t * local_data;
	uint8_t * local_halfkey;
	uint8_t * local_halfpad;
	obliv uint8_t * halfkey_a;
	obliv uint8_t * halfkey_b;
	uint8_t * local_blocktemp;
	obliv uint8_t * blocktemp;
	bool * bitvector;
	size_t blockmultiple;
	size_t blockcount;
	size_t fullblocksize;
};

struct scanwrom {
	OcCopy * blockcpy;
	uint8_t * local_data;
	uint8_t * local_blocktemp;
	obliv uint8_t * blocktemp;
	size_t blockmultiple;
	size_t blockcount;
	size_t fullblocksize;
};



void scanrom_read_with_bitvector(obliv uint8_t * data, scanrom * rom, obliv size_t index, bool * bitvector) obliv {
	~obliv() scanrom_read_with_bitvector_offline(rom->local_blocktemp, rom->local_data, bitvector, rom->fullblocksize, rom->blockcount);
	for (uint32_t ii = 0; ii < rom->fullblocksize; ii++) {
		obliv uint8_t d;
		~obliv() {
			d = feedOblivChar(rom->local_blocktemp[ii], 1);
			d ^= feedOblivChar(rom->local_blocktemp[ii], 2); 
		}
		data[ii] = d;
	}
	~obliv() memset(&rom->blocktemp[rom->fullblocksize] ,0,rom->fullblocksize * sizeof(obliv uint8_t));

	oaes_ctx * ctx;

	be64enc(&rom->blocktemp[rom->fullblocksize + BLOCKSIZE - sizeof(size_t)], index);
	~obliv() ctx = oaes_128_ctx_ctr_new(rom->halfkey_a, &rom->blocktemp[rom->fullblocksize]);
	for (size_t ii = 0; ii < rom->blockmultiple; ii++) {
		oaes_128_encdec(&rom->blocktemp[BLOCKSIZE*ii], ctx, NULL);
	}
	~obliv() oaes_128_ctx_free(ctx);	
	for (uint32_t ii = 0; ii < rom->fullblocksize; ii++) {
		data[ii] ^= rom->blocktemp[ii];
	}

	be64enc(&rom->blocktemp[rom->fullblocksize + BLOCKSIZE - sizeof(size_t)], index);
	~obliv() ctx = oaes_128_ctx_ctr_new(rom->halfkey_b, &rom->blocktemp[rom->fullblocksize]);
	for (size_t ii = 0; ii < rom->blockmultiple; ii++) {
		oaes_128_encdec(&rom->blocktemp[BLOCKSIZE*ii], ctx, NULL);
	}
	~obliv() oaes_128_ctx_free(ctx);
	for (uint32_t ii = 0; ii < rom->fullblocksize; ii++) {
		data[ii] ^= rom->blocktemp[ii];
	}
}

void scanrom_read_with_blockvector(obliv uint8_t * data, scanrom * rom, obliv size_t index, obliv uint8_t * active_block_pair, uint8_t * blockvector) obliv {
	~obliv() {
		int32_t advice = bitpropagator_getadvice(active_block_pair, &active_block_pair[16]);
		bitpropagator_offline_applyadvice(rom->bitvector, blockvector, 16, rom->blockcount, advice);
	}
	scanrom_read_with_bitvector(data, rom, index, rom->bitvector);
}

typedef struct scanrom_data_transfer_args {
	scanrom * rom;
	obliv uint8_t * data;
	size_t index;
	size_t len;
} scanrom_data_transfer_args;

void scanrom_data_transfer_12(scanrom_data_transfer_args* args) {
	scanrom * rom = args->rom;
	obliv uint8_t * data = args->data;
	size_t index = args->index;
	size_t len = args->len;

	for (; index < MIN(len, rom->blockcount); index++) {
		for (size_t ii = 0; ii < rom->fullblocksize; ii++) {
			rom->local_data[index * rom->fullblocksize + ii] = ocBroadcastChar(rom->local_blocktemp[index * rom->fullblocksize + ii], 1);
		}
	}
}

void scanrom_data_transfer_21(scanrom_data_transfer_args* args) {
	scanrom * rom = args->rom;
	obliv uint8_t * data = args->data;
	size_t index = args->index;
	size_t len = args->len;

	
}

void scanrom_write_xor_shares(scanrom* rom, obliv uint8_t * data, size_t indexinit, size_t len) {
	//receives one share from each party, encrypts them locally, and shares them
	size_t index = indexinit;

	scanrom_encrypt_offline(&rom->local_blocktemp[index * rom->fullblocksize], data, &rom->local_halfpad[index * rom->fullblocksize], rom->fullblocksize * MIN(len, rom->blockcount - index));

	for (; index < MIN(indexinit + len, rom->blockcount); index++) {
		for (size_t ii = 0; ii < rom->fullblocksize; ii++) {
			rom->local_data[index * rom->fullblocksize + ii] = ocBroadcastChar(rom->local_blocktemp[index * rom->fullblocksize + ii], 1);
		}
	}

	index = indexinit;

	for (; index < MIN(indexinit + len, rom->blockcount); index++) {
		for (size_t ii = 0; ii < rom->fullblocksize; ii++) {
			rom->local_data[index * rom->fullblocksize + ii] ^= ocBroadcastChar(rom->local_blocktemp[index * rom->fullblocksize + ii], 2);
		}
	}
}

void scanrom_read(obliv uint8_t * data, scanrom* rom, size_t index) {
	if (ocCurrentParty() == 1) {
		scanrom_encrypt_offline(rom->local_blocktemp, &rom->local_data[index * rom->fullblocksize], &rom->local_halfpad[index * rom->fullblocksize], rom->fullblocksize);
	}

	for (size_t ii = 0; ii < rom->fullblocksize; ii++) {
		data[ii] = feedOblivChar(rom->local_blocktemp[ii], 1);
		data[ii] ^= feedOblivChar(rom->local_halfpad[index * rom->fullblocksize+ii], 2);
	}
}

void scanrom_set_key(scanrom* rom, uint8_t* key_local) {
	memcpy(rom->local_halfkey, key_local, KEYSIZE);
	for (uint32_t ii = 0; ii < KEYSIZE; ii++) {
		*((obliv uint8_t *)element(&ocCopyChar, rom->halfkey_a, ii)) = feedOblivChar(rom->local_halfkey[ii], 1);
		*((obliv uint8_t *)element(&ocCopyChar, rom->halfkey_b, ii)) = feedOblivChar(rom->local_halfkey[ii], 2);
	}
	scanrom_create_local_halfpad(rom->local_halfpad, rom->local_halfkey, rom->blockcount*rom->blockmultiple);
}

void scanrom_import_from_scanwrom(scanrom * rom, scanwrom * wrom) {
	scanrom_write_xor_shares(rom, wrom->local_data, 0, rom->blockcount);
}

scanrom* scanrom_new(OcCopy* blockcpy, int n, void* key_local) {
	offline_expand_init();
	scanrom * rom = malloc(sizeof(scanrom));
	size_t fullblocksize = blockcpy->eltsize/sizeof(obliv uint8_t);
	rom->fullblocksize = fullblocksize;
	rom->blockmultiple = fullblocksize/BLOCKSIZE;
	rom->blockcount = n;
	rom->blockcpy = blockcpy;
	rom->local_data = calloc(n, fullblocksize);
	rom->local_halfpad = malloc(n * fullblocksize);
	rom->local_halfkey = malloc(KEYSIZE);
	rom->local_blocktemp = malloc(n * fullblocksize);
	rom->bitvector = malloc(n * sizeof(bool));
	rom->blocktemp = calloc(fullblocksize * 2, sizeof(obliv uint8_t));
	rom->halfkey_a = calloc(KEYSIZE, sizeof(obliv uint8_t));
	rom->halfkey_b = calloc(KEYSIZE, sizeof(obliv uint8_t));
	scanrom_set_key(rom, key_local);
	return rom;
}

void scanrom_free(scanrom* rom) {
	offline_expand_deinit();
	free(rom->local_data);
	free(rom->local_halfkey);
	free(rom->local_halfpad);
	free(rom->local_blocktemp);
	free(rom->bitvector);
	free(rom->blocktemp);
	free(rom->halfkey_a);
	free(rom->halfkey_b);
	free(rom);
}







void scanwrom_read(obliv uint8_t* data, scanwrom* rom, size_t index) {
	for (size_t ii = 0; ii < rom->fullblocksize; ii++) {
		if (ocCurrentParty() == 1) {
			data[ii] = feedOblivChar(rom->local_data[index * (rom->fullblocksize) + ii], 1);
			data[ii] ^= feedOblivChar(NULL, 2);
		} else if (ocCurrentParty() == 2) {
			data[ii] = feedOblivChar(NULL, 1);
			data[ii] ^= feedOblivChar(rom->local_data[index * (rom->fullblocksize) + ii], 2);
		}
	}
}

void scanwrom_write_with_blockvector(scanwrom* rom, obliv uint8_t * active_block_pair, uint8_t * blockvector, obliv uint8_t * old_data, obliv uint8_t * new_data) obliv {
	~obliv(en) {
		memset(rom->blocktemp, 0 , rom->fullblocksize*sizeof(obliv uint8_t));
		obliv if (en) {
			for (size_t ii = 0; ii < rom->fullblocksize; ii++) {
				rom->blocktemp[ii] = old_data[ii] ^ new_data[ii];
			}
		}

		// Blocktemp now contains the data delta

		if (rom->blockmultiple == 1) {
			memcpy(&rom->blocktemp[rom->fullblocksize], active_block_pair, 2*rom->fullblocksize * sizeof(obliv uint8_t));
		} else {
			online_expand(&rom->blocktemp[rom->fullblocksize],active_block_pair,rom->blockmultiple);
			online_expand(&rom->blocktemp[2*rom->fullblocksize],&active_block_pair[BLOCKSIZE],rom->blockmultiple);
		}

		for (size_t ii = 0; ii < rom->fullblocksize; ii++) {
			rom->blocktemp[ii] ^= rom->blocktemp[rom->fullblocksize + ii] ^ rom->blocktemp[2*rom->fullblocksize + ii];
			revealOblivChar(&rom->local_blocktemp[ii], rom->blocktemp[ii], 0);
		}

		int32_t advice = bitpropagator_getadvice(&rom->blocktemp[rom->fullblocksize],&rom->blocktemp[2*rom->fullblocksize]);
		scanwrom_write_with_blockvector_offline(rom->local_data, blockvector, rom->local_blocktemp, advice, rom->blockmultiple != 1, rom->fullblocksize, rom->blockcount);
	}
}

void scanwrom_read_xor_shares(uint8_t * data, scanwrom* rom, size_t index, size_t len) {
	memcpy(data, &rom->local_data[index * rom->fullblocksize], MIN(len*rom->fullblocksize, rom->blockcount - index));
}

void scanwrom_write_xor_shares(scanwrom* rom, uint8_t * data, size_t index, size_t len) {
	memcpy(&rom->local_data[index * rom->fullblocksize], data, MIN(len*rom->fullblocksize, rom->blockcount - index));
}

scanwrom* scanwrom_new(OcCopy* blockcpy, size_t n) {
	online_expand_init();
	scanwrom * rom = malloc(sizeof(scanwrom));
	size_t fullblocksize = blockcpy->eltsize/sizeof(obliv uint8_t);
	rom->fullblocksize = fullblocksize;
	rom->blockmultiple = fullblocksize/BLOCKSIZE;
	rom->blockcount = n;
	rom->blockcpy = blockcpy;
	rom->local_data = calloc(n, fullblocksize);
	rom->local_blocktemp = malloc(fullblocksize);
	rom->blocktemp = calloc(3, fullblocksize * sizeof(obliv uint8_t));
	return rom;
}

void scanwrom_free(scanwrom* rom) {
	free(rom->local_data);
	free(rom->local_blocktemp);
	free(rom->blocktemp);
	free(rom);
	online_expand_deinit();
}