#ifndef OBLIV_RAM_OH
#define OBLIV_RAM_OH

#include <stdbool.h>
#include <obliv.oh>
#include "copy.oh"

typedef obliv uint32_t oram_base;

typedef struct oram oram;

typedef void (* block_access_function)(OcCopy *, void * oram_block, void * external_block) obliv;

oram * oram_new(size_t, size_t);
oram * oram_from_array(size_t, size_t, oram_base *);
void oram_free(oram *);

obliv bool oram_read(oram_base *, oram *, obliv size_t);
obliv bool oram_read_obliv(oram_base *, oram *, obliv size_t) obliv;
obliv bool oram_write(oram *, oram_base *, obliv size_t);
obliv bool oram_write_obliv(oram *, oram_base *, obliv size_t) obliv;
obliv bool oram_apply(oram *, oram_base *, block_access_function, obliv size_t);
obliv bool oram_apply_obliv(oram *, oram_base *, block_access_function, obliv size_t) obliv;

#endif