#ifndef OBIG_OH
#define OBIG_OH

#include <stdbool.h>
#include <stdint.h>
#include <obliv.oh>

typedef struct obig {
	size_t digits;
	obliv uint8_t * data;
} obig;

/* memory management */

void obig_init(obig* x, size_t bytes);
void obig_free(obig* x);

void obig_resize(obig* x, size_t bytes);
void obig_resize_signed(obig* x, size_t bytes);
void obig_match_sizes(obig* x, obig* y);
void obig_match_sizes_signed(obig* x, obig* y);

// Copy functions truncate or 0-extend for mismatched lengths
void obig_copy(obig* out, obig in) obliv;
// This copies with sign extension instead of 0-extension
void obig_copy_signed(obig* out, obig in) obliv;

/* convenience setters */

void obig_zero(obig* x) obliv;
void obig_one(obig* x) obliv;
void obig_set_onative(obig* x, obliv uint64_t y) obliv;
void obig_set_onative_signed(obig* x, obliv int64_t y) obliv;
void obig_set_pointed(obig* x, void* p, size_t s) obliv;

/* comparators */

obliv bool obig_eq(obig x, obig y) obliv;
obliv bool obig_eq_signed(obig x, obig y) obliv;
obliv bool obig_gt(obig x, obig y) obliv;
obliv bool obig_gt_signed(obig x, obig y) obliv;
obliv bool obig_lt(obig x, obig y) obliv;
obliv bool obig_lt_signed(obig x, obig y) obliv;
obliv bool obig_gte(obig x, obig y) obliv;
obliv bool obig_gte_signed(obig x, obig y) obliv;
obliv bool obig_lte(obig x, obig y) obliv;
obliv bool obig_lte_signed(obig x, obig y) obliv;
obliv bool obig_gtz(obig x) obliv;
obliv bool obig_gtz_signed(obig x) obliv;
obliv bool obig_ltz_signed(obig x) obliv;
obliv bool obig_eqz(obig x) obliv;
obliv int8_t obig_cmp(obig x, obig y) obliv;
obliv int8_t obig_cmp_signed(obig x, obig y) obliv;

/* nondestructive elementary math - pass the same obig for first and second parameter for augmented assignment */

void obig_shl1(obig* out, obig x) obliv;
void obig_shl_native(obig* out, obig x, uint32_t y) obliv;
void obig_shl_onative(obig* out, obig x, obliv uint32_t y obliv);
void obig_shr1(obig* out, obig x) obliv;
void obig_shr_native(obig* out, obig x, uint32_t y) obliv;
void obig_shr_onative(obig* out, obig x, obliv uint32_t y) obliv;

void obig_neg(obig* out, obig x) obliv;
void obig_add(obig* out, obig x, obig y) obliv;
void obig_sub(obig* out, obig x, obig y) obliv;

void obig_not(obig* out, obig x) obliv;
void obig_and(obig* out, obig x, obig y) obliv;
void obig_or(obig* out, obig x, obig y) obliv;
void obig_xor(obig* out, obig x, obig y) obliv;

#endif