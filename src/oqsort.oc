#include "oqsort.oh"
#include <obliv.h>

static void * element(OcCopy* cpy,void * arr, int x) obliv {
	return x*cpy->eltsize+(char*)arr;
}
// void swapInt(obliv int* a,obliv int* b)
// {
//   obliv int t = 0;
//   t=*a^*b;
//   *a^=t;
//   *b^=t;
// }

int partition(OcCopy * cpy, void * data, void* temp, int n, osort_cmp_function cmpFn){
  int i = -1;
  void *pi = element(cpy, data, n-1);
  for (int j = 0; j < n-1; j++){
    obliv bool oleq = cmpFn(cpy, element(cpy, data, j), pi) >= 0;
    //obliv bool leq = (arr[j] <= arr[n-1]);
    bool leq = true;
    // reveal the result of comparsion
    revealOblivBool(&leq, oleq, 2);
    // obliv if (oleq) {
    //   i++;
    //   swapInt(&arr[i], &arr[j]);
    // }
    if (leq) {
      i = i + 1;
      ocCopy(cpy, temp, element(cpy, data, i));
      ocCopy(cpy, element(cpy, data, i), element(cpy, data, j));
      ocCopy(cpy, element(cpy, data, j), temp);
      //ocSwap(cpy, element(cpy, data, i), element(cpy, data, j), temp);
    }
    //*(obliv int *)temp = oleq * *(obliv int *)element(cpy, data, i) + (1-oleq) * *(obliv int *)element(cpy, data, j);
    //if (leq) ocSwap(cpy, element(cpy, data, i), element(cpy, data, j), temp);
    //*(obliv int *)element(cpy, data, j) = (1-oleq) * *(obliv int *)element(cpy, data, i) + oleq * *(obliv int *)element(cpy, data, j);
    //*(obliv int *)element(cpy, data, i) = *(obliv int *)temp;
  }
  //int p = i + 1;
  ocSwap(cpy, element(cpy, data, i+1), pi, temp);
  //swapInt(&arr[p], &arr[n-1]);
  // p is the index of pivot
  //return p;
  return i+1;
}

void oqsort_main(OcCopy * cpy, void * data, void * temp, int len, osort_cmp_function cmpFn){
  if (1 < len) {
    // p is the index of pivot
    int p = partition(cpy, data, temp, len, cmpFn);
    // sort first p value
    oqsort_main(cpy, data, temp, p, cmpFn);
    // sort last n-p-1 value
    oqsort_main(cpy, element(cpy, data,p+1), temp, len-p-1, cmpFn);
  }
}

void oqsort(OcCopy * cpy, void * data, size_t end, osort_cmp_function cmpFn){
  void* temp = calloc(1, cpy->eltsize);
  oqsort_main(cpy, data, temp, end, cmpFn);
  free(temp);
}
