#include "osha256.oh"

/*
 * FIPS specification refers to right rotations, while our ROTATE macro
 * is left one. This is why you might notice that rotation coefficients
 * differ from those observed in FIPS document by 32-N...
 */
#define ROTATE(a,n) (((a)<<(n))|(((a)&0xffffffff)>>(32-(n))))
#define Sigma0(x)       (ROTATE((x),30) ^ ROTATE((x),19) ^ ROTATE((x),10))
#define Sigma1(x)       (ROTATE((x),26) ^ ROTATE((x),21) ^ ROTATE((x),7))
#define sigma0(x)       (ROTATE((x),25) ^ ROTATE((x),14) ^ ((x)>>3))
#define sigma1(x)       (ROTATE((x),15) ^ ROTATE((x),13) ^ ((x)>>10))

#define Ch(x,y,z)       (((x) & (y)) ^ ((~(x)) & (z)))
#define Maj(x,y,z)      (((x) & (y)) ^ ((x) & (z)) ^ ((y) & (z)))

static uint32_t SHA256_k[64] = {
	0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
	0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
	0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
	0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
	0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
	0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
	0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
	0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
};

void be32enc_vect(obliv uint8_t * dst, obliv const uint32_t * src, size_t len) {
	for (size_t ii = 0; ii < len / 4; ii++) {
		dst[ii * 4 + 3] = src[ii] & 0xFF;
		dst[ii * 4 + 2] = (src[ii] >> 8) & 0xFF;
		dst[ii * 4 + 1] = (src[ii] >> 16) & 0xFF;
		dst[ii * 4 + 0] = (src[ii] >> 24) & 0xFF;
	}
}

void be32enc(obliv uint8_t * dst, uint32_t x) {
	dst[3] = x & 0xff;
	dst[2] = (x >> 8) & 0xff;
	dst[1] = (x >> 16) & 0xff;
	dst[0] = (x >> 24) & 0xff;
}

void be64enc(obliv uint8_t * dst, uint64_t x) {
	dst[7] = x & 0xff;
	dst[6] = (x >> 8) & 0xff;
	dst[5] = (x >> 16) & 0xff;
	dst[4] = (x >> 24) & 0xff;
	dst[3] = (x >> 32) & 0xff;
	dst[2] = (x >> 40) & 0xff;
	dst[1] = (x >> 48) & 0xff;
	dst[0] = (x >> 56) & 0xff;
}

void oSHA256_Init(oSHA256_CTX *ctx) {
	ctx->state[0] = 0x6a09e667;
	ctx->state[1] = 0xbb67ae85;
	ctx->state[2] = 0x3c6ef372;
	ctx->state[3] = 0xa54ff53a;
	ctx->state[4] = 0x510e527f;
	ctx->state[5] = 0x9b05688c;
	ctx->state[6] = 0x1f83d9ab;
	ctx->state[7] = 0x5be0cd19;
	ctx->count = 0;
	for (int ii = 0; ii < OSHA256_BLOCK; ii++) {
		ctx->data[ii] = 0;
	}
}

void oSHA256_Transform(oSHA256_CTX * ctx, obliv const uint8_t * data) {
	obliv uint32_t a, b, c, d, e, f, g, h, s0, s1, T1, T2, X[16], l;
	int ii, jj;

	a = ctx->state[0];
	b = ctx->state[1];
	c = ctx->state[2];
	d = ctx->state[3];
	e = ctx->state[4];
	f = ctx->state[5];
	g = ctx->state[6];
	h = ctx->state[7];

	for (ii = 0; ii < 16; ii++) {
		l = 0;
		for (jj = 0; jj < 4; jj++) {
			l = (l << 8) | data[ii*4+jj];
		}

		T1 = X[ii] = l;
		T1 += h + Sigma1(e) + Ch(e, f, g) + SHA256_k[ii];
		T2 = Sigma0(a) + Maj(a, b, c);
		h = g;
		g = f;
		f = e;
		e = d + T1;
		d = c;
		c = b;
		b = a;
		a = T1 + T2;
	}

	for (; ii < 64; ii++) {
		s0 = X[(ii + 1) & 0x0f];
		s0 = sigma0(s0);
		s1 = X[(ii + 14) & 0x0f];
		s1 = sigma1(s1);

		T1 = X[ii & 0xf] += s0 + s1 + X[(ii + 9) & 0xf];
		T1 += h + Sigma1(e) + Ch(e, f, g) + SHA256_k[ii];
		T2 = Sigma0(a) + Maj(a, b, c);
		h = g;
		g = f;
		f = e;
		e = d + T1;
		d = c;
		c = b;
		b = a;
		a = T1 + T2;
	}

	ctx->state[0] += a;
	ctx->state[1] += b;
	ctx->state[2] += c;
	ctx->state[3] += d;
	ctx->state[4] += e;
	ctx->state[5] += f;
	ctx->state[6] += g;
	ctx->state[7] += h;
}

void oSHA256_Update(oSHA256_CTX *ctx, obliv const uint8_t * data, size_t len) {
	/* Return immediately if we have nothing to do. */
	if (len == 0)
		return;

	/* Number of bytes left in the buffer from previous updates. */
	uint32_t r = (ctx->count >> 3) & 0x3f;
	uint32_t completed = 0;

	/* Update number of bits. */
	ctx->count += (uint64_t)(len) << 3;

	/* Handle the case where we don't need to perform any transforms. */
	if (len < OSHA256_BLOCK - r) {
		for (uint32_t ii = 0; ii < len; ii ++) {
			ctx->data[r + ii] = data[ii];
		}
		return;
	}

	/* Finish the current block. */
	for (uint32_t ii = 0; ii < (OSHA256_BLOCK - r); ii ++) {
		ctx->data[r + ii] = data[ii];
	}
	oSHA256_Transform(ctx, ctx->data);
	completed += (OSHA256_BLOCK - r);
	len -= OSHA256_BLOCK - r;

	/* Perform complete blocks. */
	while (len >= OSHA256_BLOCK) {
		oSHA256_Transform(ctx, &data[completed]);
		completed += OSHA256_BLOCK;
		len -= OSHA256_BLOCK;
	}

	/* Copy left over data into buffer. */
	for (uint32_t ii = 0; ii < len; ii ++) {
		ctx->data[ii] = data[completed+ii];
	}
}

/* Add padding and terminating bit-count. */
void oSHA256_Pad(oSHA256_CTX * ctx) {
	obliv uint8_t pad_data[72];
	uint32_t r, plen;
	
	r = (ctx->count >> 3) & 0x3f;
	plen = (r < OSHA256_BLOCK - sizeof(ctx->count)) ? ((OSHA256_BLOCK - sizeof(ctx->count)) - r) : (2 * OSHA256_BLOCK - sizeof(ctx->count) - r);
	pad_data[0] = 0x80;
	for (int ii = 1; ii < plen; ii++) {
		pad_data[ii] = 0;
	}

	be64enc(&pad_data[plen], ctx->count);

	oSHA256_Update(ctx, pad_data, (size_t)(plen + sizeof(ctx->count)));
}

void oSHA256_Final(obliv uint8_t digest[OSHA256_DIGEST_LENGTH], oSHA256_CTX * ctx) {
	oSHA256_Pad(ctx);
	be32enc_vect(digest, ctx->state, OSHA256_DIGEST_LENGTH);
}


/* Now HMAC and PBKDF2 functions */

/**
 * HMAC_SHA256_Init(ctx, K, Klen):
 * Initialize the HMAC-SHA256 context ${ctx} with ${Klen} bytes of key from
 * ${K}.
 */
void oHMAC_SHA256_Init(oHMAC_SHA256_CTX * ctx, obliv const uint8_t * K, size_t Klen) {
	obliv uint8_t pad[64];
	obliv uint8_t khash[OSHA256_DIGEST_LENGTH];
	size_t ii;

	/* If Klen > 64, the key is really SHA256(K). */
	if (Klen > 64) {
		oSHA256_Init(&ctx->ictx);
		oSHA256_Update(&ctx->ictx, K, Klen);
		oSHA256_Final(khash, &ctx->ictx);
		K = khash;
		Klen = OSHA256_DIGEST_LENGTH;
	}

	/* Inner SHA256 operation is SHA256(K xor [block of 0x36] || data). */
	oSHA256_Init(&ctx->ictx);
	for (ii = 0; ii < Klen; ii++)
		pad[ii] = 0x36 ^ K[ii];
	for (; ii < 64; ii++)
		pad[ii] = 0x36;
	oSHA256_Update(&ctx->ictx, pad, 64);

	/* Outer SHA256 operation is SHA256(K xor [block of 0x5c] || hash). */
	oSHA256_Init(&ctx->octx);
	for (ii = 0; ii < Klen; ii++)
		pad[ii] = 0x5c ^ K[ii];
	for (; ii < 64; ii++)
		pad[ii] = 0x5c;
	oSHA256_Update(&ctx->octx, pad, 64);
}

/**
 * HMAC_SHA256_Update(ctx, in, len):
 * Input ${len} bytes from ${in} into the HMAC-SHA256 context ${ctx}.
 */
void oHMAC_SHA256_Update(oHMAC_SHA256_CTX * ctx, obliv const uint8_t * in, size_t len) {

	/* Feed data to the inner SHA256 operation. */
	oSHA256_Update(&ctx->ictx, in, len);
}

/**
 * HMAC_SHA256_Final(digest, ctx):
 * Output the HMAC-SHA256 of the data input to the context ${ctx} into the
 * buffer ${digest}.
 */
void oHMAC_SHA256_Final(obliv uint8_t digest[OSHA256_DIGEST_LENGTH], oHMAC_SHA256_CTX * ctx) {
	obliv uint8_t ihash[OSHA256_DIGEST_LENGTH];

	/* Finish the inner SHA256 operation. */
	oSHA256_Final(ihash, &ctx->ictx);

	/* Feed the inner hash to the outer SHA256 operation. */
	oSHA256_Update(&ctx->octx, ihash, OSHA256_DIGEST_LENGTH);

	/* Finish the outer SHA256 operation. */
	oSHA256_Final(digest, &ctx->octx);
}

/**
 * PBKDF2_SHA256(passwd, passwdlen, salt, saltlen, c, buf, dkLen):
 * Compute PBKDF2(passwd, salt, c, dkLen) using HMAC-SHA256 as the PRF, and
 * write the output to buf.  The value dkLen must be at most 32 * (2^32 - 1).
 */
void oPBKDF2_SHA256(obliv const uint8_t * passwd, size_t passwdlen, obliv const uint8_t * salt, size_t saltlen, uint64_t c, uint8_t * buf, size_t dkLen) {
	oHMAC_SHA256_CTX PShctx, hctx;
	size_t ii;
	obliv uint8_t ivec[4];
	obliv uint8_t U[OSHA256_DIGEST_LENGTH];
	obliv uint8_t T[OSHA256_DIGEST_LENGTH];
	uint64_t jj;
	int kk;
	size_t clen;

	/* Compute HMAC state after processing P and S. */
	oHMAC_SHA256_Init(&PShctx, passwd, passwdlen);
	oHMAC_SHA256_Update(&PShctx, salt, saltlen);

	/* Iterate through the blocks. */
	for (ii = 0; ii * 32 < dkLen; ii++) {
		/* Generate INT(i + 1). */
		be32enc(ivec, (uint32_t)(ii + 1));

		/* Compute U_1 = PRF(P, S || INT(i)). */
		for (kk=0; kk < 8; kk++) {
			hctx.ictx.state[kk] = PShctx.ictx.state[kk];
			hctx.octx.state[kk] = PShctx.octx.state[kk];
		}
		for (kk=0; kk < OSHA256_BLOCK; kk++) {
			hctx.ictx.data[kk] = PShctx.ictx.data[kk];
			hctx.octx.data[kk] = PShctx.octx.data[kk];
		}
		hctx.ictx.count = PShctx.ictx.count;
		hctx.octx.count = PShctx.octx.count;

		oHMAC_SHA256_Update(&hctx, ivec, 4);
		oHMAC_SHA256_Final(U, &hctx);

		/* T_i = U_1 ... */
		for (kk = 0; kk < OSHA256_DIGEST_LENGTH; kk++) {
			T[kk] = U[kk];
		}

		for (jj = 2; jj <= c; jj++) {
			/* Compute U_j. */
			oHMAC_SHA256_Init(&hctx, passwd, passwdlen);
			oHMAC_SHA256_Update(&hctx, U, OSHA256_DIGEST_LENGTH);
			oHMAC_SHA256_Final(U, &hctx);

			/* ... xor U_j ... */
			for (kk = 0; kk < OSHA256_DIGEST_LENGTH; kk++)
				T[kk] ^= U[kk];
		}

		/* Copy as many bytes as necessary into buf. */
		clen = dkLen - ii * 32;
		if (clen > 32)
			clen = 32;
		for (kk = 0; kk < clen; kk++) {
			buf[ii*32+kk] = T[kk];
		}
	}
}

