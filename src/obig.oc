#include <stdint.h>

#include "ackutil.h"
#include "obig.oh"

#define IS_BIG_ENDIAN (*(uint16_t *)"\0\xff" < 0x100)

/* Utility functions to be used only internally */

static uint32_t ceildiv(uint32_t dividend, uint32_t divisor) {
	return (dividend + divisor - 1) / divisor;
}

static obliv bool obyte_msb_is_one(obliv uint8_t x) obliv {
	obliv bool result;
	//big_digit pattern = ~((big_digit)-1 >> 1);
	obliv if ((x & 0x80) == 0) {
		result = false;
	} else {
		result = true;
	}
	return result;
}


/* memory management */

void obig_init(obig* x, size_t bytes) {
	x->digits = bytes; //ceildiv(bytes,sizeof(big_digit));
	x->data = calloc(x->digits, sizeof(obliv uint8_t));
}

void obig_free(obig* x) {
	free(x->data);
	x->digits = 0;
	x->data = NULL;
}

void obig_resize(obig* x, size_t bytes) {
	obig temp;
	temp.digits = bytes; //ceildiv(bytes, sizeof(big_digit));
	temp.data = calloc(temp.digits, sizeof(obliv uint8_t));

	obig_copy(&temp, *x);

	free(x->data);
	x->digits = temp.digits;
	x->data = temp.data;
}

void obig_resize_signed(obig* x, size_t bytes);
void obig_match_sizes(obig* x, obig* y);
void obig_match_sizes_signed(obig* x, obig* y);

void obig_copy(obig* out, obig in) obliv {
	if (out->data != in.data) {
		for (size_t ii = 0; ii < out->digits; ii++) {
			if (ii < in.digits) {
				out->data[ii] = in.data[ii];
			} else {
				out->data[ii] = 0;
			}
		}
	}
}

void obig_copy_signed(obig* out, obig in) obliv {
	if (out->data != in.data) {
		if (out->digits > in.digits) {
			obliv bool inputIsNegative = obyte_msb_is_one(in.data[in.digits-1]);
			for (size_t ii = 0; ii < out->digits; ii++) {
				if (ii < in.digits) {
					out->data[ii] = in.data[ii];
				} else {
					// sign extend with MSB of input
					obliv if(inputIsNegative > 0) {
						out->data[ii] = -1;	
					} else {
						out->data[ii] = 0;
					}
				}
			}
		} else {
			for (size_t ii = 0; ii < out->digits; ii++) {
				out->data[ii] = in.data[ii];
			}
		}
	}
}

/* convenience setters */

void obig_zero(obig* x) obliv {
	for (size_t ii = 0; ii < x->digits; ii++) {
		x->data[ii] = 0;
	}
}

void obig_one(obig* x) obliv {
	x->data[0] = 1;
	for (size_t ii = 1; ii < x->digits; ii++) {
		x->data[ii] = 0;
	}
}

void obig_import_onative(obig* x, obliv uint64_t y) obliv {
	for (size_t ii = 0; ii < x->digits; ii++) {
		if (ii < sizeof(uint64_t)) {
			x->data[ii] = y >> (8 * ii);
		} else {
			x->data[ii] = 0;
		}
	}
}

void obig_import_onative_signed(obig* x, obliv int64_t y) obliv {
	obliv uint8_t extension = 0;
	obliv if (y < 0) extension = 0xFF;
	for (size_t ii = 0; ii < x->digits; ii++) {
		if (ii < sizeof(int64_t)) {
			x->data[ii] = y >> (8 * ii);
		} else {
			x->data[ii] = extension;
		}
	}
}

void obig_import_pointed(obig* x, void* p, size_t s) obliv {
	for (size_t ii = 0; ii < x->digits; ii++) {
		if (ii < s) {
			if (IS_BIG_ENDIAN) {
				x->data[x->digits - 1 - ii] = ((uint8_t*) p)[ii];
			} else {
				x->data[ii] = ((uint8_t*) p)[ii];
			}
		} else {
			x->data[ii] = 0;
		}
	}
}

obliv uint64_t obig_export_onative(obig x) obliv {
	obliv uint64_t result = 0;
	for (size_t ii = 0; min(sizeof(uint64_t), x.digits); ii++) {
		result |= x.data[ii] << (ii * 8);
	}
	return result;
}

obliv int64_t obig_export_onative_signed(obig x) obliv {
	obliv int64_t result = 0;
	obliv uint8_t extension = 0;
	obliv if (obyte_msb_is_one(x.data[x.digits-1])) extension = 0xFF;
	for (size_t ii = 0; ii < sizeof(int64_t); ii++) {
		if (ii < x.digits) {
			result |= x.data[ii] << (ii * 8);
		} else {
			result |= extension << (ii * 8);
		}
	}
	return result;
}

/* comparators */

obliv bool obig_eq(obig x, obig y) obliv {
	obliv bool result = true;
	for (size_t ii = 0; ii < max(x.digits, y.digits); ii++) {
		if (ii < x.digits && ii < y.digits) {
			result &= x.data[ii] == y.data[ii];
		} else if (ii < x.digits) {
			result &= x.data[ii] == 0;
		} else if (ii < y.digits) {
			result &= y.data[ii] == 0;
		}
	}
	return result;
}

obliv bool obig_eq_signed(obig x, obig y) obliv;

obliv bool obig_gt(obig x, obig y) obliv {
	return obig_cmp(x, y) > 0;
}

obliv bool obig_gt_signed(obig x, obig y) obliv;

obliv bool obig_lt(obig x, obig y) obliv {
	return obig_cmp(x, y) < 0;
}

obliv bool obig_lt_signed(obig x, obig y) obliv;

obliv bool obig_gte(obig x, obig y) obliv {
	return obig_cmp(x, y) >= 0;
}

obliv bool obig_gte_signed(obig x, obig y) obliv;

obliv bool obig_lte(obig x, obig y) obliv {
	return obig_cmp(x, y) <= 0;
}

obliv bool obig_lte_signed(obig x, obig y) obliv;

obliv bool obig_gtz(obig x) obliv {
	obliv bool result = false;
	for (size_t ii = 0; ii < x.digits; ii++) {
		obliv if (x.data[ii] > 0) {
			result = true;
		}
	}
	return result;
}

obliv bool obig_gtz_signed(obig x) obliv {
	return (~(obig_ltz_signed(x) | obig_eqz(x))) & 1;
}

obliv bool obig_ltz_signed(obig x) obliv {
	return obyte_msb_is_one(x.data[x.digits - 1]);
}

obliv bool obig_eqz(obig x) obliv {
	obliv bool result = 1;
	for (size_t ii = 0; ii < x.digits; ii++) {
		obliv if (x.data[ii] != 0) {
			result = 0;
		}
	}
	return result;
}

obliv int8_t obig_cmp(obig x, obig y) obliv {
	obliv int8_t result = 0;
	for (size_t ii = 0; ii < max(x.digits, y.digits); ii++) {
		if (ii < x.digits && ii < y.digits) {
			obliv if (x.data[ii] < y.data[ii]) result = -1;
			else obliv if (x.data[ii] > y.data[ii]) result = 1;
		} else if (ii < x.digits) {
			obliv if (x.data[ii] > 0) result = 1;
		} else if (ii < y.digits) {
			obliv if (y.data[ii] > 0) result = -1;
		}
	}
	return result;
}

obliv int8_t obig_cmp_signed(obig x, obig y) obliv;




void obig_not(obig* out, obig x) obliv {
	for (size_t ii = 0; ii < out->digits; ii ++) {
		if (ii < x.digits) {
			out->data[ii] = ~x.data[ii];
		} else {
			out->data[ii] = 0xFF;
		}
	}
}

void obig_and(obig* out, obig x, obig y) obliv {
	for (size_t ii = 0; ii < out->digits; ii ++) {
		if (ii < x.digits && ii < y.digits) {
			out->data[ii] = x.data[ii] & y.data[ii];
		} else {
			out->data[ii] = 0;
		}
	}
}

void obig_or(obig* out, obig x, obig y) obliv {
	for (size_t ii = 0; ii < out->digits; ii ++) {
		if (ii < x.digits && ii < y.digits) {
			out->data[ii] = x.data[ii] | y.data[ii];
		} else if (ii < x.digits) {
			out->data[ii] = x.data[ii];
		} else if (ii < y.digits) {
			out->data[ii] = y.data[ii];
		} else {
			out->data[ii] = 0;
		}
	}
}

void obig_xor(obig* out, obig x, obig y) obliv {
	for (size_t ii = 0; ii < out->digits; ii ++) {
		if (ii < x.digits && ii < y.digits) {
			out->data[ii] = x.data[ii] ^ y.data[ii];
		} else if (ii < x.digits) {
			out->data[ii] = x.data[ii];
		} else if (ii < y.digits) {
			out->data[ii] = y.data[ii];
		} else {
			out->data[ii] = 0;
		}
	}
}

void obig_shl_native(obig* out, obig x, size_t y) obliv {
	size_t y_digits = y >> 3;
	uint8_t y_bits = y & 0x7;

	for (size_t ii = x.digits + y_digits; ii < out->digits; ii ++) {
		out->data[ii] = 0;
	}

	if (out->digits > y_digits) {
		size_t ii = min(out->digits - y_digits, x.digits);
		if (ii+y_digits < out->digits) out->data[ii+y_digits] = (x.data[ii-1] >> (8-y_bits));
		do {
			ii--;
			out->data[ii+y_digits] = x.data[ii] << y_bits;	
			if (ii > 0) {
				out->data[ii+y_digits] |= (x.data[ii-1] >> (8-y_bits));
			}
		} while (ii > 0);
	}

	for (size_t ii = 0; ii < min(y_digits, out->digits); ii++) {
		out->data[ii] = 0;
	}
}

void obig_shl_native_signed(obig* out, obig x, size_t y) obliv {
	size_t y_digits = y >> 3;
	uint8_t y_bits = y & 0x7;

	for (size_t ii = x.digits + y_digits; ii < out->digits; ii ++) {
		out->data[ii] = 0;
	}

	if (out->digits > y_digits) {
		size_t ii = min(out->digits - y_digits, x.digits);
		if (ii+y_digits < out->digits) out->data[ii+y_digits] = (x.data[ii-1] >> (8-y_bits));
		do {
			ii--;
			out->data[ii+y_digits] = x.data[ii] << y_bits;	
			if (ii > 0) {
				out->data[ii+y_digits] |= (x.data[ii-1] >> (8-y_bits));
			}
		} while (ii > 0);
	}

	obliv uint8_t extension = 0;
	obliv if (obyte_msb_is_one(x.data[x.digits-1])) extension = 0xFF;

	for (size_t ii = 0; ii < min(y_digits, out->digits); ii++) {
		out->data[ii] = extension;
	}
}

//TODO: perform as few shifts as necessary for a given output length
void obig_shl_onative(obig* out, obig x, obliv size_t y) obliv {
	obig_copy(out, x);
	for (size_t ii = 0; ii < sizeof(y)/sizeof(obliv bool); ii++) {
		obliv if (y & 1 > 0) {
			obig_shl_native(out, *out, 1 << ii);
		}
		y >>= 1;
	}
}

void obig_shl_onative_signed(obig* out, obig x, obliv size_t y) obliv {
	obig_copy(out, x);
	for (size_t ii = 0; ii < sizeof(y)/sizeof(obliv bool); ii++) {
		obliv if (y & 1 > 0) {
			obig_shl_native_signed(out, *out, 1 << ii);
		}
		y >>= 1;
	}
}

void obig_shr_native(obig* out, obig x, size_t y) obliv {
	size_t y_digits = y >> 3;
	uint8_t y_bits = y & 0x7;

	for (size_t ii = 0; (ii < out->digits) && (ii+y_digits < x.digits); ii++) {
		out->data[ii] = x.data[ii+y_digits] >> y_bits;
		if (ii+y_digits+1 < x.digits) {
			out->data[ii] = out->data[ii] | (x.data[ii+y_digits+1] << (8-y_bits));
		}
	}

	if (y_digits <= x.digits) {
		for (size_t ii = x.digits-y_digits; ii < out->digits; ii++) {
			out->data[ii] = 0;
		}
	}
}

void obig_shr_native_signed(obig* out, obig x, size_t y) obliv {
	size_t y_digits = y >> 3;
	uint8_t y_bits = y & 0x7;

	obliv uint8_t extension = 0;
	obliv if (obyte_msb_is_one(x.data[x.digits-1])) extension = 0xFF;

	for (size_t ii = 0; (ii < out->digits) && (ii+y_digits < x.digits); ii++) {
		out->data[ii] = x.data[ii+y_digits] >> y_bits;
		if (ii+y_digits+1 < x.digits) {
			out->data[ii] = out->data[ii] | (x.data[ii+y_digits+1] << (8-y_bits));
		} else {
			out->data[ii] = out->data[ii] | (extension << (8-y_bits));
		}
	}

	if (y_digits <= x.digits) {
		for (size_t ii = x.digits-y_digits; ii < out->digits; ii++) {
			out->data[ii] = extension;
		}
	}
}

//TODO: perform as few shifts as necessary for a given output length
void obig_shr_onative(obig* out, obig x, obliv size_t y) obliv {
	obig temp;
	obig* tempref = &temp; //workaround for obliv-c bug
	~obliv(en) {
		obig_init(&temp, x.digits);
	}
	obig_copy(&temp, x);
	for (size_t ii = 0; ii < sizeof(y)/sizeof(obliv bool); ii++) {
		obliv if (y & 1 > 0) {
			obig_shr_native(tempref, temp, 1 << ii);
		}
		y >>= 1;
	}
	obig_copy(out, temp);
	~obliv(en) {
		obig_free(&temp);
	}
}

void obig_shr_onative_signed(obig* out, obig x, obliv size_t y) obliv {
	obig temp;
	obig* tempref = &temp; //workaround for obliv-c bug
	~obliv(en) {
		obig_init(&temp, x.digits);
	}
	obig_copy_signed(&temp, x);
	for (size_t ii = 0; ii < sizeof(y)/sizeof(obliv bool); ii++) {
		obliv if (y & 1 > 0) {
			obig_shr_native_signed(tempref, temp, 1 << ii);
		}
		y >>= 1;
	}
	obig_copy_signed(out, temp);
	~obliv(en) {
		obig_free(&temp);
	}
}

void obig_neg(obig* out, obig x) obliv {
	obliv uint8_t rem = 1;
	for (size_t ii = 0; ii < out->digits; ii ++) {
		if (ii < x.digits) {
			obliv uint16_t temp = (x.data[ii] ^ 0xFF) + rem;
			out->data[ii] = temp;
			rem = temp >> 8;
		} else {
			obliv uint16_t temp = 0xFF + rem;
			out->data[ii] = temp;
			rem = temp >> 8;
		}
	}
}

void obig_neg_signed(obig* out, obig x) obliv {
	obliv uint8_t rem = 1;
	obliv uint8_t extension = 0xFF;
	obliv if (obyte_msb_is_one(x.data[x.digits-1])) extension = 0;
	for (size_t ii = 0; ii < out->digits; ii ++) {
		if (ii < x.digits) {
			obliv uint16_t temp = (x.data[ii] ^ 0xFF) + rem;
			out->data[ii] = temp;
			rem = temp >> 8;
		} else {
			obliv uint16_t temp = extension + rem;
			out->data[ii] = temp;
			rem = temp >> 8;
		}
	}
}

void obig_abs(obig* out, obig x) obliv {
	obliv if (obyte_msb_is_one(x.data[x.digits-1])) {
		obig_neg_signed(out, x);
	}
}

void obig_add(obig* out, obig x, obig y) obliv {
	obliv uint8_t rem = 0;
	for (size_t ii = 0; ii < out->digits; ii ++) {
		if (ii < x.digits && ii < y.digits) {
			obliv uint16_t eresult = x.data[ii] + y.data[ii] + rem;
			out->data[ii] = eresult;
			rem = eresult >> 8;
		} else if (ii < x.digits) {
			obliv uint16_t eresult = x.data[ii] + rem;
			out->data[ii] = eresult;
			rem = eresult >> 8;
		} else if (ii < y.digits) {
			obliv uint16_t eresult = y.data[ii] + rem;
			out->data[ii] = eresult;
			rem = eresult >> 8;
		} else if ((ii >= x.digits && ii == y.digits) || (ii >= y.digits && ii == x.digits)) {
			out->data[ii] = rem;
		} else {
			out->data[ii] = 0;
		}
	}
}

void obig_add_signed(obig* out, obig x, obig y) obliv {
	obliv uint8_t rem = 0;
	obliv uint8_t xext = 0;
	obliv if (obyte_msb_is_one(x.data[x.digits-1])) xext = 0xFF;
	obliv uint8_t yext = 0;
	obliv if (obyte_msb_is_one(y.data[y.digits-1])) yext = 0xFF;
	for (size_t ii = 0; ii < out->digits; ii ++) {
		if (ii < x.digits && ii < y.digits) {
			obliv uint16_t eresult = x.data[ii] + y.data[ii] + rem;
			out->data[ii] = eresult;
			rem = eresult >> 8;
		} else if (ii < x.digits) {
			obliv uint16_t eresult = x.data[ii] + yext + rem;
			out->data[ii] = eresult;
			rem = eresult >> 8;
		} else if (ii < y.digits) {
			obliv uint16_t eresult = y.data[ii] + xext + rem;
			out->data[ii] = eresult;
			rem = eresult >> 8;
		} else {
			obliv uint16_t eresult = xext + yext + rem;
			out->data[ii] = eresult;
			rem = eresult >> 8;
		}
	}
}

void obig_inc(obig* out, obig x) obliv {
	obliv uint8_t rem = 1;
	for (size_t ii = 0; ii < out->digits; ii ++) {
		if (ii < x.digits) {
			obliv uint16_t eresult = x.data[ii] + rem;
			out->data[ii] = eresult;
			rem = eresult >> 8;
		} else if (ii == x.digits) {
			out->data[ii] = rem;
		} else {
			out->data[ii] = 0;
		}
	}
}

void obig_inc_signed(obig* out, obig x) obliv {
	obliv uint8_t rem = 1;
	obliv uint8_t xext = 0;
	obliv if (obyte_msb_is_one(x.data[x.digits-1])) xext = 0xFF;
	for (size_t ii = 0; ii < out->digits; ii ++) {
		if (ii < x.digits) {
			obliv uint16_t eresult = x.data[ii] + rem;
			out->data[ii] = eresult;
			rem = eresult >> 8;
		} else {
			obliv uint16_t eresult = xext + rem;
			out->data[ii] = eresult;
			rem = eresult >> 8;
		}
	}
}

void obig_sub(obig* out, obig x, obig y) obliv {
	obliv uint8_t rem = 1;
	for (size_t ii = 0; ii < out->digits; ii ++) {
		if (ii < x.digits && ii < y.digits) {
			obliv uint16_t eresult = x.data[ii] + (y.data[ii] ^ 0xFF) + rem;
			out->data[ii] = eresult;
			rem = eresult >> 8;
		} else if (ii < x.digits) {
			obliv uint16_t eresult = x.data[ii] + 0xFF + rem;
			out->data[ii] = eresult;
			rem = eresult >> 8;
		} else if (ii < y.digits) {
			obliv uint16_t eresult = (y.data[ii] ^ 0xFF) + rem;
			out->data[ii] = eresult;
			rem = eresult >> 8;
		} else {
			obliv uint16_t eresult = 0xFF + rem;
			out->data[ii] = eresult;
			rem = eresult >> 8;
		}
	}
}

void obig_sub_signed(obig* out, obig x, obig y) obliv {
	obliv uint8_t rem = 1;
	obliv uint8_t xext = 0;
	obliv if (obyte_msb_is_one(x.data[x.digits-1])) xext = 0xFF;
	obliv uint8_t yext = 0xFF;
	obliv if (obyte_msb_is_one(y.data[y.digits-1])) yext = 0;
	for (size_t ii = 0; ii < out->digits; ii ++) {
		if (ii < x.digits && ii < y.digits) {
			obliv uint16_t eresult = x.data[ii] + (y.data[ii] ^ 0xFF) + rem;
			out->data[ii] = eresult;
			rem = eresult >> 8;
		} else if (ii < x.digits) {
			obliv uint16_t eresult = x.data[ii] + yext + rem;
			out->data[ii] = eresult;
			rem = eresult >> 8;
		} else if (ii < y.digits) {
			obliv uint16_t eresult = xext + (y.data[ii] ^ 0xFF) + rem;
			out->data[ii] = eresult;
			rem = eresult >> 8;
		} else {
			obliv uint16_t eresult = xext + yext + rem;
			out->data[ii] = eresult;
			rem = eresult >> 8;
		}
	}
}

void obig_dec(obig* out, obig x) obliv {
	obliv uint8_t rem = 0;
	for (size_t ii = 0; ii < out->digits; ii ++) {
		if (ii < x.digits) {
			obliv uint16_t eresult = x.data[ii] + 0xFF + rem;
			out->data[ii] = eresult;
			rem = eresult >> 8;
		} else {
			obliv uint16_t eresult = 0xFF + rem;
			out->data[ii] = eresult;
			rem = eresult >> 8;
		}
	}
}

void obig_dec_signed(obig* out, obig x) obliv {
	obliv uint8_t rem = 0;
	obliv uint8_t xext = 0;
	obliv if (obyte_msb_is_one(x.data[x.digits-1])) xext = 0xFF;
	for (size_t ii = 0; ii < out->digits; ii ++) {
		if (ii < x.digits) {
			obliv uint16_t eresult = x.data[ii] + 0xFF + rem;
			out->data[ii] = eresult;
			rem = eresult >> 8;
		} else {
			obliv uint16_t eresult = xext + 0xFF + rem;
			out->data[ii] = eresult;
			rem = eresult >> 8;
		}
	}
}




obliv uint8_t karatsuba_add(obliv uint8_t *x,obliv uint8_t *y,obliv uint8_t *z,size_t n) obliv {
	obliv uint8_t rem = 0;
	for (size_t ii = 0; ii < n; ii ++) {
		obliv uint16_t eresult = x[ii] + y[ii] + rem;
		z[ii] = eresult;
		rem = eresult >> 8;
	}
	return rem;
}

obliv uint8_t karatsuba_aadd(obliv uint8_t *x,obliv uint8_t *z,size_t n) obliv {
	obliv uint8_t rem = 0;
	for (size_t ii = 0; ii < n; ii ++) {
		obliv uint16_t eresult = z[ii] + x[ii] + rem;
		z[ii] = eresult;
		rem = eresult >> 8;
	}
	return rem;
}

obliv uint8_t karatsuba_asub(obliv uint8_t *y,obliv uint8_t *z,size_t n) obliv {
	obliv uint8_t rem = 0;
	for (size_t ii = 0; ii < n; ii ++) {
		obliv uint16_t eresult = z[ii] - y[ii] - rem;
		z[ii] = eresult;
		rem = (eresult >> 8) & 1;
	}
	return rem;
}

void karatsuba_comba(size_t n,obliv uint8_t *x,obliv uint8_t *y,obliv uint8_t *z) obliv {
	obliv uint32_t temp = 0;
	for (size_t ii = 0; ii < n*2; ii++) {
		size_t bo = min(ii, n-1);
		size_t ao = ii - bo;

		for (size_t jj = 0; jj < min(n-ao, bo+1); jj++) {
			temp = temp + x[ao+jj] * y[bo-jj];
		}
		z[ii] = temp;
		temp >>= 8;
	}
}

#define COMBA_THRESHOLD 1
void karatsuba(size_t n,obliv uint8_t *t,obliv uint8_t *x,obliv uint8_t *y,obliv uint8_t *z) obliv {
	/* This function is an implimentation of the Karatsuba-Comba multiplication method,
	adapted from the MIRACL multiprecision library */

	if ((n % 2 != 0) | (n <= COMBA_THRESHOLD)) {
		karatsuba_comba(n,x,y,z);
		return;
	}

	size_t nd2 = n/2;

	obliv uint8_t c1=karatsuba_add(x,&x[nd2],z,nd2);
	obliv uint8_t c2=karatsuba_add(y,&y[nd2],&z[nd2],nd2);

	obliv uint8_t c=0;
	karatsuba(nd2,&t[n],z,&z[nd2],t);
	obliv if (c1 > 0) c+=karatsuba_aadd(&z[nd2],&t[nd2],nd2);
	obliv if (c2 > 0) c+=karatsuba_aadd(z,&t[nd2],nd2);
	obliv if ((c1 & c2) > 0) c++;

	karatsuba(nd2,&t[n],x,y,z);
	c-=karatsuba_asub(z,t,n);           /* subtract a0*b0 */

	karatsuba(nd2,&t[n],&x[nd2],&y[nd2],&z[n]);
	c-=karatsuba_asub(&z[n],t,n);       /* subtract a1*b1 */

	c+=karatsuba_aadd(t,&z[nd2],n);    /* combine results */

	size_t ii=n+nd2;
	z[ii]+=c;
	obliv bool keepcarrying = true;
	for (ii++;ii<n*2;ii++) { /* propagate carries */
		obliv if (z[n+nd2]<c & keepcarrying & ((ii == n+nd2 + 1) | (z[ii-1]==0))) {
			z[ii]++;
		} else {
			keepcarrying = false;
		}
	}
}

void obig_mul(obig* out, obig x, obig y) obliv {

	~obliv(en) {
		size_t indigits = max(x.digits, y.digits);
		obliv uint8_t * temp = calloc(indigits * 2, sizeof(obliv uint8_t));

		obliv uint8_t * x2;
		obliv uint8_t * y2;
		obliv uint8_t * z;

		if (x.digits < indigits) {
			x2 = calloc(indigits, sizeof(obliv uint8_t));
			size_t ii = 0;
			for (; ii < x.digits; ii++) {
				x2[ii] = x.data[ii];
			}
		} else {
			x2 = x.data;
		}

		if (y.digits < indigits) {
			y2 = calloc(indigits, sizeof(obliv uint8_t));
			size_t ii = 0;
			for (; ii < y.digits; ii++) {
				y2[ii] = y.data[ii];
			}
		} else {
			y2 = y.data;
		}

		if (out->digits < indigits * 2) {
			z = calloc(indigits * 2, sizeof(obliv uint8_t));
		} else {
			z = out->data;
		}

		obliv if (en) karatsuba(indigits,temp, x2, y2, z);

		if (x.digits < indigits) {
			free(x2);
		}
		if (y.digits < indigits) {
			free(y2);
		}
		if (out->digits < indigits * 2) {
			for (size_t ii = 0; ii < out->digits; ii++) {
				out->data[ii] = z[ii];
			}
			free(z);
		} else {
			for (size_t ii = indigits * 2; ii < out->digits; ii++) {
				out->data[ii] = 0;
			}
		}

		free(temp);
	}
}

void obig_mul_signed(obig * out, obig x, obig y) obliv {
	~obliv(en) {
		obig x2;
		obig y2;
		obig * x2ref = &x2;
		obig * y2ref = &y2;
		size_t indigits = max(x.digits, y.digits);
		obig_init(&x2, indigits);
		obig_init(&y2, indigits);
		obliv bool x_ltz = obyte_msb_is_one(x.data[x.digits-1]);
		obliv bool y_ltz = obyte_msb_is_one(y.data[y.digits-1]);
		obliv if (x_ltz) {
			obig_neg_signed(x2ref, x);
		} else {
			obig_copy(x2ref, x);
		}
		obliv if (y_ltz) {
			obig_neg_signed(y2ref, y);
		} else {
			obig_copy(y2ref, y);
		}
		obliv if (en) obig_mul(out, x2, y2);
		obig_free(&x2);
		obig_free(&y2);
		obliv if (en & (x_ltz ^ y_ltz)) {
			obig_neg(out, *out);
		}
	}
}



obliv size_t knuth_d_count_leading_zeros(obliv uint8_t * x, size_t n) obliv {
	obliv size_t result = 0;
	obliv bool found_one = false;
	for (size_t ii = 0; ii < n; ii++) {
		obliv uint8_t temp = x[ii];
		for (size_t jj = 0; jj < 8; jj++) {
			obliv if (((temp >> jj) & 1) > 0) {
				result = 0;
			} else {
				result ++;
			}
		}
	}
	return result;
}

void knuth_d(obliv uint8_t *u, obliv uint8_t *v, obliv uint8_t *q, size_t n, size_t m) obliv {
	/* this is a straightforward implementation of Knuth's Algorithm D,
	as described in The Art of Computer Programming Vol 2, Section 4.3.1

	In addition, the implementation is partially based upon code from Hacker's Delight,
	available at http://www.hackersdelight.org/hdcodetxt/divmnu64.c.txt
	
	we assume that u and v have been normalized (i.e. the first digit of v is 1),
	that n >= 2, and that our inputs and outputs are of the following lengths:
	u (dividend): m+n
	v (divisor): n
	q (quotient): m+1
	r (remainder): n
	*/

	for (int64_t jj = m; jj >= 0; jj--) {
		//Knuth D3
		obliv uint8_t qhat;
		obliv uint16_t temp1, temp2;
		obliv if (u[jj+n] == v[n-1]) {
			qhat = ~0;
		} else {
			qhat = (((obliv uint16_t)u[jj+n] << 8) + u[jj+n-1]) / v[n-1];
		}

		temp1 = v[n-2] * qhat;
		temp2 = ((((obliv uint16_t)u[jj+n] << 8) + u[jj+n-1] - qhat * v[n-1]) << 8) +u[jj+n-2];
		obliv if (temp1 > temp2) {
			qhat--;
			temp1 -= v[n-2];
			temp2 = ((((obliv uint16_t)u[jj+n] << 8) + u[jj+n-1] - qhat * v[n-1]) << 8) +u[jj+n-2];
		}
		obliv if (temp1 > temp2) qhat--;

		//Knuth D4
		obliv int16_t carry = 0;
		obliv int16_t product;
		for (size_t ii = 0; ii < n; ii++) {
			temp1 = qhat*v[ii];
			product = u[ii+jj] - carry - (temp1 & 0xFF);
			u[ii+jj] = product;
			carry = (temp1 >> 8) - (product >> 8);
		}
		product = u[n+jj] - carry;
		u[n+jj] = product;


		//Knuth D5
		q[jj] = qhat;
		carry = 0;
		obliv if (product < 0) {
			// Knuth D6
			q[jj]--;
			for (size_t ii = 0; ii < n; ii++) {
				temp1 = (obliv uint16_t) u[ii+jj] + v[ii] + carry;
				u[ii+jj] = temp1;
				carry = temp1 >> 8;
			}
			u[jj+n] = u[jj+n] + carry;
		}
	}
}

void knuth_d_1(obliv uint8_t *u, obliv uint8_t *v, obliv uint8_t *q, obliv uint8_t * r, size_t m) obliv {
	obliv int16_t carry = 0;                            
	for (int64_t jj = m - 1; jj >= 0; jj--) {    
		q[jj] = ((carry << 8) + u[jj])/v[0];      
		carry = ((carry << 8) + u[jj]) - q[jj]*v[0];
	}
	r[0] = carry;
}

obliv bool obig_div_mod(obig* q, obig* r, obig x, obig y) obliv {

	obig u;
	obig * uref = &u; //workaround for obliv-c quirk
	obig v;
	obig * vref = &v; //workaround for obliv-c quirk
	obliv uint8_t * q2;
	obliv uint8_t * r2;
	obliv bool success;

	size_t m = x.digits;
	size_t n = y.digits;

	~obliv(en) {

		if (n > 1) {
			obig_init(uref, m + n + 1);
			obig_init(vref, n);
		}

		if (q != NULL && q->digits > m) {
			q2 = q->data;
		} else {
			q2 = calloc(m + 1, sizeof(obliv uint8_t));
		}
	}

	if (n > 1) {
		// Normalize inputs (Knuth D1)
		obliv size_t normalize_amount = knuth_d_count_leading_zeros(y.data, n);
		success = normalize_amount < (n * 8);

		obig_shl_onative(uref, x, normalize_amount);
		obig_shl_onative(vref, y, normalize_amount);

		knuth_d(u.data, v.data, q2, n, m);

		// Unnormalize output (Knuth D7)
		if (r != NULL) obig_shr_onative(r, u, normalize_amount);
	} else {
		obliv uint8_t rtemp;
		if (r != NULL) r2 = r->data;
		else r2 = &rtemp;

		success = y.data[0] > 0;
		knuth_d_1(x.data, y.data, q2, r2, m);

		if (r != NULL) {
			for (size_t ii = 1; ii < r->digits; ii++) {
				r->data[ii] = 0;
			}
		}
	}

	~obliv (en) {
		if (q != NULL) {
			if (q2 == q->data) {
				for (size_t ii = m + 2; ii < q->digits; ii++) {
					q->data[ii] = 0;
				}
			} else {
				for (size_t ii = 0; ii < q->digits; ii++) {
					q->data[ii] = q2[ii];
				}
				free(q2);
			}
		} else {
			free(q2);
		}
		
		if (n > 1) {
			obig_free(&u);
			obig_free(&v);
		}
	}	

	return success;
}

obliv bool obig_div_mod_signed(obig * q, obig * r, obig x, obig y) obliv {
	obliv bool result = false;
	~obliv(en) {
		obig x2;
		obig y2;
		obig *x2ref = &x2;
		obig *y2ref = &y2;
		obig_init(&x2, x.digits);
		obig_init(&y2, y.digits);
		obliv bool numerator_ltz = obyte_msb_is_one(x.data[x.digits-1]);
		obliv bool denominator_ltz = obyte_msb_is_one(y.data[y.digits-1]);
		obliv if (numerator_ltz) {
			obig_neg_signed(x2ref, x);
		} else {
			obig_copy(x2ref, x);
		}
		obliv if (denominator_ltz) {
			obig_neg_signed(y2ref, y);
		} else {
			obig_copy(y2ref, y);
		}

		obliv if (en) result = obig_div_mod(q, r, x2, y2);
		obig_free(&x2);
		obig_free(&y2);
		if (q != NULL) {
			obliv if (en & (numerator_ltz ^ denominator_ltz)) {
				obig_neg(q, *q);
			}
		}
		if (r != NULL) {
			obliv if (en & numerator_ltz) {
				obig_neg(r, *r);
			}
		}
	}
	return result;
}



void obig_sqrt(obig* out, obig x) obliv {
	/* we find the square root by successive approximation
	input is assumed to be unsigned */

	obig square;
	obig* squareref = &square;
	obig temp;
	obig root;
	obig* rootref = &root;
	obig bit;

	~obliv(en) {
		obig_init(&square, x.digits);
		obig_copy(&square, x);
		
		if (out->digits >= x.digits) {
			root.data = out->data;
			root.digits = out->digits;
			obig_zero(out);
		} else {
			obig_init(&root, x.digits);
		}

		obig_init(&temp, x.digits);
		obig_init(&bit, x.digits);
		bit.data[x.digits - 1] = 0x40;
	}

	for (size_t ii = 0; ii < x.digits*4; ii++) {
		obig_add(&temp, root, bit);					// 		temp = root + bit
		obliv bool sgterb = obig_gte(square, temp);
		obliv if(sgterb) {							// 		if ( x >= root + bit ) {
			obig_sub(squareref, square, temp);		//			x -= root + bit
		}
		obig_shr_native(&root, root, 1);			//			root >>= 1 (unconditional)
		obliv if(sgterb) {
			obig_add(rootref, root, bit);			//			root += bit
		}											//		}
		obig_shr_native(&bit, bit, 2);				//		bit >>= 2
	}

	~obliv(en) {
		if (root.data != out->data) {
			obig_copy(out, root);
			obig_free(&root);
		}

		obig_free(&square);
		obig_free(&temp);
		obig_free(&bit);
	}
}	