#include <obliv.oh>
#include "osalsa.oh"
#include "test_generic.h"

static const char TESTNAME[] = "osalsa";

char* testName() {
	return TESTNAME;
}

void testMain(void*varg) {

	/* test vectors in this file are taken from http://cr.yp.to/snuffle/spec.pdf */

	{
		obliv uint8_t input[64];
		uint8_t input_raw[64] = {
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		};
		uint8_t expected_output[64] = {
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		};

		for (int ii = 0; ii < 64; ii++) {
			input[ii] = feedOblivChar(input_raw[ii], 1);
		}

		osalsa20(input);

		bool success = true;
		for (int ii = 0; ii < 64; ii++) {
			uint8_t temp;
			revealOblivChar(&temp, input[ii], 0);
			success &= (temp == expected_output[ii]);
		}

		fprintf(stderr, "Test Item: %-70s %s\n", "oSalsa20 - Test Case 1", (success)?STATUS_SUCCESS:STATUS_FAILURE);
		if (!success) {
			fprintf(stderr, "\tExpected Output:\t");
			for (int ii = 0; ii < 64; ii++) {
				fprintf(stderr, "%02hhX", expected_output[ii]);
			}
			fprintf(stderr, "\n\tActual Output: \t\t");
			for (int ii = 0; ii < 64; ii++) {
				uint8_t temp;
				revealOblivChar(&temp, input[ii], 0);
				fprintf(stderr, "%02hhX", temp);
			}
			fprintf(stderr, "\n");
		}
	}

	{
		obliv uint8_t input[64];
		uint8_t input_raw[64] = {
			211,159,13,115,76,55,82,183,3,117,222,37,191,187,234,136,49,237,179,48,1,106,178,219,175,199,166,48,86,16,179,207,31,240,32,63,15,83,93,161,116,147,48,113,238,55,204,36,79,201,235,79,3,81,156,47,203,26,244,243,88,118,104,54
		};
		uint8_t expected_output[64] = {
			109,42,178,168,156,240,248,238,168,196,190,203,26,110,170,154,29,29,150,26,150,30,235,249,190,163,251,48,69,144,51,57,118,40,152,157,180,57,27,94,107,42,236,35,27,111,114,114,219,236,232,135,111,155,110,18,24,232,95,158,179,19,48,202
		};

		for (int ii = 0; ii < 64; ii++) {
			input[ii] = feedOblivChar(input_raw[ii], 1);
		}

		osalsa20(input);

		bool success = true;
		for (int ii = 0; ii < 64; ii++) {
			uint8_t temp;
			revealOblivChar(&temp, input[ii], 0);
			success &= (temp == expected_output[ii]);
		}

		fprintf(stderr, "Test Item: %-70s %s\n", "oSalsa20 - Test Case 2", (success)?STATUS_SUCCESS:STATUS_FAILURE);
		if (!success) {
			fprintf(stderr, "\tExpected Output:\t");
			for (int ii = 0; ii < 64; ii++) {
				fprintf(stderr, "%02hhX", expected_output[ii]);
			}
			fprintf(stderr, "\n\tActual Output: \t\t");
			for (int ii = 0; ii < 64; ii++) {
				uint8_t temp;
				revealOblivChar(&temp, input[ii], 0);
				fprintf(stderr, "%02hhX", temp);
			}
			fprintf(stderr, "\n");
		}
	}

	{
		obliv uint8_t input[64];
		uint8_t input_raw[64] = {
			88,118,104,54,79,201,235,79,3,81,156,47,203,26,244,243,191,187,234,136,211,159,13,115,76,55,82,183,3,117,222,37,86,16,179,207,49,237,179,48,1,106,178,219,175,199,166,48,238,55,204,36,31,240,32,63,15,83,93,161,116,147,48,113
		};
		uint8_t expected_output[64] = {
			179,19,48,202,219,236,232,135,111,155,110,18,24,232,95,158,26,110,170,154,109, 42,178,168,156,240,248,238,168,196,190,203,69,144,51,57,29,29,150,26,150,30,235,249,190,163,251,48,27,111,114,114,118,40,152,157,180,57,27,94,107,42,236,35
		};

		for (int ii = 0; ii < 64; ii++) {
			input[ii] = feedOblivChar(input_raw[ii], 1);
		}

		osalsa20(input);

		bool success = true;
		for (int ii = 0; ii < 64; ii++) {
			uint8_t temp;
			revealOblivChar(&temp, input[ii], 0);
			success &= (temp == expected_output[ii]);
		}

		fprintf(stderr, "Test Item: %-70s %s\n", "oSalsa20 - Test Case 3", (success)?STATUS_SUCCESS:STATUS_FAILURE);
		if (!success) {
			fprintf(stderr, "\tExpected Output:\t");
			for (int ii = 0; ii < 64; ii++) {
				fprintf(stderr, "%02hhX", expected_output[ii]);
			}
			fprintf(stderr, "\n\tActual Output: \t\t");
			for (int ii = 0; ii < 64; ii++) {
				uint8_t temp;
				revealOblivChar(&temp, input[ii], 0);
				fprintf(stderr, "%02hhX", temp);
			}
			fprintf(stderr, "\n");
		}
	}

	fprintf(stderr, "\n");

}