#include <time.h>
#include <stdio.h>
#include <obliv.oh>
#include <stdbool.h>
#include <stdlib.h>

#include "oqueue.oh"
#include "test_generic.h"

static const char TESTNAME[] = "oqueue";

char* testName() {
	return TESTNAME;
}

void testMain(void*varg) {

	/*{

		int testEls = 500;

		oring_queue * testQueue = oring_queue_new(testEls, 1);

		bool success = true;

		for (int ii = 0; ii <testEls; ii ++) {
			obliv int input = feedOblivInt(ii, ii % 2);
			oring_queue_push(testQueue, &input);
		}

		for (int ii = 0; ii <testEls; ii ++) {
			obliv int output;
			oring_queue_pop(&output, testQueue);
			int temp;
			revealOblivInt(&temp, output, 0);
			success &= (temp == ii);
		}

		oring_queue_free(testQueue);

		fprintf(stderr, "Test Item: %-70s %s\n", "oring_queue - push/pop 500 ordered elements", (success)?STATUS_SUCCESS:STATUS_FAILURE);

	}

	{

		int testEls = 100;

		oring_queue * testQueue = oring_queue_new(testEls, 1);

		bool success = true;

		obliv bool testQueueFullness = oring_queue_empty(testQueue);
		bool tempBool;
		revealOblivBool(&tempBool, testQueueFullness, 0);
		success &= (tempBool == true);

		for (int ii = 0; ii <testEls; ii ++) {
			obliv int input = feedOblivInt(ii, ii % 2);
			oring_queue_push(testQueue, &input);
			testQueueFullness = oring_queue_empty(testQueue);
			revealOblivBool(&tempBool, testQueueFullness, 0);
			success &= (tempBool == false);
		}

		for (int ii = 0; ii <testEls; ii ++) {
			testQueueFullness = oring_queue_empty(testQueue);
			revealOblivBool(&tempBool, testQueueFullness, 0);
			success &= (tempBool == false);
			obliv int output;
			oring_queue_pop(&output, testQueue);
		}

		testQueueFullness = oring_queue_empty(testQueue);
		revealOblivBool(&tempBool, testQueueFullness, 0);
		success &= (tempBool == true);

		oring_queue_free(testQueue);

		fprintf(stderr, "Test Item: %-70s %s\n", "oring_queue - oring_queue_empty", (success)?STATUS_SUCCESS:STATUS_FAILURE);

	}

	{

		int testEls = 100;

		oring_queue * testQueue = oring_queue_new(testEls, 1);

		bool success = true;

		obliv bool testQueueFullness;
		bool tempBool;
		

		for (int ii = 0; ii <testEls; ii ++) {
			testQueueFullness = oring_queue_full(testQueue);
			revealOblivBool(&tempBool, testQueueFullness, 0);
			success &= (tempBool == false);
			obliv int input = feedOblivInt(ii, ii % 2);
			oring_queue_push(testQueue, &input);
		}

		testQueueFullness = oring_queue_full(testQueue);
		revealOblivBool(&tempBool, testQueueFullness, 0);
		success &= (tempBool == true);

		for (int ii = 0; ii <testEls; ii ++) {
			obliv int output;
			oring_queue_pop(&output, testQueue);
			testQueueFullness = oring_queue_full(testQueue);
			revealOblivBool(&tempBool, testQueueFullness, 0);
			success &= (tempBool == false);
		}

		oring_queue_free(testQueue);

		fprintf(stderr, "Test Item: %-70s %s\n", "oring_queue - oring_queue_full", (success)?STATUS_SUCCESS:STATUS_FAILURE);

	}*/






	{

		int testEls = 360;

		oqueue * testQueue = oqueue_new_static(&ocCopyInt, testEls);

		bool success = true;

		for (int ii = 0; ii <testEls; ii ++) {
			obliv int input = feedOblivInt(ii, ii % 2);
			obliv bool pushed = oqueue_push(testQueue, &input);
			bool tempBool;
			revealOblivBool(&tempBool, pushed, 0);
			success &= tempBool;
		}

		for (int ii = 0; ii <testEls; ii ++) {
			obliv int output;
			obliv bool popped = oqueue_pop(&output, testQueue);
			int temp;
			revealOblivInt(&temp, output, 0);
			bool tempBool;
			revealOblivBool(&tempBool, popped, 0);
			success &= (temp == ii && tempBool);
		}

		oqueue_free(testQueue);

		fprintf(stderr, "Test Item: %-70s %s\n", "oqueue - push/pop 360 ordered elements", (success)?STATUS_SUCCESS:STATUS_FAILURE);

	}

	{

		int testEls = 168;

		oqueue * testQueue = oqueue_new_static(&ocCopyInt, testEls);

		bool success = true;

		obliv bool testQueueFullness = oqueue_empty(testQueue);
		bool tempBool;
		revealOblivBool(&tempBool, testQueueFullness, 0);
		success &= (tempBool == true);

		for (int ii = 0; ii <testEls; ii ++) {
			obliv int input = feedOblivInt(ii, ii % 2);
			oqueue_push(testQueue, &input);
			testQueueFullness = oqueue_empty(testQueue);
			revealOblivBool(&tempBool, testQueueFullness, 0);
			success &= (tempBool == false);
		}

		for (int ii = 0; ii <testEls; ii ++) {
			testQueueFullness = oqueue_empty(testQueue);
			revealOblivBool(&tempBool, testQueueFullness, 0);
			success &= (tempBool == false);
			obliv int output;
			oqueue_pop(&output, testQueue);
		}

		testQueueFullness = oqueue_empty(testQueue);
		revealOblivBool(&tempBool, testQueueFullness, 0);
		success &= (tempBool == true);

		oqueue_free(testQueue);

		fprintf(stderr, "Test Item: %-70s %s\n", "oqueue - oqueue_empty", (success)?STATUS_SUCCESS:STATUS_FAILURE);

	}

	{

		int testEls = 168;

		oqueue * testQueue = oqueue_new_static(&ocCopyInt, testEls);

		bool success = true;

		obliv bool testQueueFullness;
		bool tempBool;
		

		for (int ii = 0; ii <testEls; ii ++) {
			testQueueFullness = oqueue_full(testQueue);
			revealOblivBool(&tempBool, testQueueFullness, 0);
			success &= (tempBool == false);
			obliv int input = feedOblivInt(ii, ii % 2);
			oqueue_push(testQueue, &input);
		}

		testQueueFullness = oqueue_full(testQueue);
		revealOblivBool(&tempBool, testQueueFullness, 0);
		success &= (tempBool == true);

		for (int ii = 0; ii <testEls; ii ++) {
			obliv int output;
			oqueue_pop(&output, testQueue);
			testQueueFullness = oqueue_full(testQueue);
			revealOblivBool(&tempBool, testQueueFullness, 0);
			success &= (tempBool == false);
		}

		oqueue_free(testQueue);

		fprintf(stderr, "Test Item: %-70s %s\n", "oqueue - oqueue_full", (success)?STATUS_SUCCESS:STATUS_FAILURE);

	}

}