#include <obliv.oh>
#include "ograph.oh"
#include "oram.oh"
#include "test_generic.h"

static const char TESTNAME[] = "bfs_benchmark";

#define TEXT_HELP_SUPPLEMENTARY "\
  -e \x1b[4mNUMBER\x1b[0m, --edges=\x1b[4mNUMBER\x1b[0m \n\t\tgenerate graphs with \x1b[4mNUMBER\x1b[0m edges\n\n\
  -v \x1b[4mNUMBER\x1b[0m, --vertices=\x1b[4mNUMBER\x1b[0m \n\t\tgenerate graphs with \x1b[4mNUMBER\x1b[0m vertices\n\n\
  -o \x1b[4mTYPE\x1b[0m, --oram-type=\x1b[4mTYPE\x1b[0m \n\t\tforce all ORAMs to be \x1b[4mTYPE\x1b[0m ORAMs. Valid types are \033[1msqrt\033[0m, \033[1mcircuit\033[0m, and \033[1mlinear\033[0m.\n\n\
  -i \x1b[4mNUMBER\x1b[0m, --samples=\x1b[4mNUMBER\x1b[0m \n\t\trun \x1b[4mNUMBER\x1b[0m iterations of the benchmark\n\n"

static const char options_string[] = "e:v:o:i:";
static struct option long_options[] = {
	{"edges", required_argument, NULL, 'e'},
	{"vertices", required_argument, NULL, 'v'},
	{"oram-type", required_argument, NULL, 'o'},
	{"samples", required_argument, NULL, 'i'},
	{0, 0, 0, 0}
};

char* get_test_name() {
	return TESTNAME;
}

char* get_supplementary_options_string() {
	return options_string;
}

struct option* get_long_options() {
	return long_options;
}

void print_supplementary_help() {
	fprintf(stderr, TEXT_HELP_SUPPLEMENTARY);
}

void test_main(void*varg) {

	#ifdef ORAM_OVERRIDE
	oram_set_default_type(ORAM_OVERRIDE);
	#endif

	int adjacency_count = 4;
	int vertices = 4;
	int samples = 1;

	args_t * args_pass = varg;
	int arg;
	optind = 0;
	while ((arg = getopt_long(args_pass->argc, args_pass->argv, options_string, long_options, NULL)) != -1) {
		if (arg == 'e') {
			adjacency_count = atoi(optarg);
			if (adjacency_count <= 0) {
				fprintf (stderr, "Argument for -%c must be positive.\n", arg);
				return;
			}
		} else if (arg == 'v') {
			vertices = atoi(optarg);
			if (vertices <= 0) {
				fprintf (stderr, "Argument for -%c must be positive.\n", arg);
				return;
			}
		} else if (arg == 'o') {
			if (strcmp(optarg,"sqrt") == 0) {
				oram_set_default_type(ORAM_TYPE_SQRT);
			} else if (strcmp(optarg,"circuit") == 0) {
				oram_set_default_type(ORAM_TYPE_CIRCUIT);
			} else if (strcmp(optarg,"linear") == 0) {
				oram_set_default_type(ORAM_TYPE_LINEAR);
			} else {
				fprintf (stderr, "Invalid argument for -%c.\n", arg);
				return;
			}
		} else if (arg == 'i') {
			samples = atoi(optarg);
			if (samples <= 0) {
				fprintf (stderr, "Argument for -%c must be positive.\n", arg);
				return;
			}
		} else if (arg == '?' || arg == ':') {
			if (optopt == 'e' || optopt == 'v' || optopt == 'o' || optopt == 'i') {
				fprintf (stderr, "Option -%c requires an argument.\n", optopt);
				return;
			} else {
				fprintf (stderr, "Option -%c not recognized.\n", optopt);
				return;
			}
		} else {
			abort();
		}
	}

	fprintf(stdout, "# BREADTH FIRST SEARCH (vertices, edge ratio, sample 1, sample 2, ... sample n)\n");
	fflush(stdout);

	{
	
		ograph_edge * edges = calloc(adjacency_count * vertices, sizeof(ograph_edge));
		uint64_t tally = 0;

		fprintf(stdout, "%d,%d", vertices, adjacency_count);
		fflush(stdout);

		for (int kk = 0; kk < samples; kk++) {
			for (int ll = 0; ll < adjacency_count * vertices; ll++) {
				edges[ll].v1 = feedOblivInt(rand_range(0,vertices), 1);
				edges[ll].v2 = feedOblivInt(rand_range(0,vertices), 2);
			}

			uint64_t startTime = current_timestamp();
			ograph_adjacency_matrix * adj = ograph_build_adjacency_matrix(vertices, edges, adjacency_count * vertices);
			ograph_vertex_list * result = ograph_breadth_first_search(adj, feedOblivInt(rand_range(0,vertices), 1));
			uint64_t runtime = current_timestamp() - startTime;

			fprintf(stdout, ",%llu", runtime);
			fflush(stdout);
			tally += runtime;

			ograph_free_vertex_list(result);
			ograph_free_adjacency_matrix(adj);
		}

		free(edges);
		fprintf(stdout, "\n");
		fprintf(stderr, "BFS (vertices:%d, edge ratio: %d): %llu microseconds avg\n", vertices, adjacency_count, tally/samples);

	}

}
