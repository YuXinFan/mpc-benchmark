#include <time.h>
#include <stdio.h>
#include <obliv.oh>
#include <stdbool.h>
#include <stdlib.h>
#include <time.h>

#include "util.h"
#include "ograph.oh"
#include "uint128.h"
#include "test_generic.h"

#define SAMPLES 30

static const char TESTNAME[] = "bfs_benchmark";

char* testName() {
	return TESTNAME;
}

int vcts[9] = {4,8,16,32,64,128,256,512,1024};
int ects[2] = {4,8};

void testMain(void*varg) {

	fprintf(stdout, "==========\nBREADTH FIRST SEARCH (vertices, edge ratio, sample 1, sample 2, ... sample n)\n----------\n");
	fflush(stdout);

	{
		for (int jj = 0; jj < 2; jj++) {
			int adjacency_count = ects[jj];
			for (int ii = 0; ii < 9; ii++) {
				int vertices = vcts[ii];
			
				ograph_edge * edges = calloc(adjacency_count * vertices, sizeof(ograph_edge));
				uint128_t * tally = uint128_new();

				fprintf(stdout, "%d,%d", vertices, adjacency_count);
				fflush(stdout);

				int samples = (vertices < 256) ? SAMPLES : 3;

				for (int kk = 0; kk < samples; kk++) {
					for (int ll = 0; ll < adjacency_count * vertices; ll++) {
						edges[ll].v1 = feedOblivInt(rand_range(0,vertices), 1);
						edges[ll].v2 = feedOblivInt(rand_range(0,vertices), 2);
					}

					uint128_t * startTime = uint128_current_timestamp();
					ograph_adjacency_matrix * adj = ograph_build_adjacency_matrix(vertices, edges, adjacency_count * vertices);
					ograph_vertex_list * result = ograph_breadth_first_search(adj, feedOblivInt(rand_range(0,vertices), 1));
					uint128_t * endTime = uint128_current_timestamp();


					uint128_t * runtime = uint128_subtract(endTime, startTime);
					free(endTime); free(startTime);
					fprintf(stdout, ",");
					print_uint128(stdout, runtime);
					fflush(stdout);
					uint128_t * newtally = uint128_add(tally, runtime);
					free(runtime);
					free(tally);
					tally = newtally;

					ograph_free_vertex_list(result);
					ograph_free_adjacency_matrix(adj);
				}

				free(edges);
				fprintf(stdout, "\n");
				fprintf(stderr, "BFS (vertices:%d, edge ratio: %d): ", vertices, adjacency_count);

				uint128_t * longsamples = uint128_from(samples);
				uint128_t * avgtime = uint128_divide(tally, longsamples);
				print_uint128(stderr, avgtime);
				free(avgtime);
				free(longsamples);
				free(tally);
				fprintf(stderr, " microseconds avg\n");
			}
		}

	}

}
