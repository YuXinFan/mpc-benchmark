#include <obliv.oh>
#include "obsort.oh"
#include "oram.oh"
#include <copy.oh>
#include "test_generic.h"

#define TEXT_HELP_SUPPLEMENTARY "\
  -n \x1b[4mNUMBER\x1b[0m, --size=\x1b[4mNUMBER\x1b[0m \n\t\tsimulate \x1b[4mNUMBER\x1b[0m size of participants\n\n\
  -o \x1b[4mTYPE\x1b[0m, --oram-type=\x1b[4mTYPE\x1b[0m \n\t\tforce all ORAMs to be \x1b[4mTYPE\x1b[0m ORAMs. Valid types are \033[1msqrt\033[0m, \033[1mcircuit\033[0m, and \033[1mlinear\033[0m.\n\n\
  -i \x1b[4mNUMBER\x1b[0m, --samples=\x1b[4mNUMBER\x1b[0m \n\t\trun \x1b[4mNUMBER\x1b[0m iterations of the benchmark\n\n"

static const char TESTNAME[] = "bsort_benchmark";
static const char options_string[] = "n:o:i:";
static struct option long_options[] = {
	{"size", required_argument, NULL, 'n'},
	{"oram-type", required_argument, NULL, 'o'},
	{"samples", required_argument, NULL, 'i'},
	{0, 0, 0, 0}
};

char* get_test_name() {
	return TESTNAME;
}

char* get_supplementary_options_string() {
	return options_string;
}

struct option* get_long_options() {
	return long_options;
}

void print_supplementary_help() {
	fprintf(stderr, TEXT_HELP_SUPPLEMENTARY);
}

void shuffle(uint32_t *array, size_t n) {
	if (n > 1) {
		size_t i;
		for (i = 0; i < n - 1; i++) 
		{
		  size_t j = i + rand() / (RAND_MAX / (n - i) + 1);
		  int t = array[j];
		  array[j] = array[i];
		  array[i] = t;
		}
	}
}

void rand_array(uint32_t *array, size_t n) {
	size_t i;
    
	for (i = 0; i < n ; i++) 
	{
		size_t j = rand() % (n*2);
		array[i] = j;
	}
}

void print_array(uint32_t *array, size_t n) {
	fflush(stdout);
	size_t i;
	fprintf(stdout, "\n");
	for (i = 0; i < n ; i++) 
	{
		fprintf(stdout, "%u,", array[i]);
	}
	fprintf(stdout, "\n");
}
bool sorted(uint32_t *array, size_t n) {
	size_t i;
	bool sort = true;
	for (i = 1; i < n ; i++) 
	{
		sort = sort && (array[i-1] <= array[i]);
	}
	return sort;
}
static obliv char cmpInt(OcCopy * cpy, void * a, void * b) {
	obliv char result;
	obliv bool cmpresult = ((obliv uint32_t *) a) > ((obliv uint32_t *) b);
	obliv if (cmpresult) {
		result = -1;
	} else {
		result = 1;
	}
	return result;
	//return (*aa > *bb) - (*aa < *bb);
}

void test_main(void*varg) {

	#ifdef ORAM_OVERRIDE
	oram_set_default_type(ORAM_OVERRIDE);
	#endif
	
	int size = 1;
	int samples = 1;

	args_t * args_pass = varg;
	int arg;
	optind = 0; // this allows us to getopt a second time
	while ((arg = getopt_long(args_pass->argc, args_pass->argv, options_string, long_options, NULL)) != -1) {
		if (arg == 'n') {
			size = atoi(optarg);
			if (size <= 0) {
				fprintf (stderr, "Argument for -%c must be positive.\n", arg);
				return;
			}
		} else if (arg == 'o') {
			if (strcmp(optarg,"sqrt") == 0) {
				oram_set_default_type(ORAM_TYPE_SQRT);
			} else if (strcmp(optarg,"circuit") == 0) {
				oram_set_default_type(ORAM_TYPE_CIRCUIT);
			} else if (strcmp(optarg,"linear") == 0) {
				oram_set_default_type(ORAM_TYPE_LINEAR);
			} else {
				fprintf (stderr, "Invalid argument for -%c.\n", arg);
				return;
			}
		} else if (arg == 'i') {
			samples = atoi(optarg);
			if (samples <= 0) {
				fprintf (stderr, "Argument for -%c must be positive.\n", arg);
				return;
			}
		} else if (arg == '?' || arg == ':') {
			if (optopt == 'n' || optopt == 'o' || optopt == 'i') {
				fprintf (stderr, "Option -%c requires an argument.\n", optopt);
				return;
			} else {
				fprintf (stderr, "Option -%c not recognized.\n", optopt);
				return;
			}
		} else {
			abort();
		}
	}

	fprintf(stdout, "# Batcher Sort (size, (sample 1 microseconds, sample 1 gates, sample 1 bytes), ... , (sample n microseconds, sample n gates, sample n bytes))\n");
	fflush(stdout);

	{
		uint64_t tally = 0;
		fprintf(stdout, "%d", size);
		fflush(stdout);

		uint32_t * perm = malloc(size * sizeof(uint32_t));
		for (int kk = 0; kk < size; kk++) {
			perm[kk] = kk;
		}

		obliv int * input = malloc(size * sizeof(obliv int));
		int * output = malloc(size *  sizeof(int));
		for (int kk = 0; kk < samples; kk++) {
			shuffle(perm, size);
            for (int jj = 0; jj < size/2; jj++) {
                input[jj] = feedOblivInt(perm[jj], 1);
            }
            for (int jj = size/2; jj < size; jj++) {
                input[jj] = feedOblivInt(perm[jj], 2);
            }
            
			int64_t runtime = current_timestamp();
			int64_t runbytes = tcp2PBytesSent(ocCurrentProto());
			int64_t rungates = yaoGateCount();
			batcherSort(input, size, sizeof(obliv int));
			runtime = current_timestamp() - runtime;
			rungates = yaoGateCount() - rungates;
			runbytes = tcp2PBytesSent(ocCurrentProto()) - runbytes;
			fprintf(stdout, ",(%llu,%llu,%llu)", runtime, rungates, runbytes);
			for (int i = 0; i < size; i++) {
				revealOblivInt(&output[i], input[i], 0);
			}
			
			if (!sorted(output, size)) {
				fprintf(stdout, "sort failed!");
				print_array(output, size);
			}
			fflush(stdout);
			tally += runtime;

			
		}

		free(perm);
		free(input);

		fprintf(stdout, "\n");
		fprintf(stderr, "Batcher Sort (size:%d): %llu microseconds avg\n", size, tally/samples);
	}

}
