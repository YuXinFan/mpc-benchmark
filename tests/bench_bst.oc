#include <time.h>
#include <stdio.h>
#include <obliv.oh>
#include <stdbool.h>
#include <stdlib.h>
#include <time.h>

#include "util.h"
#include "osearch.oh"
#include "uint128.h"
#include "test_generic.h"

#define SAMPLES 30

static const char TESTNAME[] = "obst_benchmark";

char* testName() {
	return TESTNAME;
}

obliv int cmpInt(OcCopy * cpy, void * a, void * b) obliv {
	obliv uint32_t * aa = (obliv uint32_t *) a;
	obliv uint32_t * bb = (obliv uint32_t *) b;
	return (*aa > *bb) - (*aa < *bb);
}

int elcts[3] = {32,1024,32768};
int searchcts[11] = {1,2,4,8,16,32,64,128,256,512,1024};

void testMain(void*varg) {

	fprintf(stdout, "==========\nBINARY SEARCH (elements, searches, sample 1, sample 2, ... sample n)\n----------\n");
	fflush(stdout);

	{
		OcCopy cpy = ocCopyIntN(4);

		for (int ii = 0; ii < 3; ii++) {
			int elct = elcts[ii];
			for (int jj = 0; jj < 11; jj++) {
				int searchct = searchcts[jj];

				uint128_t * tally = uint128_new();

				fprintf(stdout, "%d,%d", elct, searchct);
				fflush(stdout);

				obliv uint32_t * input = calloc(elct, 4*sizeof(obliv uint32_t));
				obliv uint32_t output;
				obliv uint32_t needle;
				obliv uint32_t otemp;

				int samples = elct < 2048 ? SAMPLES : 3;

				for (int kk = 0; kk < samples; kk++) {

					otemp = 0;
					for (int ll = 0; ll < elct; ll++) {
						otemp += feedOblivInt(rand()%8, ll%2);
						input[4*ll] = otemp;
					}

					uint128_t * startTime = uint128_current_timestamp();

					oram * o = oram_from_array(elct, cpy.eltsize / sizeof(obliv int), input);

					for (int ll = 0; ll < searchct; ll++) {
						needle = input[4 * ocBroadcastInt(rand()%elct, 1)];
						obinary_search_oram(&cpy, &output, o, &needle, &cmpInt);
					}
					oram_free(o);

					uint128_t * endTime = uint128_current_timestamp();


					uint128_t * runtime = uint128_subtract(endTime, startTime);
					free(endTime); free(startTime);
					fprintf(stdout, ",");
					print_uint128(stdout, runtime);
					fflush(stdout);
					uint128_t * newtally = uint128_add(tally, runtime);
					free(runtime);
					free(tally);
					tally = newtally;

					
				}

				free(input);

				fprintf(stdout, "\n");
				fflush(stdout);
				fprintf(stderr, "BINARY SEARCH (elements:%d, searches:%d): ", elct, searchct);
				uint128_t * longsamples = uint128_from(samples);
				uint128_t * avgtime = uint128_divide(tally, longsamples);
				print_uint128(stderr, avgtime);
				free(avgtime);
				free(longsamples);
				free(tally);
				fprintf(stderr, " microseconds avg\n");
			}
		}

	}

}
