#include <obliv.oh>
#include "oram.oh"
#include "omatch.oh"
#include "test_generic.h"

static const char TESTNAME[] = "omatch_textbook";

#define TEXT_HELP_SUPPLEMENTARY "\
  -o \x1b[4mTYPE\x1b[0m, --oram-type=\x1b[4mTYPE\x1b[0m \n\t\tforce all ORAMs to be \x1b[4mTYPE\x1b[0m ORAMs. Valid types are \033[1msqrt\033[0m, \033[1mcircuit\033[0m, and \033[1mlinear\033[0m.\n\n"

static const char options_string[] = "o:";
static struct option long_options[] = {
	{"oram-type", required_argument, NULL, 'o'},
	{0, 0, 0, 0}
};

char* get_test_name() {
	return TESTNAME;
}

char* get_supplementary_options_string() {
	return options_string;
}

struct option* get_long_options() {
	return long_options;
}

void print_supplementary_help() {
	fprintf(stderr, TEXT_HELP_SUPPLEMENTARY);
}

void test_main(void*varg) {

	#ifdef ORAM_OVERRIDE
	oram_set_default_type(ORAM_OVERRIDE);
	#endif

	args_t * args_pass = varg;
	int arg;
	optind = 0; // this allows us to getopt a second time
	while ((arg = getopt_long(args_pass->argc, args_pass->argv, options_string, long_options, NULL)) != -1) {
		if (arg == 'o') {
			if (strcmp(optarg,"sqrt") == 0) {
				oram_set_default_type(ORAM_TYPE_SQRT);
			} else if (strcmp(optarg,"circuit") == 0) {
				oram_set_default_type(ORAM_TYPE_CIRCUIT);
			} else if (strcmp(optarg,"linear") == 0) {
				oram_set_default_type(ORAM_TYPE_LINEAR);
			} else {
				fprintf (stderr, "Invalid argument for -%c.\n", arg);
				return;
			}
		} else if (arg == '?' || arg == ':') {
			if (optopt == 'o') {
				fprintf (stderr, "Option -%c requires an argument.\n", optopt);
				return;
			} else {
				fprintf (stderr, "Option -%c not recognized.\n", optopt);
				return;
			}
		} else {
			abort();
		}
	}

	{
		uint32_t mPrefsRaw[9] = {
			0, 1, 2,
			1, 2, 0,
			1, 2, 0
		};

		uint32_t wPrefsRaw[9] = {
			0, 1, 2,
			2, 2, 0,
			1, 0, 1
		};

		uint32_t expected_output[3] = {
			0, 2, 1
		};

		obliv uint32_t mPrefs[9];
		obliv uint32_t wPrefs[9];
		obliv uint32_t output[3];

		for (int ii = 0; ii < 9; ii++) {
			mPrefs[ii] = feedOblivInt(mPrefsRaw[ii], 0);
			wPrefs[ii] = feedOblivInt(wPrefsRaw[ii], 0);
		}

		ogale_shapley(output, mPrefs, wPrefs, 3);

		bool success = true;

		for (int ii = 0; ii < 3; ii++) {
			uint32_t temp;
			revealOblivInt(&temp, output[ii], 0);
			success &= (temp == expected_output[ii]);
		}

		fprintf(stderr, "Test Item: %-70s %s\n", "ogale_shapley - 3 couples", (success)?STATUS_SUCCESS:STATUS_FAILURE);
	}


}