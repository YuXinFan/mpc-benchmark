#include <time.h>
#include <stdio.h>
#include <obliv.oh>
#include <stdbool.h>

#include "obig.oh"
#include "test_generic.h"

static const char TESTNAME[] = "obig";

char* testName() {
	return TESTNAME;
}

void testMain(void*varg) {

	/******************************************
	 ******************************************
	 *** obig_set_native
	 ******************************************
	 ******************************************/

	{	// obig_set_native - random data
		unsigned long long x;
		obig x_test;

		obig_init(&x_test, sizeof(long long));

		for (int ii = 0; ii < sizeof(long long)/sizeof(int); ii++) {
			x <<= sizeof(int) * 8;
			x += rand();
		}

		x = ocBroadcastLLong(x, 1);

		obig_set_native(&x_test, x);
		unsigned char temp;
		unsigned long long output;

		for (int ii = x_test.digits -1; ii >= 0; ii--) {
			revealOblivChar(&temp, x_test.data[ii], 0);
			output <<= 8;
			output += temp;
		}

		fprintf(stderr, "Test Item: %-60s %s\n", "obig_set_native - random data", (x == output)?STATUS_SUCCESS:STATUS_FAILURE);
		if ((x != output)) {
			fprintf(stderr, "\tExpected: %0llX\n\tActual: %0llX\n", x, output);
		}

		obig_free(&x_test);
	}

	{	// obig_set_native - random data, long output
		unsigned int x;
		obig x_test;

		obig_init(&x_test, sizeof(long long));

		for (int ii = 0; ii < sizeof(long long)/sizeof(int); ii++) {
			x <<= sizeof(int) * 8;
			x += rand();
		}

		x = ocBroadcastInt(x, 1);

		obig_set_native(&x_test, x);
		unsigned char temp;
		unsigned long long output;

		for (int ii = x_test.digits -1; ii >= 0; ii--) {
			revealOblivChar(&temp, x_test.data[ii], 0);
			output <<= 8;
			output += temp;
		}

		fprintf(stderr, "Test Item: %-60s %s\n", "obig_set_native - random data, long output", (x == output)?STATUS_SUCCESS:STATUS_FAILURE);
		if ((x != output)) {
			fprintf(stderr, "\tExpected: %0llX\n\tActual: %0llX\n", x, output);
		}

		obig_free(&x_test);
	}




	/******************************************
	 ******************************************
	 *** obig_add
	 ******************************************
	 ******************************************/

	{	// obig_add
		unsigned int x = 0x7E48A840;
		unsigned int y = 0x47E0DD18;
		unsigned int expected = x + y;

		obig x_test;
		obig y_test;
		obig result;

		obig_init(&x_test, sizeof(int));
		obig_init(&y_test, sizeof(int));
		obig_init(&result, sizeof(int));

		x = ocBroadcastInt(x, 1);
		y = ocBroadcastInt(y, 2);

		obig_set_native(&x_test, x);
		obig_set_native(&y_test, y);
		unsigned char temp;
		unsigned int output;

		obig_add(&result, x_test, y_test);

		for (int ii = result.digits -1; ii >= 0; ii--) {
			revealOblivChar(&temp, result.data[ii], 0);
			output <<= 8;
			output += temp;
		}

		fprintf(stderr, "Test Item: %-60s %s\n", "obig_add", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
		if (expected != output) {
			fprintf(stderr, "\tExpected: %0X\n\tActual: %0X\n", expected, output);
		}

		obig_free(&x_test);
		obig_free(&y_test);
		obig_free(&result);
	}

	{	// obig_add - augmented assignment
		unsigned int x = 0x7E48A840;
		unsigned int y = 0x47E0DD18;
		unsigned int expected = x+y;

		obig x_test;
		obig y_test;

		obig_init(&x_test, sizeof(int));
		obig_init(&y_test, sizeof(int));

		x = ocBroadcastInt(x, 1);
		y = ocBroadcastInt(y, 2);

		obig_set_native(&x_test, x);
		obig_set_native(&y_test, y);
		unsigned char temp;
		unsigned int output;

		obig_add(&x_test, x_test, y_test);

		for (int ii = x_test.digits -1; ii >= 0; ii--) {
			revealOblivChar(&temp, x_test.data[ii], 0);
			output <<= 8;
			output += temp;
		}

		fprintf(stderr, "Test Item: %-60s %s\n", "obig_add - augmented assignment", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
		if (expected != output) {
			fprintf(stderr, "\tExpected: %0X\n\tActual: %0X\n", expected, output);
		}

		obig_free(&x_test);
		obig_free(&y_test);
	}

	{	// obig_add - overflow
		unsigned int x = 0x7E48A840;
		unsigned int y = 0xA7E0DD18;
		unsigned int expected = x+y;

		obig x_test;
		obig y_test;
		obig result;

		obig_init(&x_test, sizeof(int));
		obig_init(&y_test, sizeof(int));
		obig_init(&result, sizeof(int));

		x = ocBroadcastInt(x, 1);
		y = ocBroadcastInt(y, 2);

		obig_set_native(&x_test, x);
		obig_set_native(&y_test, y);
		unsigned char temp;
		unsigned int output;

		obig_add(&result, x_test, y_test);

		for (int ii = result.digits -1; ii >= 0; ii--) {
			revealOblivChar(&temp, result.data[ii], 0);
			output <<= 8;
			output += temp;
		}

		fprintf(stderr, "Test Item: %-60s %s\n", "obig_add - overflow", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
		if (expected != output) {
			fprintf(stderr, "\tExpected: %0X\n\tActual: %0X\n", expected, output);
		}

		obig_free(&x_test);
		obig_free(&y_test);
		obig_free(&result);
	}

	{	// obig_add - long output
		unsigned int x = 0x7E48A840;
		unsigned int y = 0xA7E0DD18;
		unsigned long long expected = 0x126298558;

		obig x_test;
		obig y_test;
		obig result;

		obig_init(&x_test, sizeof(int));
		obig_init(&y_test, sizeof(int));
		obig_init(&result, sizeof(long long));

		x = ocBroadcastInt(x, 1);
		y = ocBroadcastInt(y, 2);

		obig_set_native(&x_test, x);
		obig_set_native(&y_test, y);
		unsigned char temp;
		unsigned long long output;

		obig_add(&result, x_test, y_test);

		for (int ii = result.digits -1; ii >= 0; ii--) {
			revealOblivChar(&temp, result.data[ii], 0);
			output <<= 8;
			output += temp;
		}

		fprintf(stderr, "Test Item: %-60s %s\n", "obig_add - long output", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
		if (expected != output) {
			fprintf(stderr, "\tExpected: %0llX\n\tActual: %0llX\n", expected, output);
		}

		obig_free(&x_test);
		obig_free(&y_test);
		obig_free(&result);
	}


	/******************************************
	 ******************************************
	 *** obig_neg
	 ******************************************
	 ******************************************/

	{	// obig_neg
		unsigned int x = 0x7E48A840;
		unsigned int expected = -x;

		obig x_test;
		obig result;

		obig_init(&x_test, sizeof(int));
		obig_init(&result, sizeof(int));

		x = ocBroadcastInt(x, 1);

		obig_set_native(&x_test, x);
		unsigned char temp;
		unsigned int output;

		obig_neg(&result, x_test);

		for (int ii = result.digits -1; ii >= 0; ii--) {
			revealOblivChar(&temp, result.data[ii], 0);
			output <<= 8;
			output += temp;
		}

		fprintf(stderr, "Test Item: %-60s %s\n", "obig_neg", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
		if (expected != output) {
			fprintf(stderr, "\tExpected: %0X\n\tActual: %0X\n", expected, output);
		}

		obig_free(&x_test);
		obig_free(&result);
	}

	{	// obig_neg - augmented assignment
		unsigned int x = 0x7E48A840;
		unsigned int expected = -x;

		obig x_test;

		obig_init(&x_test, sizeof(int));

		x = ocBroadcastInt(x, 1);

		obig_set_native(&x_test, x);
		unsigned char temp;
		unsigned int output;

		obig_neg(&x_test, x_test);

		for (int ii = x_test.digits -1; ii >= 0; ii--) {
			revealOblivChar(&temp, x_test.data[ii], 0);
			output <<= 8;
			output += temp;
		}

		fprintf(stderr, "Test Item: %-60s %s\n", "obig_neg - augmented assignment", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
		if (expected != output) {
			fprintf(stderr, "\tExpected: %0X\n\tActual: %0X\n", expected, output);
		}

		obig_free(&x_test);
	}

	{	// obig_neg - overflow
		unsigned int x = 0xAE48A840;
		unsigned int expected = -x;

		obig x_test;
		obig result;

		obig_init(&x_test, sizeof(int));
		obig_init(&result, sizeof(int));

		x = ocBroadcastInt(x, 1);

		obig_set_native(&x_test, x);
		unsigned char temp;
		unsigned int output;

		obig_neg(&result, x_test);

		for (int ii = result.digits -1; ii >= 0; ii--) {
			revealOblivChar(&temp, result.data[ii], 0);
			output <<= 8;
			output += temp;
		}

		fprintf(stderr, "Test Item: %-60s %s\n", "obig_neg - overflow", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
		if (expected != output) {
			fprintf(stderr, "\tExpected: %0X\n\tActual: %0X\n", expected, output);
		}

		obig_free(&x_test);
		obig_free(&result);
	}

	{	// obig_neg - long output
		unsigned int x = 0xAE48A840;
		unsigned long long expected = x;
		expected *= -1;

		obig x_test;
		obig result;

		obig_init(&x_test, sizeof(int));
		obig_init(&result, sizeof(long long));

		x = ocBroadcastInt(x, 1);

		obig_set_native(&x_test, x);
		unsigned char temp;
		unsigned long long output;

		obig_neg(&result, x_test);

		for (int ii = result.digits -1; ii >= 0; ii--) {
			revealOblivChar(&temp, result.data[ii], 0);
			output <<= 8;
			output += temp;
		}

		fprintf(stderr, "Test Item: %-60s %s\n", "obig_neg - long output", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
		if (expected != output) {
			fprintf(stderr, "\tExpected: %0llX\n\tActual: %0llX\n", expected, output);
		}

		obig_free(&x_test);
		obig_free(&result);
	}

}