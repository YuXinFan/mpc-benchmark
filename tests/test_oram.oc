#include <obliv.oh>
#include "oram.oh"
#include "test_generic.h"

#define TEXT_HELP_SUPPLEMENTARY "\
  -o \x1b[4mTYPE\x1b[0m, --oram-type=\x1b[4mTYPE\x1b[0m \n\t\ttest only \x1b[4mTYPE\x1b[0m ORAMs. Valid types are \033[1msqrt\033[0m, \033[1mcircuit\033[0m, \033[1mfssl\033[0m, \033[1mfssl_cprg\033[0m, and \033[1mlinear\033[0m.\n\n"

static const char options_string[] = "o:";
static struct option long_options[] = {
	{"oram-type", required_argument, NULL, 'o'},
	{0, 0, 0, 0}
};

static const char TESTNAME[] = "oram";

#define ELCT 256

char* get_test_name() {
	return TESTNAME;
}

char* get_supplementary_options_string() {
	return options_string;
}

struct option* get_long_options() {
	return long_options;
}

void print_supplementary_help() {
	fprintf(stderr, TEXT_HELP_SUPPLEMENTARY);
}

void shuffle(uint32_t *array, size_t n) {
	if (n > 1) {
		size_t i;
		for (i = 0; i < n - 1; i++) 
		{
		  size_t j = i + rand() / (RAND_MAX / (n - i) + 1);
		  int t = array[j];
		  array[j] = array[i];
		  array[i] = t;
		}
	}
}

const char* getOramName(oram_type mode) {
	switch (mode) {
		case ORAM_TYPE_SQRT:
			return "Square-Root ORAM:";
		case ORAM_TYPE_CIRCUIT:
			return "Circuit ORAM:";
		case ORAM_TYPE_LINEAR:
			return "Linear Scan:";
		case ORAM_TYPE_FSSL:
			return "FSS Linear ORAM:";
		case ORAM_TYPE_FSSL_CPRG:
			return "FSSL CPRG ORAM:";
		default:
			return "Unknown";
	}
}

void testOramType(oram_type mode) {

	{
		uint32_t input_raw[ELCT];
		uint32_t order_raw[ELCT];

		for (int ii = 0; ii < ELCT; ii++) {
			input_raw[ii] = ii;
			order_raw[ii] = ii;
		}

		shuffle(order_raw, ELCT);

		oram * o = oram_new(mode, &ocCopyInt, ELCT);

		for (int ii = 0; ii < ELCT; ii++) {
			obliv size_t index = feedOblivLLong(order_raw[ii], 1);
			obliv uint32_t value = feedOblivInt(input_raw[ii], 2);
			oram_write(o, &value, index);
		}

		bool success = true;

		for (int ii = 0; ii < ELCT; ii++) {
			uint32_t temp;
			obliv uint32_t value;
			obliv size_t index = feedOblivLLong(order_raw[ii], 1);
			oram_read(&value, o, index);
			revealOblivInt(&temp, value, 0);
			success &= (temp == input_raw[ii]);
		}

		oram_free(o);

		fprintf(stderr, "Test Item: %-19s %-50s %s\n", getOramName(mode), "oram_write/oram_read", (success)?STATUS_SUCCESS:STATUS_FAILURE);

	}

	{
		uint32_t input_raw[ELCT];
		uint32_t order_raw[ELCT];
		obliv uint32_t input[ELCT];

		for (int ii = 0; ii < ELCT; ii++) {
			input_raw[ii] = ii;
			order_raw[ii] = ii;
		}

		shuffle(order_raw, ELCT);

		for (int ii = 0; ii < ELCT; ii++) {
			input[ocBroadcastInt(order_raw[ii], 1)] = feedOblivInt(input_raw[ii], 2);
		}
		oram * o = oram_from_array(mode, &ocCopyInt, ELCT, input);

		bool success = true;

		for (int ii = 0; ii < ELCT; ii++) {
			uint32_t temp;
			obliv uint32_t value;
			obliv size_t index = feedOblivLong(order_raw[ii], 1);
			oram_read(&value, o, index);
			revealOblivInt(&temp, value, 0);
			success &= (temp == input_raw[ii]);
		}

		oram_free(o);

		fprintf(stderr, "Test Item: %-19s %-50s %s\n", getOramName(mode), "oram_from_array", (success)?STATUS_SUCCESS:STATUS_FAILURE);

	}

	{
		uint32_t input_raw[ELCT];
		uint32_t expected_output[ELCT];

		for (int ii = 0; ii < ELCT; ii++) {
			input_raw[ii] = rand();
			expected_output[ii] = ocBroadcastInt(input_raw[ii], 1) ^ ocBroadcastInt(input_raw[ii], 2);
		}

		oram * o = oram_from_shares(mode, &ocCopyInt, ELCT, input_raw);

		bool success = true;

		for (int ii = 0; ii < ELCT; ii++) {
			uint32_t temp;
			obliv uint32_t value;
			oram_read(&value, o, ii);
			revealOblivInt(&temp, value, 0);
			success &= (temp == expected_output[ii]);
		}

		oram_free(o);

		fprintf(stderr, "Test Item: %-19s %-50s %s\n", getOramName(mode), "oram_from_shares", (success)?STATUS_SUCCESS:STATUS_FAILURE);

	}

	{

		oram * o = oram_new(mode, &ocCopyInt, ELCT);

		bool success = true;

		for (int ii = -2; ii < 258; ii++) {
			bool temp;
			obliv bool write_success;
			obliv size_t index = feedOblivLong(ii, 1);
			obliv uint32_t value = feedOblivInt(rand(), 2);
			write_success = oram_write(o, &value, index);
			revealOblivBool(&temp, write_success, 0);
			success &= (temp == true && (ii >= 0 || ii < ELCT)) != (temp == false && (ii < 0 || ii >= ELCT));
		}

		oram_free(o);

		fprintf(stderr, "Test Item: %-19s %-50s %s\n", getOramName(mode), "oram_write - bounds checking", (success)?STATUS_SUCCESS:STATUS_FAILURE);

	}

	{
		uint32_t input_raw[ELCT];
		uint32_t order_raw[ELCT];

		for (int ii = 0; ii < ELCT; ii++) {
			input_raw[ii] = rand();
			order_raw[ii] = ii;
		}

		shuffle(input_raw, ELCT);
		shuffle(order_raw, ELCT);

		oram * o = oram_new(mode, &ocCopyInt, ELCT);

		for (int ii = 0; ii < 256; ii++) {
			obliv size_t index = feedOblivLong(order_raw[ii], 1);
			obliv uint32_t value = feedOblivInt(input_raw[ii], 2);
			oram_write(o, &value, index);
		}

		bool success = true;

		for (int ii = -2; ii < ELCT + 2; ii++) {
			bool temp;
			obliv bool read_success;
			obliv uint32_t value;
			obliv size_t index = feedOblivLong(ii, 1);
			read_success = oram_read(&value, o, index);
			revealOblivBool(&temp, read_success, 0);
			success &= (temp == true && (ii >= 0 || ii < ELCT)) != (temp == false && (ii < 0 || ii >= ELCT));
		}

		oram_free(o);

		fprintf(stderr, "Test Item: %-19s %-50s %s\n", getOramName(mode), "oram_read - bounds checking", (success)?STATUS_SUCCESS:STATUS_FAILURE);

	}

	fprintf(stderr, "\n");

}

void test_main(void*varg) {

	bool all_orams = true;
	oram_type manual_type;

	args_t * args_pass = varg;
	int arg;
	optind = 0; // this allows us to getopt a second time
	while ((arg = getopt_long(args_pass->argc, args_pass->argv, options_string, long_options, NULL)) != -1) {
		if (arg == 'o') {
			if (strcmp(optarg,"sqrt") == 0) {
				manual_type = ORAM_TYPE_SQRT;
			} else if (strcmp(optarg,"circuit") == 0) {
				manual_type = ORAM_TYPE_CIRCUIT;
			} else if (strcmp(optarg,"linear") == 0) {
				manual_type = ORAM_TYPE_LINEAR;
			} else if (strcmp(optarg,"fssl") == 0) {
				manual_type = ORAM_TYPE_FSSL;
			} else if (strcmp(optarg,"fssl_cprg") == 0) {
				manual_type = ORAM_TYPE_FSSL_CPRG;
			} else {
				fprintf (stderr, "Invalid argument for -%c.\n", arg);
				return;
			}
			all_orams = false;
		} else if (arg == '?' || arg == ':') {
			if (optopt == 'o') {
				fprintf (stderr, "Option -%c requires an argument.\n", optopt);
				return;
			} else {
				fprintf (stderr, "Option -%c not recognized.\n", optopt);
				return;
			}
		} else {
			abort();
		}
	}

	if (all_orams) {
		testOramType(ORAM_TYPE_FSSL);
		testOramType(ORAM_TYPE_FSSL_CPRG);
		testOramType(ORAM_TYPE_SQRT);
		testOramType(ORAM_TYPE_CIRCUIT);
		testOramType(ORAM_TYPE_LINEAR);
	} else {
		testOramType(manual_type);
	}
}