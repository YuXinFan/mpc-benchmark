#include <time.h>
#include <stdio.h>
#include <obliv.oh>
#include <stdbool.h>

#include "oscrypt.oh"
#include "test_generic.h"

static const char TESTNAME[] = "oscrypt";

char* testName() {
	return TESTNAME;
}

void testMain(void*varg) {

	{
		uint32_t input_raw[32] = {
			0x650bcef7, 0xa4722d3d, 0xabf58c10, 0xddff12e9,
			0xdb167677, 0x0ea727bb, 0xaef30482, 0xad6f0f2d,
			0x488ff689, 0x7be8d111, 0x40d73bcc, 0x29fd9f0a,
			0x84014f09, 0xf3749563, 0x31a1e59a, 0xd7bc1752,
			0x44914989, 0x22bb1372, 0x4db5256c, 0xfb7063a8,
			0x804398cd, 0xbb664637, 0xbfb5fc8f, 0xb054c240,
			0x517cd267, 0xfed54ace, 0x0bc929d8, 0x1b575a50,
			0xad1c4d7f, 0xda3c526a, 0xbc670e77, 0x897eafea
		};
		obliv uint32_t input[32];

		uint32_t expected_output[32] = {
			0x9c851fa4, 0x99cc0866, 0xcbca813b, 0x05ef0c02,
			0x81214b04, 0x7d33fda2, 0x631c7bfd, 0x292f6896,
			0x683139b4, 0xbce6c9e3, 0xb7c56bfe, 0xba966da0,
			0x10cc24e4, 0x5c74912c, 0x3d67ad24, 0x818f61c7,
			0x75c9ed20, 0xa8813832, 0x4cf64005, 0x3ccd2d16,
			0xfe7c0721, 0xe25f8d5f, 0x8f16a4b1, 0xb7783695,
			0x803d3b7d, 0xabe4603b, 0xe5960992, 0xb6534d9b,
			0x58222a5d, 0xf5edd577, 0xf1b92c84, 0x25e4ef4e
		};
		obliv uint32_t output[32];

		for (int ii = 0; ii < 32; ii++) {
			input[ii] = feedOblivInt(input_raw[ii], 1);
		}

		oscrypt_blockmix_salsa8(input, output, 1);

		bool success = true;
		for (int ii = 0; ii < 32; ii++) {
			uint32_t temp;
			revealOblivInt(&temp, output[ii], 0);
			success &= (temp == expected_output[ii]);
		}

		fprintf(stderr, "Test Item: %-70s %s\n", "oscrypt_blockmix_salsa8", (success)?STATUS_SUCCESS:STATUS_FAILURE);
		if (!success) {
			fprintf(stderr, "\tExpected Output:\t");
			for (int ii = 0; ii < 32; ii++) {
				fprintf(stderr, "%08X", expected_output[ii]);
			}
			fprintf(stderr, "\n\tActual Output: \t\t");
			for (int ii = 0; ii < 32; ii++) {
				uint32_t temp;
				revealOblivInt(&temp, output[ii], 0);
				fprintf(stderr, "%08X", temp);
			}
			fprintf(stderr, "\n");
		}
	}

	{
		uint8_t input_raw[128] = {
			0xf7, 0xce, 0x0b, 0x65, 0x3d, 0x2d, 0x72, 0xa4,
			0x10, 0x8c, 0xf5, 0xab, 0xe9, 0x12, 0xff, 0xdd,
			0x77, 0x76, 0x16, 0xdb, 0xbb, 0x27, 0xa7, 0x0e,
			0x82, 0x04, 0xf3, 0xae, 0x2d, 0x0f, 0x6f, 0xad,
			0x89, 0xf6, 0x8f, 0x48, 0x11, 0xd1, 0xe8, 0x7b,
			0xcc, 0x3b, 0xd7, 0x40, 0x0a, 0x9f, 0xfd, 0x29,
			0x09, 0x4f, 0x01, 0x84, 0x63, 0x95, 0x74, 0xf3,
			0x9a, 0xe5, 0xa1, 0x31, 0x52, 0x17, 0xbc, 0xd7,
			0x89, 0x49, 0x91, 0x44, 0x72, 0x13, 0xbb, 0x22,
			0x6c, 0x25, 0xb5, 0x4d, 0xa8, 0x63, 0x70, 0xfb,
			0xcd, 0x98, 0x43, 0x80, 0x37, 0x46, 0x66, 0xbb,
			0x8f, 0xfc, 0xb5, 0xbf, 0x40, 0xc2, 0x54, 0xb0,
			0x67, 0xd2, 0x7c, 0x51, 0xce, 0x4a, 0xd5, 0xfe,
			0xd8, 0x29, 0xc9, 0x0b, 0x50, 0x5a, 0x57, 0x1b,
			0x7f, 0x4d, 0x1c, 0xad, 0x6a, 0x52, 0x3c, 0xda,
			0x77, 0x0e, 0x67, 0xbc, 0xea, 0xaf, 0x7e, 0x89
		};
		obliv uint8_t input[128];

		uint32_t expected_output[128] = {
			0x79, 0xcc, 0xc1, 0x93, 0x62, 0x9d, 0xeb, 0xca,
			0x04, 0x7f, 0x0b, 0x70, 0x60, 0x4b, 0xf6, 0xb6,
			0x2c, 0xe3, 0xdd, 0x4a, 0x96, 0x26, 0xe3, 0x55,
			0xfa, 0xfc, 0x61, 0x98, 0xe6, 0xea, 0x2b, 0x46,
			0xd5, 0x84, 0x13, 0x67, 0x3b, 0x99, 0xb0, 0x29,
			0xd6, 0x65, 0xc3, 0x57, 0x60, 0x1f, 0xb4, 0x26,
			0xa0, 0xb2, 0xf4, 0xbb, 0xa2, 0x00, 0xee, 0x9f,
			0x0a, 0x43, 0xd1, 0x9b, 0x57, 0x1a, 0x9c, 0x71,
			0xef, 0x11, 0x42, 0xe6, 0x5d, 0x5a, 0x26, 0x6f,
			0xdd, 0xca, 0x83, 0x2c, 0xe5, 0x9f, 0xaa, 0x7c,
			0xac, 0x0b, 0x9c, 0xf1, 0xbe, 0x2b, 0xff, 0xca,
			0x30, 0x0d, 0x01, 0xee, 0x38, 0x76, 0x19, 0xc4,
			0xae, 0x12, 0xfd, 0x44, 0x38, 0xf2, 0x03, 0xa0,
			0xe4, 0xe1, 0xc4, 0x7e, 0xc3, 0x14, 0x86, 0x1f,
			0x4e, 0x90, 0x87, 0xcb, 0x33, 0x39, 0x6a, 0x68,
			0x73, 0xe8, 0xf9, 0xd2, 0x53, 0x9a, 0x4b, 0x8e
		};

		for (int ii = 0; ii < 128; ii++) {
			input[ii] = feedOblivChar(input_raw[ii], 1);
		}

		oscrypt_smix(input, 1, 16);

		bool success = true;
		for (int ii = 0; ii < 128; ii++) {
			uint8_t temp;
			revealOblivChar(&temp, input[ii], 0);
			success &= (temp == expected_output[ii]);
		}

		fprintf(stderr, "Test Item: %-70s %s\n", "oscrypt_smix", (success)?STATUS_SUCCESS:STATUS_FAILURE);
		if (!success) {
			fprintf(stderr, "\tExpected Output:\t");
			for (int ii = 0; ii < 128; ii++) {
				fprintf(stderr, "%02hhX", expected_output[ii]);
			}
			fprintf(stderr, "\n\tActual Output: \t\t");
			for (int ii = 0; ii < 128; ii++) {
				uint8_t temp;
				revealOblivChar(&temp, input[ii], 0);
				fprintf(stderr, "%02hhX", temp);
			}
			fprintf(stderr, "\n");
		}
	}


	{
		char passwd_raw[0] = "";
		obliv uint8_t passwd[0];
		int passwd_len = 0;
		char salt_raw[0] = "";
		obliv uint8_t salt[0];
		int salt_len = 0;
		int N = 16;
		int r = 1;
		int p = 1;
		obliv uint8_t result[64];
		uint8_t expected_result[64] = {
			0x77, 0xd6, 0x57, 0x62, 0x38, 0x65, 0x7b, 0x20,
			0x3b, 0x19, 0xca, 0x42, 0xc1, 0x8a, 0x04, 0x97,
   			0xf1, 0x6b, 0x48, 0x44, 0xe3, 0x07, 0x4a, 0xe8,
   			0xdf, 0xdf, 0xfa, 0x3f, 0xed, 0xe2, 0x14, 0x42,
   			0xfc, 0xd0, 0x06, 0x9d, 0xed, 0x09, 0x48, 0xf8,
   			0x32, 0x6a, 0x75, 0x3a, 0x0f, 0xc8, 0x1f, 0x17,
   			0xe8, 0xd3, 0xe0, 0xfb, 0x2e, 0x0d, 0x36, 0x28,
   			0xcf, 0x35, 0xe2, 0x0c, 0x38, 0xd1, 0x89, 0x06
		};

		for (int ii = 0; ii < passwd_len; ii++) {
			passwd[ii] = feedOblivChar(passwd_raw[ii],1);
		}

		for (int ii = 0; ii < salt_len; ii++) {
			salt[ii] = feedOblivChar(salt_raw[ii], 2);
		}

		oscrypt(passwd, passwd_len, salt, salt_len, N, r, p, result, 64);

		bool success = true;

		for (int ii = 0; ii < 64; ii ++) {
			uint8_t temp;
			revealOblivChar(&temp, result[ii], 0);
			success &= temp == expected_result[ii];
		}

		fprintf(stderr, "Test Item: %-70s %s\n", "oscrypt - Test Case 1", (success)?STATUS_SUCCESS:STATUS_FAILURE);
		if (!success) {
			fprintf(stderr, "\tExpected Output:\t");
			for (int ii = 0; ii < 64; ii++) {
				fprintf(stderr, "%02hhX", expected_result[ii]);
			}
			fprintf(stderr, "\n\tActual Output: \t\t");
			for (int ii = 0; ii < 64; ii++) {
				uint8_t temp;
				revealOblivChar(&temp, result[ii], 0);
				fprintf(stderr, "%02hhX", temp);
			}
			fprintf(stderr, "\n");
		}

	}

	{
		char passwd_raw[13] = "pleaseletmein";
		obliv uint8_t passwd[13];
		int passwd_len = 13;
		char salt_raw[14] = "SodiumChloride";
		obliv uint8_t salt[14];
		int salt_len = 14;
		int N = 16;
		int r = 8;
		int p = 1;
		obliv uint8_t result[64];
		uint8_t expected_result[64] = {
			0x25, 0xa9, 0xfa, 0x20, 0x7f, 0x87, 0xca, 0x09,
			0xa4, 0xef, 0x8b, 0x9f, 0x77, 0x7a, 0xca, 0x16,
			0xbe, 0xb7, 0x84, 0xae, 0x18, 0x30, 0xbf, 0xbf,
			0xd3, 0x83, 0x25, 0xaa, 0xbb, 0x93, 0x77, 0xdf,
			0x1b, 0xa7, 0x84, 0xd7, 0x46, 0xea, 0x27, 0x3b,
			0xf5, 0x16, 0xa4, 0x6f, 0xbf, 0xac, 0xf5, 0x11,
			0xc5, 0xbe, 0xba, 0x4c, 0x4a, 0xb3, 0xac, 0xc7,
			0xfa, 0x6f, 0x46, 0x0b, 0x6c, 0x0f, 0x47, 0x7b,
		};

		for (int ii = 0; ii < passwd_len; ii++) {
			passwd[ii] = feedOblivChar(passwd_raw[ii],1);
		}

		for (int ii = 0; ii < salt_len; ii++) {
			salt[ii] = feedOblivChar(salt_raw[ii], 2);
		}

		oscrypt(passwd, passwd_len, salt, salt_len, N, r, p, result, 64);

		bool success = true;

		for (int ii = 0; ii < 64; ii ++) {
			uint8_t temp;
			revealOblivChar(&temp, result[ii], 0);
			success &= temp == expected_result[ii];
		}

		fprintf(stderr, "Test Item: %-70s %s\n", "oscrypt - Test Case 2", (success)?STATUS_SUCCESS:STATUS_FAILURE);
		if (!success) {
			fprintf(stderr, "\tExpected Output:\t");
			for (int ii = 0; ii < 64; ii++) {
				fprintf(stderr, "%02hhX", expected_result[ii]);
			}
			fprintf(stderr, "\n\tActual Output: \t\t");
			for (int ii = 0; ii < 64; ii++) {
				uint8_t temp;
				revealOblivChar(&temp, result[ii], 0);
				fprintf(stderr, "%02hhX", temp);
			}
			fprintf(stderr, "\n");
		}

	}

	// this test is incredible slow
	/*{
		char passwd_raw[8] = "password";
		obliv uint8_t passwd[8];
		int passwd_len = 8;
		char salt_raw[4] = "NaCl";
		obliv uint8_t salt[4];
		int salt_len = 4;
		int N = 8;
		int r = 1024;
		int p = 16;
		obliv uint8_t result[64];
		uint8_t expected_result[64] = {
			0xfd, 0xba, 0xbe, 0x1c, 0x9d, 0x34, 0x72, 0x00,
			0x78, 0x56, 0xe7, 0x19, 0x0d, 0x01, 0xe9, 0xfe,
			0x7c, 0x6a, 0xd7, 0xcb, 0xc8, 0x23, 0x78, 0x30,
			0xe7, 0x73, 0x76, 0x63, 0x4b, 0x37, 0x31, 0x62,
			0x2e, 0xaf, 0x30, 0xd9, 0x2e, 0x22, 0xa3, 0x88,
			0x6f, 0xf1, 0x09, 0x27, 0x9d, 0x98, 0x30, 0xda,
			0xc7, 0x27, 0xaf, 0xb9, 0x4a, 0x83, 0xee, 0x6d,
			0x83, 0x60, 0xcb, 0xdf, 0xa2, 0xcc, 0x06, 0x40
		};

		for (int ii = 0; ii < passwd_len; ii++) {
			passwd[ii] = feedOblivChar(passwd_raw[ii],1);
		}

		for (int ii = 0; ii < salt_len; ii++) {
			salt[ii] = feedOblivChar(salt_raw[ii], 2);
		}

		oscrypt(passwd, passwd_len, salt, salt_len, N, r, p, result, 64);

		bool success = true;

		for (int ii = 0; ii < 64; ii ++) {
			uint8_t temp;
			revealOblivChar(&temp, result[ii], 0);
			success &= temp == expected_result[ii];
		}

		fprintf(stderr, "Test Item: %-70s %s\n", "oscrypt - Test Case 3", (success)?STATUS_SUCCESS:STATUS_FAILURE);
		if (!success) {
			fprintf(stderr, "\tExpected Output:\t");
			for (int ii = 0; ii < 64; ii++) {
				fprintf(stderr, "%02hhX", expected_result[ii]);
			}
			fprintf(stderr, "\n\tActual Output: \t\t");
			for (int ii = 0; ii < 64; ii++) {
				uint8_t temp;
				revealOblivChar(&temp, result[ii], 0);
				fprintf(stderr, "%02hhX", temp);
			}
			fprintf(stderr, "\n");
		}

	}*/

	fprintf(stderr, "\n");

}