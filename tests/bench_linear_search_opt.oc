#include <obliv.oh>

#include "stdlib.h"
#include "math.h"
#include <time.h>
#include "float.h"

#include "oram.oh"

#include "test_generic.h"
#include "linear_search.oh"

static const char TESTNAME[] = "linear_search_opt_benchmark";

#define TEXT_HELP_SUPPLEMENTARY "\
  -e \x1b[4mNUMBER\x1b[0m, --elements=\x1b[4mNUMBER\x1b[0m \n\t\tsearch through \x1b[4mNUMBER\x1b[0m elements\n\n\
  -s \x1b[4mNUMBER\x1b[0m, --searches=\x1b[4mNUMBER\x1b[0m \n\t\tperform \x1b[4mNUMBER\x1b[0m searches on the same data\n\n\
  -o \x1b[4mTYPE\x1b[0m, --oram-type=\x1b[4mTYPE\x1b[0m \n\t\tforce all ORAMs to be \x1b[4mTYPE\x1b[0m ORAMs. Valid types are \033[1msqrt\033[0m, \033[1mcircuit\033[0m, and \033[1mlinear\033[0m.\n\n\
  -i \x1b[4mNUMBER\x1b[0m, --samples=\x1b[4mNUMBER\x1b[0m \n\t\trun \x1b[4mNUMBER\x1b[0m iterations of the benchmark\n\n"

static const char options_string[] = "e:s:o:i:";
static struct option long_options[] = {
	{"elements", required_argument, NULL, 'e'},
	{"searches", required_argument, NULL, 's'},
	{"oram-type", required_argument, NULL, 'o'},
	{"samples", required_argument, NULL, 'i'},
	{0, 0, 0, 0}
};

char* get_test_name() {
	return TESTNAME;
}

char* get_supplementary_options_string() {
	return options_string;
}

struct option* get_long_options() {
	return long_options;
}

void print_supplementary_help() {
	fprintf(stderr, TEXT_HELP_SUPPLEMENTARY);
}

void rand_array(int *array, size_t n) {
	size_t i;
    
	for (i = 0; i < n ; i++) 
	{
		size_t j = rand() % (2*n);
		array[i] = j;
	}
}

int rand_int(size_t range) {
    return rand() % (range);
}
void shuffle(uint32_t *array, size_t n) {
	if (n > 1) {
		size_t i;
		for (i = 0; i < n - 1; i++) 
		{
		  size_t j = i + rand() / (RAND_MAX / (n - i) + 1);
		  int t = array[j];
		  array[j] = array[i];
		  array[i] = t;
		}
	}
}

void test_main(void*varg) {

	#ifdef ORAM_OVERRIDE
	oram_set_default_type(ORAM_OVERRIDE);
	#endif

	int n = 1;
	int samples = 1;
	int searchct = 1;

	args_t * args_pass = varg;
	int arg;
	optind = 0; // this allows us to getopt a second time
	while ((arg = getopt_long(args_pass->argc, args_pass->argv, options_string, long_options, NULL)) != -1) {
		if (arg == 'e') {
			n = atoi(optarg);
			if (n <= 0) {
				fprintf (stderr, "Argument for -%c must be positive.\n", arg);
				return;
			}
		} else if (arg == 's') {
			searchct = atoi(optarg);
			if (searchct <= 0) {
				fprintf (stderr, "Argument for -%c must be positive.\n", arg);
				return;
			}
		}else if (arg == 'o') {
			if (strcmp(optarg,"sqrt") == 0) {
				oram_set_default_type(ORAM_TYPE_SQRT);
			} else if (strcmp(optarg,"circuit") == 0) {
				oram_set_default_type(ORAM_TYPE_CIRCUIT);
			} else if (strcmp(optarg,"linear") == 0) {
				oram_set_default_type(ORAM_TYPE_LINEAR);
			} else {
				fprintf (stderr, "Invalid argument for -%c.\n", arg);
				return;
			}
		} else if (arg == 'i') {
			samples = atoi(optarg);
			if (samples <= 0) {
				fprintf (stderr, "Argument for -%c must be positive.\n", arg);
				return;
			}
		} else if (arg == '?' || arg == ':') {
			if (optopt == 'n' || optopt == 'o' || optopt == 'i') {
				fprintf (stderr, "Option -%c requires an argument.\n", optopt);
				return;
			} else {
				fprintf (stderr, "Option -%c not recognized.\n", optopt);
				return;
			}
		} else {
			abort();
		}
	}

	fprintf(stdout, "# Linear Search Opt(sample 1, sample 2, ... sample n)\n");
	fflush(stdout);

	{
		uint64_t tally = 0;
		uint64_t tallygates = 0;
		uint64_t tallybytes = 0;

		int64_t runbytes = 0;
		int64_t rungates = 0;
		int64_t runtime = 0;
		fflush(stdout);
        int *array = (int*)malloc(n*sizeof(int));
        obliv int *oarr = (obliv int*)malloc(n*sizeof(obliv int));
		obliv int *needles = (obliv int*)malloc(searchct*sizeof(obliv int));
		for (int kk = 0; kk < samples; kk++) {
			rand_array(array, n);
            for(int i = 0; i < n; i++){
                oarr[i] = feedOblivInt(array[i], 1);
            }
			for(int i = 0; i < searchct;i++){
				needles[i] = feedOblivInt(array[rand()%n],2);
			}
            obliv int idx;
			runbytes = tcp2PBytesSent(ocCurrentProto());
			rungates = yaoGateCount();
			runtime = current_timestamp();
			for (int i = 0; i < searchct; i++) {
            	linear_search_opt(&idx, &needles[i], oarr, n);
			}
			runtime = current_timestamp() - runtime;
			rungates = yaoGateCount() - rungates;
			runbytes = tcp2PBytesSent(ocCurrentProto()) - runbytes;
			fprintf(stdout, ",(%llu,%llu,%llu)", runtime, rungates, runbytes);
			tally += runtime;
			tallygates += rungates;
			tallybytes += runbytes;
			fflush(stdout);
			
		}
		static_write_simple(ocCurrentParty(), "linear_search_opt", searchct, n, "Time/s", tally / samples/10e6, samples);
		static_write_simple(ocCurrentParty(), "linear_search_opt", searchct, n, "Gates/10e6", tallygates / samples/10e6, samples);
		static_write_simple(ocCurrentParty(), "linear_search_opt", searchct, n, "Bytes/MB", tallybytes / samples/10e6, samples);
	
		fprintf(stdout, "\n");
		fprintf(stderr, "Linear Search Opt: %llu microseconds avg, %llu gates avg, %llu bytes avg\n", tally/samples, tallygates/samples, tallybytes/samples);
	}

}
