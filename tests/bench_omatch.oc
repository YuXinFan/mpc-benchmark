#include <time.h>
#include <stdio.h>
#include <obliv.oh>
#include <stdbool.h>
#include <stdlib.h>
#include <time.h>

#include "util.h"
#include "omatch.oh"
#include "test_generic.h"

#define SAMPLES 30

static const char TESTNAME[] = "omatch_benchmark";

char* testName() {
	return TESTNAME;
}

void shuffle(uint32_t *array, size_t n) {
    if (n > 1) {
        size_t i;
        for (i = 0; i < n - 1; i++) 
        {
          size_t j = i + rand() / (RAND_MAX / (n - i) + 1);
          int t = array[j];
          array[j] = array[i];
          array[i] = t;
        }
    }
}

int pcts[9] = {4,8,16,32,64,128,256,512,1024};

void testMain(void*varg) {

	fprintf(stdout, "==========\nGALE SHAPLEY (pair count, sample 1, sample 2, ... sample n)\n----------\n");
	fflush(stdout);

	{

		for (int ii = 0; ii < 9; ii++) {
			int pairs = pcts[ii];
			uint64_t tally = 0;

			fprintf(stdout, "%d", pairs);

			uint32_t * perm = malloc(pairs * sizeof(uint32_t));
			for (int kk = 0; kk < pairs; kk++) {
				perm[kk] = kk;
			}

			obliv uint32_t * mPrefs = calloc(pairs * pairs, sizeof(obliv uint32_t));
			obliv uint32_t * wPrefs = calloc(pairs * pairs, sizeof(obliv uint32_t));
			obliv uint32_t * output = calloc(pairs, sizeof(obliv uint32_t));

			int samples = pairs < 128 ? SAMPLES : (pairs < 1024 ? 3 : 1);

			for (int kk = 0; kk < samples; kk++) {
				for (int ll = 0; ll < pairs; ll++) {
					shuffle(perm, pairs);
					for (int jj = 0; jj < pairs; jj++) {
						mPrefs[ll * pairs + jj] = feedOblivInt(perm[jj], 0);
					}
					for (int jj = 0; jj < pairs; jj++) {
						wPrefs[ll * pairs + jj] = feedOblivInt(perm[jj], 1);
					}
				}

				uint64_t startTime = current_timestamp();
				ogale_shapley(output, mPrefs, wPrefs, pairs);
				uint64_t endTime = current_timestamp();


				fprintf(stdout, ",%d", endTime - startTime);
				fflush(stdout);
				tally += endTime - startTime;

				
			}

			free(perm);
			free(mPrefs);
			free(wPrefs);
			free(output);
			fprintf(stdout, "\n");
			fflush(stdout);
			fprintf(stderr, "GALE SHAPLEY (pairs:%d): %d microseconds avg\n", pairs, tally / (SAMPLES));
		}

	}

}
