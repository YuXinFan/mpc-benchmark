#include <time.h>
#include <stdio.h>
#include <obliv.oh>
#include <stdbool.h>
#include <stdlib.h>

#include "oscrypt.oh"
#include "uint128.h"
#include "test_generic.h"

#define SAMPLES 30

static const char TESTNAME[] = "oscrypt_benchmark";

char* testName() {
	return TESTNAME;
}

uint64_t GetTimeStamp() {
    struct timeval tv;
    gettimeofday(&tv,NULL);
    return tv.tv_sec*(uint64_t)1000000+tv.tv_usec;
}

void testMain(void*varg) {

	{
		fprintf(stdout, "==========\nN=4\n----------\n");

		uint64_t tally = 0;

		for (int ii = 0; ii < SAMPLES; ii++) {
			char passwd_raw[13] = "pleaseletmein";
			obliv uint8_t passwd[13];
			int passwd_len = 13;
			char salt_raw[14] = "SodiumChloride";
			obliv uint8_t salt[14];
			int salt_len = 14;
			obliv uint8_t result[64];
			int N = 4;
			int r = 8;
			int p = 1;

			for (int ii = 0; ii < passwd_len; ii++) {
				passwd[ii] = feedOblivChar(passwd_raw[ii],1);
			}

			for (int ii = 0; ii < salt_len; ii++) {
				salt[ii] = feedOblivChar(salt_raw[ii], 2);
			}

			uint64_t startTime = GetTimeStamp();

			oscrypt(passwd, passwd_len, salt, salt_len, N, r, p, result, 64);

			uint64_t endTime = GetTimeStamp();

			fprintf(stdout, "%d\n", endTime - startTime);
			tally += endTime - startTime;

		}

		fprintf(stderr, "N=4: %d microseconds avg\n", tally / SAMPLES);
	}

	{
		fprintf(stdout, "==========\nN=8\n----------\n");

		uint64_t tally = 0;

		for (int ii = 0; ii < SAMPLES; ii++) {
			char passwd_raw[13] = "pleaseletmein";
			obliv uint8_t passwd[13];
			int passwd_len = 13;
			char salt_raw[14] = "SodiumChloride";
			obliv uint8_t salt[14];
			int salt_len = 14;
			obliv uint8_t result[64];
			int N = 8;
			int r = 8;
			int p = 1;

			for (int ii = 0; ii < passwd_len; ii++) {
				passwd[ii] = feedOblivChar(passwd_raw[ii],1);
			}

			for (int ii = 0; ii < salt_len; ii++) {
				salt[ii] = feedOblivChar(salt_raw[ii], 2);
			}

			uint64_t startTime = GetTimeStamp();

			oscrypt(passwd, passwd_len, salt, salt_len, N, r, p, result, 64);

			uint64_t endTime = GetTimeStamp();

			fprintf(stdout, "%d\n", endTime - startTime);
			tally += endTime - startTime;

		}

		fprintf(stderr, "N=8: %d microseconds avg\n", tally / SAMPLES);
	}

	{
		fprintf(stdout, "==========\nN=16\n----------\n");

		uint64_t tally = 0;

		for (int ii = 0; ii < SAMPLES; ii++) {
			char passwd_raw[13] = "pleaseletmein";
			obliv uint8_t passwd[13];
			int passwd_len = 13;
			char salt_raw[14] = "SodiumChloride";
			obliv uint8_t salt[14];
			int salt_len = 14;
			obliv uint8_t result[64];
			int N = 16;
			int r = 8;
			int p = 1;

			for (int ii = 0; ii < passwd_len; ii++) {
				passwd[ii] = feedOblivChar(passwd_raw[ii],1);
			}

			for (int ii = 0; ii < salt_len; ii++) {
				salt[ii] = feedOblivChar(salt_raw[ii], 2);
			}

			uint64_t startTime = GetTimeStamp();

			oscrypt(passwd, passwd_len, salt, salt_len, N, r, p, result, 64);

			uint64_t endTime = GetTimeStamp();

			fprintf(stdout, "%d\n", endTime - startTime);
			tally += endTime - startTime;

		}

		fprintf(stderr, "N=16: %d microseconds avg\n", tally / SAMPLES);
	}

	{
		fprintf(stdout, "==========\nN=32\n----------\n");

		uint64_t tally = 0;

		for (int ii = 0; ii < SAMPLES; ii++) {
			char passwd_raw[13] = "pleaseletmein";
			obliv uint8_t passwd[13];
			int passwd_len = 13;
			char salt_raw[14] = "SodiumChloride";
			obliv uint8_t salt[14];
			int salt_len = 14;
			obliv uint8_t result[64];
			int N = 32;
			int r = 8;
			int p = 1;

			for (int ii = 0; ii < passwd_len; ii++) {
				passwd[ii] = feedOblivChar(passwd_raw[ii],1);
			}

			for (int ii = 0; ii < salt_len; ii++) {
				salt[ii] = feedOblivChar(salt_raw[ii], 2);
			}

			uint64_t startTime = GetTimeStamp();

			oscrypt(passwd, passwd_len, salt, salt_len, N, r, p, result, 64);

			uint64_t endTime = GetTimeStamp();

			fprintf(stdout, "%d\n", endTime - startTime);
			tally += endTime - startTime;

		}

		fprintf(stderr, "N=32: %d microseconds avg\n", tally / SAMPLES);
	}

	{
		fprintf(stdout, "==========\nN=64\n----------\n");

		uint64_t tally = 0;

		for (int ii = 0; ii < SAMPLES; ii++) {
			char passwd_raw[13] = "pleaseletmein";
			obliv uint8_t passwd[13];
			int passwd_len = 13;
			char salt_raw[14] = "SodiumChloride";
			obliv uint8_t salt[14];
			int salt_len = 14;
			obliv uint8_t result[64];
			int N = 64;
			int r = 8;
			int p = 1;

			for (int ii = 0; ii < passwd_len; ii++) {
				passwd[ii] = feedOblivChar(passwd_raw[ii],1);
			}

			for (int ii = 0; ii < salt_len; ii++) {
				salt[ii] = feedOblivChar(salt_raw[ii], 2);
			}

			uint64_t startTime = GetTimeStamp();

			oscrypt(passwd, passwd_len, salt, salt_len, N, r, p, result, 64);

			uint64_t endTime = GetTimeStamp();

			fprintf(stdout, "%d\n", endTime - startTime);
			tally += endTime - startTime;

		}

		fprintf(stderr, "N=64: %d microseconds avg\n", tally / SAMPLES);
	}

	{
		fprintf(stdout, "==========\nN=128\n----------\n");

		uint64_t tally = 0;

		for (int ii = 0; ii < SAMPLES; ii++) {
			char passwd_raw[13] = "pleaseletmein";
			obliv uint8_t passwd[13];
			int passwd_len = 13;
			char salt_raw[14] = "SodiumChloride";
			obliv uint8_t salt[14];
			int salt_len = 14;
			obliv uint8_t result[64];
			int N = 128;
			int r = 8;
			int p = 1;

			for (int ii = 0; ii < passwd_len; ii++) {
				passwd[ii] = feedOblivChar(passwd_raw[ii],1);
			}

			for (int ii = 0; ii < salt_len; ii++) {
				salt[ii] = feedOblivChar(salt_raw[ii], 2);
			}

			uint64_t startTime = GetTimeStamp();

			oscrypt(passwd, passwd_len, salt, salt_len, N, r, p, result, 64);

			uint64_t endTime = GetTimeStamp();

			fprintf(stdout, "%d\n", endTime - startTime);
			tally += endTime - startTime;

		}

		fprintf(stderr, "N=128: %d microseconds avg\n", tally / SAMPLES);
	}

	{
		fprintf(stdout, "==========\nN=256\n----------\n");

		uint64_t tally = 0;

		for (int ii = 0; ii < SAMPLES; ii++) {
			char passwd_raw[13] = "pleaseletmein";
			obliv uint8_t passwd[13];
			int passwd_len = 13;
			char salt_raw[14] = "SodiumChloride";
			obliv uint8_t salt[14];
			int salt_len = 14;
			obliv uint8_t result[64];
			int N = 256;
			int r = 8;
			int p = 1;

			for (int ii = 0; ii < passwd_len; ii++) {
				passwd[ii] = feedOblivChar(passwd_raw[ii],1);
			}

			for (int ii = 0; ii < salt_len; ii++) {
				salt[ii] = feedOblivChar(salt_raw[ii], 2);
			}

			uint64_t startTime = GetTimeStamp();

			oscrypt(passwd, passwd_len, salt, salt_len, N, r, p, result, 64);

			uint64_t endTime = GetTimeStamp();

			fprintf(stdout, "%d\n", endTime - startTime);
			tally += endTime - startTime;

		}

		fprintf(stderr, "N=256: %d microseconds avg\n", tally / SAMPLES);
	}

	{
		fprintf(stdout, "==========\nN=512\n----------\n");

		uint64_t tally = 0;

		for (int ii = 0; ii < SAMPLES; ii++) {
			char passwd_raw[13] = "pleaseletmein";
			obliv uint8_t passwd[13];
			int passwd_len = 13;
			char salt_raw[14] = "SodiumChloride";
			obliv uint8_t salt[14];
			int salt_len = 14;
			obliv uint8_t result[64];
			int N = 512;
			int r = 8;
			int p = 1;

			for (int ii = 0; ii < passwd_len; ii++) {
				passwd[ii] = feedOblivChar(passwd_raw[ii],1);
			}

			for (int ii = 0; ii < salt_len; ii++) {
				salt[ii] = feedOblivChar(salt_raw[ii], 2);
			}

			uint64_t startTime = GetTimeStamp();

			oscrypt(passwd, passwd_len, salt, salt_len, N, r, p, result, 64);

			uint64_t endTime = GetTimeStamp();

			fprintf(stdout, "%d\n", endTime - startTime);
			tally += endTime - startTime;

		}

		fprintf(stderr, "N=512: %d microseconds avg\n", tally / SAMPLES);
	}

	{
		fprintf(stdout, "==========\nN=1024\n----------\n");

		uint64_t tally = 0;

		for (int ii = 0; ii < SAMPLES; ii++) {
			char passwd_raw[13] = "pleaseletmein";
			obliv uint8_t passwd[13];
			int passwd_len = 13;
			char salt_raw[14] = "SodiumChloride";
			obliv uint8_t salt[14];
			int salt_len = 14;
			obliv uint8_t result[64];
			int N = 1024;
			int r = 8;
			int p = 1;

			for (int ii = 0; ii < passwd_len; ii++) {
				passwd[ii] = feedOblivChar(passwd_raw[ii],1);
			}

			for (int ii = 0; ii < salt_len; ii++) {
				salt[ii] = feedOblivChar(salt_raw[ii], 2);
			}

			uint64_t startTime = GetTimeStamp();

			oscrypt(passwd, passwd_len, salt, salt_len, N, r, p, result, 64);

			uint64_t endTime = GetTimeStamp();

			fprintf(stdout, "%d\n", endTime - startTime);
			tally += endTime - startTime;

		}

		fprintf(stderr, "N=1024: %d microseconds avg\n", tally / SAMPLES);
	}

	/*{
		fprintf(stdout, "==========\nN=16384\n----------\n");

		uint128_t * tally = uint128_new();

		for (int ii = 0; ii < SAMPLES; ii++) {
			char passwd_raw[13] = "pleaseletmein";
			obliv uint8_t passwd[13];
			int passwd_len = 13;
			char salt_raw[14] = "SodiumChloride";
			obliv uint8_t salt[14];
			int salt_len = 14;
			obliv uint8_t result[64];
			int N = 16384;
			int r = 8;
			int p = 1;

			for (int ii = 0; ii < passwd_len; ii++) {
				passwd[ii] = feedOblivChar(passwd_raw[ii],1);
			}

			for (int ii = 0; ii < salt_len; ii++) {
				salt[ii] = feedOblivChar(salt_raw[ii], 2);
			}

			uint128_t * startTime = uint128_current_timestamp();

			oscrypt(passwd, passwd_len, salt, salt_len, N, r, p, result, 64);

			uint128_t * endTime = uint128_current_timestamp();

			uint128_t * runtime = uint128_subtract(endTime, startTime);
			free(endTime); free(startTime);
			print_uint128(stdout, runtime);
			fprintf(stdout, "\n");
			uint128_t * newtally = uint128_add(tally, runtime);
			free(runtime);
			free(tally);
			tally = newtally;
		}

		fprintf(stderr, "N=16384\n");
	}*/

	{
		fprintf(stdout, "==========\nlitecoin\n----------\n");

		uint64_t tally = 0;

		for (int ii = 0; ii < SAMPLES; ii++) {
			char passwd_raw[13] = "pleaseletmein";
			obliv uint8_t passwd[13];
			int passwd_len = 13;
			char salt_raw[14] = "SodiumChloride";
			obliv uint8_t salt[14];
			int salt_len = 14;
			obliv uint8_t result[32];
			int N = 1024;
			int r = 1;
			int p = 1;

			for (int ii = 0; ii < passwd_len; ii++) {
				passwd[ii] = feedOblivChar(passwd_raw[ii],1);
			}

			for (int ii = 0; ii < salt_len; ii++) {
				salt[ii] = feedOblivChar(salt_raw[ii], 2);
			}

			uint64_t startTime = GetTimeStamp();

			oscrypt(passwd, passwd_len, salt, salt_len, N, r, p, result, 32);

			uint64_t endTime = GetTimeStamp();

			fprintf(stdout, "%d\n", endTime - startTime);
			tally += endTime - startTime;

		}

		fprintf(stderr, "litecoin: %d microseconds avg\n", tally / SAMPLES);
	}

}
