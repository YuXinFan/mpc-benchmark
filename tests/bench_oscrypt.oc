#include <time.h>
#include <stdio.h>
#include <obliv.oh>
#include <stdbool.h>
#include <stdlib.h>

#include "util.h"
#include "oscrypt.oh"
#include "uint128.h"
#include "test_generic.h"

#define SAMPLES 30

static const char TESTNAME[] = "oscrypt_benchmark";

char* testName() {
	return TESTNAME;
}

int nvals[9] = {4,8,16,32,64,128,256,512,1024};

void testMain(void*varg) {

	{

		fprintf(stdout, "==========\nSCRYPT (N, sample 1, sample 2, ... sample n)\n----------\n");
		fflush(stdout);

		char passwd_raw[13] = "pleaseletmein";
		obliv uint8_t passwd[13];
		int passwd_len = 13;
		char salt_raw[14] = "SodiumChloride";
		obliv uint8_t salt[14];
		int salt_len = 14;
		obliv uint8_t result[64];
		int r = 8;
		int p = 1;

		for (int ii = 0; ii < passwd_len; ii++) {
			passwd[ii] = feedOblivChar(passwd_raw[ii],1);
		}

		for (int ii = 0; ii < salt_len; ii++) {
			salt[ii] = feedOblivChar(salt_raw[ii], 2);
		}

		for (int ii = 0; ii < 9; ii++) {
			
			int N = nvals[ii];

			fprintf(stdout, "%d", N);
			fflush(stdout);

			uint64_t tally = 0;

			for (int ii = 0; ii < SAMPLES; ii++) {

				uint64_t startTime = current_timestamp();

				oscrypt(passwd, passwd_len, salt, salt_len, N, r, p, result, 64);

				uint64_t endTime = current_timestamp();

				fprintf(stdout, ",%d", endTime - startTime);
				fflush(stdout);
				tally += endTime - startTime;

			}

			fprintf(stdout, "\n");
			fflush(stdout);
			fprintf(stderr, "SCRYPT (N:%d): %d microseconds avg\n", N, tally / SAMPLES);
		}
	}

	{

		uint128_t * tally = uint128_new();

		char passwd_raw[13] = "pleaseletmein";
		obliv uint8_t passwd[13];
		int passwd_len = 13;
		char salt_raw[14] = "SodiumChloride";
		obliv uint8_t salt[14];
		int salt_len = 14;
		obliv uint8_t result[64];
		int N = 16384;
		int r = 8;
		int p = 1;

		fprintf(stdout, "16384");
		fflush(stdout);

		for (int ii = 0; ii < passwd_len; ii++) {
			passwd[ii] = feedOblivChar(passwd_raw[ii],1);
		}

		for (int ii = 0; ii < salt_len; ii++) {
			salt[ii] = feedOblivChar(salt_raw[ii], 2);
		}

		for (int ii = 0; ii < 3; ii++) {

			uint128_t * startTime = uint128_current_timestamp();

			oscrypt(passwd, passwd_len, salt, salt_len, N, r, p, result, 64);

			uint128_t * endTime = uint128_current_timestamp();

			uint128_t * runtime = uint128_subtract(endTime, startTime);
			free(endTime); free(startTime);
			fprintf(stdout, ",");
			print_uint128(stdout, runtime);
			fflush(stdout);
			uint128_t * newtally = uint128_add(tally, runtime);
			free(runtime);
			free(tally);
			tally = newtally;
		}
		fprintf(stdout, "\n");
		fflush(stdout);
		fprintf(stderr, "SCRYPT (N:16384): ");
		uint128_t * samples = uint128_from(SAMPLES);
		uint128_t * avgtime = uint128_divide(tally, samples);
		print_uint128(stderr, avgtime);
		free(avgtime);
		free(samples);
		free(tally);
		fprintf(stderr, " microseconds avg\n");
	}

	{

		uint64_t tally = 0;

		char passwd_raw[13] = "pleaseletmein";
		obliv uint8_t passwd[13];
		int passwd_len = 13;
		char salt_raw[14] = "SodiumChloride";
		obliv uint8_t salt[14];
		int salt_len = 14;
		obliv uint8_t result[32];
		int N = 1024;
		int r = 1;
		int p = 1;

		fprintf(stdout, "litecoin");
		fflush(stdout);

		for (int ii = 0; ii < passwd_len; ii++) {
			passwd[ii] = feedOblivChar(passwd_raw[ii],1);
		}

		for (int ii = 0; ii < salt_len; ii++) {
			salt[ii] = feedOblivChar(salt_raw[ii], 2);
		}

		for (int ii = 0; ii < SAMPLES; ii++) {
			

			uint64_t startTime = current_timestamp();

			oscrypt(passwd, passwd_len, salt, salt_len, N, r, p, result, 32);

			uint64_t endTime = current_timestamp();

			fprintf(stdout, ",%d", endTime - startTime);
			fflush(stdout);
			tally += endTime - startTime;

		}

		fprintf(stdout, "\n");
		fflush(stdout);
		fprintf(stderr, "SCRYPT (litecoin): %d microseconds avg\n", tally / SAMPLES);
	}

}
