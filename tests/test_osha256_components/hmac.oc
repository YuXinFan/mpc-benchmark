fprintf(stderr, "\n");

/* test vectors contained in this file are taken from http://tools.ietf.org/html/rfc4231 */

{	
	uint8_t data_raw[] = {
		0x48, 0x69, 0x20, 0x54, 0x68, 0x65, 0x72, 0x65
	};
	int datalen = 8;
	obliv uint8_t data[8];
	uint8_t key_raw[] = {
		0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
		0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b
	};
	int keylen = 20;
	obliv uint8_t key[20];
	uint8_t expected_output[] = {
		0xb0, 0x34, 0x4c, 0x61, 0xd8, 0xdb, 0x38, 0x53, 0x5c, 0xa8, 0xaf, 0xce, 0xaf, 0x0b, 0xf1, 0x2b,
        0x88, 0x1d, 0xc2, 0x00, 0xc9, 0x83, 0x3d, 0xa7, 0x26, 0xe9, 0x37, 0x6c, 0x2e, 0x32, 0xcf, 0xf7
	};

	for (int ii = 0; ii < datalen; ii++) {
		data[ii] = feedOblivChar(data_raw[ii], 1);
	}

	for (int ii = 0; ii < keylen; ii++) {
		key[ii] = feedOblivChar(key_raw[ii], 2);
	}

	obliv uint8_t digest[OSHA256_DIGEST_LENGTH];

	oHMAC_SHA256_CTX ctx;
	oHMAC_SHA256_Init(&ctx, key, keylen);
	oHMAC_SHA256_Update(&ctx, data, datalen);
	oHMAC_SHA256_Final(digest, &ctx);

	bool success = true;
	for (int ii = 0; ii < OSHA256_DIGEST_LENGTH; ii++) {
		uint8_t temp;
		revealOblivChar(&temp, digest[ii], 0);
		success &= (temp == expected_output[ii]);
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "oHMAC_SHA256 - RFC4231 Test Case 1", (success)?STATUS_SUCCESS:STATUS_FAILURE);
	if (!success) {
		fprintf(stderr, "\tExpected Digest:\t");
		for (int ii = 0; ii < SHA256_DIGEST_LENGTH; ii++) {
			fprintf(stderr, "%02hhX", expected_output[ii]);
		}
		fprintf(stderr, "\n\tActual Digest: \t\t");
		for (int ii = 0; ii < OSHA256_DIGEST_LENGTH; ii++) {
			uint8_t temp;
			revealOblivChar(&temp, digest[ii], 0);
			fprintf(stderr, "%02hhX", temp);
		}
		fprintf(stderr, "\n");
	}
}

{		
	uint8_t data_raw[] = {
		0x77, 0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x20, 0x79, 0x61, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x20,
		0x66, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x3f
	};
	int datalen = 28;
	obliv uint8_t data[28];
	uint8_t key_raw[] = {
		0x4a, 0x65, 0x66, 0x65
	};
	int keylen = 4;
	obliv uint8_t key[4];
	uint8_t expected_output[] = {
		0x5b, 0xdc, 0xc1, 0x46, 0xbf, 0x60, 0x75, 0x4e, 0x6a, 0x04, 0x24, 0x26, 0x08, 0x95, 0x75, 0xc7,
        0x5a, 0x00, 0x3f, 0x08, 0x9d, 0x27, 0x39, 0x83, 0x9d, 0xec, 0x58, 0xb9, 0x64, 0xec, 0x38, 0x43
	};
	
	for (int ii = 0; ii < datalen; ii++) {
		data[ii] = feedOblivChar(data_raw[ii], 1);
	}

	for (int ii = 0; ii < keylen; ii++) {
		key[ii] = feedOblivChar(key_raw[ii], 2);
	}

	obliv uint8_t digest[OSHA256_DIGEST_LENGTH];

	oHMAC_SHA256_CTX ctx;
	oHMAC_SHA256_Init(&ctx, key, keylen);
	oHMAC_SHA256_Update(&ctx, data, datalen);
	oHMAC_SHA256_Final(digest, &ctx);

	bool success = true;
	for (int ii = 0; ii < OSHA256_DIGEST_LENGTH; ii++) {
		uint8_t temp;
		revealOblivChar(&temp, digest[ii], 0);
		success &= (temp == expected_output[ii]);
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "oHMAC_SHA256 - RFC4231 Test Case 2", (success)?STATUS_SUCCESS:STATUS_FAILURE);
	if (!success) {
		fprintf(stderr, "\tExpected Digest:\t");
		for (int ii = 0; ii < SHA256_DIGEST_LENGTH; ii++) {
			fprintf(stderr, "%02hhX", expected_output[ii]);
		}
		fprintf(stderr, "\n\tActual Digest: \t\t");
		for (int ii = 0; ii < OSHA256_DIGEST_LENGTH; ii++) {
			uint8_t temp;
			revealOblivChar(&temp, digest[ii], 0);
			fprintf(stderr, "%02hhX", temp);
		}
		fprintf(stderr, "\n");
	}
}

{		
	uint8_t data_raw[] = {
		0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 
		0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 
		0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 
		0xdd, 0xdd
	};
	int datalen = 50;
	obliv uint8_t data[50];
	uint8_t key_raw[] = {
		0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
		0xaa, 0xaa, 0xaa, 0xaa
	};
	int keylen = 20;
	obliv uint8_t key[20];
	uint8_t expected_output[] = {
		0x77, 0x3e, 0xa9, 0x1e, 0x36, 0x80, 0x0e, 0x46, 0x85, 0x4d, 0xb8, 0xeb, 0xd0, 0x91, 0x81, 0xa7,
        0x29, 0x59, 0x09, 0x8b, 0x3e, 0xf8, 0xc1, 0x22, 0xd9, 0x63, 0x55, 0x14, 0xce, 0xd5, 0x65, 0xfe
	};
	
	for (int ii = 0; ii < datalen; ii++) {
		data[ii] = feedOblivChar(data_raw[ii], 1);
	}

	for (int ii = 0; ii < keylen; ii++) {
		key[ii] = feedOblivChar(key_raw[ii], 2);
	}

	obliv uint8_t digest[OSHA256_DIGEST_LENGTH];

	oHMAC_SHA256_CTX ctx;
	oHMAC_SHA256_Init(&ctx, key, keylen);
	oHMAC_SHA256_Update(&ctx, data, datalen);
	oHMAC_SHA256_Final(digest, &ctx);

	bool success = true;
	for (int ii = 0; ii < OSHA256_DIGEST_LENGTH; ii++) {
		uint8_t temp;
		revealOblivChar(&temp, digest[ii], 0);
		success &= (temp == expected_output[ii]);
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "oHMAC_SHA256 - RFC4231 Test Case 3", (success)?STATUS_SUCCESS:STATUS_FAILURE);
	if (!success) {
		fprintf(stderr, "\tExpected Digest:\t");
		for (int ii = 0; ii < SHA256_DIGEST_LENGTH; ii++) {
			fprintf(stderr, "%02hhX", expected_output[ii]);
		}
		fprintf(stderr, "\n\tActual Digest: \t\t");
		for (int ii = 0; ii < OSHA256_DIGEST_LENGTH; ii++) {
			uint8_t temp;
			revealOblivChar(&temp, digest[ii], 0);
			fprintf(stderr, "%02hhX", temp);
		}
		fprintf(stderr, "\n");
	}
}

{		
	uint8_t data_raw[] = {
		0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 
		0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 
		0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 
		0xcd, 0xcd
	};
	int datalen = 50;
	obliv uint8_t data[50];
	uint8_t key_raw[] = {
		0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10,
		0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19
	};
	int keylen = 25;
	obliv uint8_t key[25];
	uint8_t expected_output[] = {
		0x82, 0x55, 0x8a, 0x38, 0x9a, 0x44, 0x3c, 0x0e, 0xa4, 0xcc, 0x81, 0x98, 0x99, 0xf2, 0x08, 0x3a,
        0x85, 0xf0, 0xfa, 0xa3, 0xe5, 0x78, 0xf8, 0x07, 0x7a, 0x2e, 0x3f, 0xf4, 0x67, 0x29, 0x66, 0x5b
	};
	
	for (int ii = 0; ii < datalen; ii++) {
		data[ii] = feedOblivChar(data_raw[ii], 1);
	}

	for (int ii = 0; ii < keylen; ii++) {
		key[ii] = feedOblivChar(key_raw[ii], 2);
	}

	obliv uint8_t digest[OSHA256_DIGEST_LENGTH];

	oHMAC_SHA256_CTX ctx;
	oHMAC_SHA256_Init(&ctx, key, keylen);
	oHMAC_SHA256_Update(&ctx, data, datalen);
	oHMAC_SHA256_Final(digest, &ctx);

	bool success = true;
	for (int ii = 0; ii < OSHA256_DIGEST_LENGTH; ii++) {
		uint8_t temp;
		revealOblivChar(&temp, digest[ii], 0);
		success &= (temp == expected_output[ii]);
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "oHMAC_SHA256 - RFC4231 Test Case 4", (success)?STATUS_SUCCESS:STATUS_FAILURE);
	if (!success) {
		fprintf(stderr, "\tExpected Digest:\t");
		for (int ii = 0; ii < SHA256_DIGEST_LENGTH; ii++) {
			fprintf(stderr, "%02hhX", expected_output[ii]);
		}
		fprintf(stderr, "\n\tActual Digest: \t\t");
		for (int ii = 0; ii < OSHA256_DIGEST_LENGTH; ii++) {
			uint8_t temp;
			revealOblivChar(&temp, digest[ii], 0);
			fprintf(stderr, "%02hhX", temp);
		}
		fprintf(stderr, "\n");
	}
}

{		
	uint8_t data_raw[] = {
		0x54, 0x65, 0x73, 0x74, 0x20, 0x57, 0x69, 0x74, 0x68, 0x20, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61,
		0x74, 0x69, 0x6f, 0x6e
	};
	int datalen = 20;
	obliv uint8_t data[20];
	uint8_t key_raw[] = {
		0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
		0x0c, 0x0c, 0x0c, 0x0c
	};
	int keylen = 20;
	obliv uint8_t key[20];
	uint8_t expected_output[] = {
		0xa3, 0xb6, 0x16, 0x74, 0x73, 0x10, 0x0e, 0xe0, 0x6e, 0x0c, 0x79, 0x6c, 0x29, 0x55, 0x55, 0x2b
	};
	
	for (int ii = 0; ii < datalen; ii++) {
		data[ii] = feedOblivChar(data_raw[ii], 1);
	}

	for (int ii = 0; ii < keylen; ii++) {
		key[ii] = feedOblivChar(key_raw[ii], 2);
	}

	obliv uint8_t digest[OSHA256_DIGEST_LENGTH];

	oHMAC_SHA256_CTX ctx;
	oHMAC_SHA256_Init(&ctx, key, keylen);
	oHMAC_SHA256_Update(&ctx, data, datalen);
	oHMAC_SHA256_Final(digest, &ctx);

	bool success = true;
	for (int ii = 0; ii < OSHA256_DIGEST_LENGTH/2; ii++) {
		uint8_t temp;
		revealOblivChar(&temp, digest[ii], 0);
		success &= (temp == expected_output[ii]);
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "oHMAC_SHA256 - RFC4231 Test Case 5", (success)?STATUS_SUCCESS:STATUS_FAILURE);
	if (!success) {
		fprintf(stderr, "\tExpected Digest:\t");
		for (int ii = 0; ii < SHA256_DIGEST_LENGTH/2; ii++) {
			fprintf(stderr, "%02hhX", expected_output[ii]);
		}
		fprintf(stderr, "\n\tActual Digest: \t\t");
		for (int ii = 0; ii < OSHA256_DIGEST_LENGTH/2; ii++) {
			uint8_t temp;
			revealOblivChar(&temp, digest[ii], 0);
			fprintf(stderr, "%02hhX", temp);
		}
		fprintf(stderr, "\n");
	}
}

{		
	uint8_t data_raw[] = {
		0x54, 0x65, 0x73, 0x74, 0x20, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x4c, 0x61, 0x72, 0x67, 0x65,
		0x72, 0x20, 0x54, 0x68, 0x61, 0x6e, 0x20, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2d, 0x53, 0x69, 0x7a,
		0x65, 0x20, 0x4b, 0x65, 0x79, 0x20, 0x2d, 0x20, 0x48, 0x61, 0x73, 0x68, 0x20, 0x4b, 0x65, 0x79,
		0x20, 0x46, 0x69, 0x72, 0x73, 0x74
	};
	int datalen = 54;
	obliv uint8_t data[54];
	uint8_t key_raw[] = {
		0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
		0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
		0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
		0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
		0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
		0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
		0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
		0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
		0xaa, 0xaa, 0xaa
	};
	int keylen = 131;
	obliv uint8_t key[131];
	uint8_t expected_output[] = {
		0x60, 0xe4, 0x31, 0x59, 0x1e, 0xe0, 0xb6, 0x7f, 0x0d, 0x8a, 0x26, 0xaa, 0xcb, 0xf5, 0xb7, 0x7f,
        0x8e, 0x0b, 0xc6, 0x21, 0x37, 0x28, 0xc5, 0x14, 0x05, 0x46, 0x04, 0x0f, 0x0e, 0xe3, 0x7f, 0x54,
	};
	
	for (int ii = 0; ii < datalen; ii++) {
		data[ii] = feedOblivChar(data_raw[ii], 1);
	}

	for (int ii = 0; ii < keylen; ii++) {
		key[ii] = feedOblivChar(key_raw[ii], 2);
	}

	obliv uint8_t digest[OSHA256_DIGEST_LENGTH];

	oHMAC_SHA256_CTX ctx;
	oHMAC_SHA256_Init(&ctx, key, keylen);
	oHMAC_SHA256_Update(&ctx, data, datalen);
	oHMAC_SHA256_Final(digest, &ctx);

	bool success = true;
	for (int ii = 0; ii < OSHA256_DIGEST_LENGTH; ii++) {
		uint8_t temp;
		revealOblivChar(&temp, digest[ii], 0);
		success &= (temp == expected_output[ii]);
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "oHMAC_SHA256 - RFC4231 Test Case 6", (success)?STATUS_SUCCESS:STATUS_FAILURE);
	if (!success) {
		fprintf(stderr, "\tExpected Digest:\t");
		for (int ii = 0; ii < SHA256_DIGEST_LENGTH; ii++) {
			fprintf(stderr, "%02hhX", expected_output[ii]);
		}
		fprintf(stderr, "\n\tActual Digest: \t\t");
		for (int ii = 0; ii < OSHA256_DIGEST_LENGTH; ii++) {
			uint8_t temp;
			revealOblivChar(&temp, digest[ii], 0);
			fprintf(stderr, "%02hhX", temp);
		}
		fprintf(stderr, "\n");
	}
}

{		
	uint8_t data_raw[] = {
		0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x74, 0x65, 0x73, 0x74, 0x20, 0x75,
		0x73, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x72, 0x20, 0x74, 0x68,
		0x61, 0x6e, 0x20, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2d, 0x73, 0x69, 0x7a, 0x65, 0x20, 0x6b, 0x65,
		0x79, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x20, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x72, 0x20, 0x74,
		0x68, 0x61, 0x6e, 0x20, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2d, 0x73, 0x69, 0x7a, 0x65, 0x20, 0x64,
		0x61, 0x74, 0x61, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x6e, 0x65, 0x65,
		0x64, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x20,
		0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x73, 0x65,
		0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x48, 0x4d, 0x41, 0x43, 0x20, 0x61, 0x6c,
		0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x2e
	};
	int datalen = 152;
	obliv uint8_t data[152];
	uint8_t key_raw[] = {
		0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
		0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
		0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
		0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
		0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
		0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
		0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
		0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
		0xaa, 0xaa, 0xaa
	};
	int keylen = 131;
	obliv uint8_t key[131];
	uint8_t expected_output[] = {
		0x9b, 0x09, 0xff, 0xa7, 0x1b, 0x94, 0x2f, 0xcb, 0x27, 0x63, 0x5f, 0xbc, 0xd5, 0xb0, 0xe9, 0x44,
        0xbf, 0xdc, 0x63, 0x64, 0x4f, 0x07, 0x13, 0x93, 0x8a, 0x7f, 0x51, 0x53, 0x5c, 0x3a, 0x35, 0xe2
	};
	
	for (int ii = 0; ii < datalen; ii++) {
		data[ii] = feedOblivChar(data_raw[ii], 1);
	}

	for (int ii = 0; ii < keylen; ii++) {
		key[ii] = feedOblivChar(key_raw[ii], 2);
	}

	obliv uint8_t digest[OSHA256_DIGEST_LENGTH];

	oHMAC_SHA256_CTX ctx;
	oHMAC_SHA256_Init(&ctx, key, keylen);
	oHMAC_SHA256_Update(&ctx, data, datalen);
	oHMAC_SHA256_Final(digest, &ctx);

	bool success = true;
	for (int ii = 0; ii < OSHA256_DIGEST_LENGTH; ii++) {
		uint8_t temp;
		revealOblivChar(&temp, digest[ii], 0);
		success &= (temp == expected_output[ii]);
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "oHMAC_SHA256 - RFC4231 Test Case 7", (success)?STATUS_SUCCESS:STATUS_FAILURE);
	if (!success) {
		fprintf(stderr, "\tExpected Digest:\t");
		for (int ii = 0; ii < SHA256_DIGEST_LENGTH; ii++) {
			fprintf(stderr, "%02hhX", expected_output[ii]);
		}
		fprintf(stderr, "\n\tActual Digest: \t\t");
		for (int ii = 0; ii < OSHA256_DIGEST_LENGTH; ii++) {
			uint8_t temp;
			revealOblivChar(&temp, digest[ii], 0);
			fprintf(stderr, "%02hhX", temp);
		}
		fprintf(stderr, "\n");
	}
}