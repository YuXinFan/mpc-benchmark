fprintf(stderr, "\n");

/* test vectors contained in this file are taken from http://stackoverflow.com/questions/5130513/pbkdf2-hmac-sha2-test-vectors */

{	
	uint8_t password_raw[] = {
		'p', 'a', 's', 's', 'w', 'o', 'r', 'd'
	};
	int passwordlen = 8;
	obliv uint8_t password[8];
	uint8_t salt_raw[] = {
		's', 'a', 'l', 't'
	};
	int saltlen = 4;
	obliv uint8_t salt[4];

	int c = 1;

	uint8_t expected_output[] = {
		0x12, 0x0f, 0xb6, 0xcf, 0xfc, 0xf8, 0xb3, 0x2c, 0x43, 0xe7, 0x22, 0x52, 0x56, 0xc4, 0xf8, 0x37,
        0xa8, 0x65, 0x48, 0xc9, 0x2c, 0xcc, 0x35, 0x48, 0x08, 0x05, 0x98, 0x7c, 0xb7, 0x0b, 0xe1, 0x7b
	};
	int dkLen = 32;
	obliv uint8_t output[32];

	for (int ii = 0; ii < passwordlen; ii++) {
		password[ii] = feedOblivChar(password_raw[ii], 1);
	}

	for (int ii = 0; ii < saltlen; ii++) {
		salt[ii] = feedOblivChar(salt_raw[ii], 2);
	}

	oPBKDF2_SHA256(password, passwordlen, salt, saltlen, c, output, dkLen);

	bool success = true;
	for (int ii = 0; ii < dkLen; ii++) {
		uint8_t temp;
		revealOblivChar(&temp, output[ii], 0);
		success &= (temp == expected_output[ii]);
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "oPBKDF2_SHA256 - one iteration, 32 byte output", (success)?STATUS_SUCCESS:STATUS_FAILURE);
	if (!success) {
		fprintf(stderr, "\tExpected Digest:\t");
		for (int ii = 0; ii < dkLen; ii++) {
			fprintf(stderr, "%02hhX", expected_output[ii]);
		}
		fprintf(stderr, "\n\tActual Digest: \t\t");
		for (int ii = 0; ii < dkLen; ii++) {
			uint8_t temp;
			revealOblivChar(&temp, output[ii], 0);
			fprintf(stderr, "%02hhX", temp);
		}
		fprintf(stderr, "\n");
	}
}

{	
	uint8_t password_raw[] = {
		'p', 'a', 's', 's', 'w', 'o', 'r', 'd'
	};
	int passwordlen = 8;
	obliv uint8_t password[8];
	uint8_t salt_raw[] = {
		's', 'a', 'l', 't'
	};
	int saltlen = 4;
	obliv uint8_t salt[4];

	int c = 2;

	uint8_t expected_output[] = {
		0xae, 0x4d, 0x0c, 0x95, 0xaf, 0x6b, 0x46, 0xd3, 0x2d, 0x0a, 0xdf, 0xf9, 0x28, 0xf0, 0x6d, 0xd0,
		0x2a, 0x30, 0x3f, 0x8e, 0xf3, 0xc2, 0x51, 0xdf, 0xd6, 0xe2, 0xd8, 0x5a, 0x95, 0x47, 0x4c, 0x43
	};
	int dkLen = 32;
	obliv uint8_t output[32];

	for (int ii = 0; ii < passwordlen; ii++) {
		password[ii] = feedOblivChar(password_raw[ii], 1);
	}

	for (int ii = 0; ii < saltlen; ii++) {
		salt[ii] = feedOblivChar(salt_raw[ii], 2);
	}

	oPBKDF2_SHA256(password, passwordlen, salt, saltlen, c, output, dkLen);

	bool success = true;
	for (int ii = 0; ii < dkLen; ii++) {
		uint8_t temp;
		revealOblivChar(&temp, output[ii], 0);
		success &= (temp == expected_output[ii]);
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "oPBKDF2_SHA256 - two iterations, 32 byte output", (success)?STATUS_SUCCESS:STATUS_FAILURE);
	if (!success) {
		fprintf(stderr, "\tExpected Digest:\t");
		for (int ii = 0; ii < dkLen; ii++) {
			fprintf(stderr, "%02hhX", expected_output[ii]);
		}
		fprintf(stderr, "\n\tActual Digest: \t\t");
		for (int ii = 0; ii < dkLen; ii++) {
			uint8_t temp;
			revealOblivChar(&temp, output[ii], 0);
			fprintf(stderr, "%02hhX", temp);
		}
		fprintf(stderr, "\n");
	}
}

{	
	uint8_t password_raw[] = {
		'p', 'a', 's', 's', 'w', 'o', 'r', 'd',
		'P', 'A', 'S', 'S', 'W', 'O', 'R', 'D',
		'p', 'a', 's', 's', 'w', 'o', 'r', 'd'
	};
	int passwordlen = 24;
	obliv uint8_t password[24];
	uint8_t salt_raw[] = {
		's', 'a', 'l', 't', 'S', 'A', 'L', 'T',
		's', 'a', 'l', 't', 'S', 'A', 'L', 'T',
		's', 'a', 'l', 't', 'S', 'A', 'L', 'T',
		's', 'a', 'l', 't', 'S', 'A', 'L', 'T',
		's', 'a', 'l', 't'
	};
	int saltlen = 36;
	obliv uint8_t salt[36];

	int c = 4096;
	
	uint8_t expected_output[] = {
		0x34, 0x8c, 0x89, 0xdb, 0xcb, 0xd3, 0x2b, 0x2f, 0x32, 0xd8, 0x14, 0xb8, 0x11, 0x6e, 0x84, 0xcf,
		0x2b, 0x17, 0x34, 0x7e, 0xbc, 0x18, 0x00, 0x18, 0x1c, 0x4e, 0x2a, 0x1f, 0xb8, 0xdd, 0x53, 0xe1,
		0xc6, 0x35, 0x51, 0x8c, 0x7d, 0xac, 0x47, 0xe9
	};
	int dkLen = 40;
	obliv uint8_t output[40];

	for (int ii = 0; ii < passwordlen; ii++) {
		password[ii] = feedOblivChar(password_raw[ii], 1);
	}

	for (int ii = 0; ii < saltlen; ii++) {
		salt[ii] = feedOblivChar(salt_raw[ii], 2);
	}

	oPBKDF2_SHA256(password, passwordlen, salt, saltlen, c, output, dkLen);

	bool success = true;
	for (int ii = 0; ii < dkLen; ii++) {
		uint8_t temp;
		revealOblivChar(&temp, output[ii], 0);
		success &= (temp == expected_output[ii]);
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "oPBKDF2_SHA256 - 4096 iterations, 40 byte output", (success)?STATUS_SUCCESS:STATUS_FAILURE);
	if (!success) {
		fprintf(stderr, "\tExpected Digest:\t");
		for (int ii = 0; ii < dkLen; ii++) {
			fprintf(stderr, "%02hhX", expected_output[ii]);
		}
		fprintf(stderr, "\n\tActual Digest: \t\t");
		for (int ii = 0; ii < dkLen; ii++) {
			uint8_t temp;
			revealOblivChar(&temp, output[ii], 0);
			fprintf(stderr, "%02hhX", temp);
		}
		fprintf(stderr, "\n");
	}
}

{	
	uint8_t password_raw[] = {
		'p', 'a', 's', 's', '\0', 'w', 'o', 'r', 'd',
	};
	int passwordlen = 9;
	obliv uint8_t password[9];
	uint8_t salt_raw[] = {
		's', 'a', '\0', 'l', 't'
	};
	int saltlen = 5;
	obliv uint8_t salt[5];

	int c = 4096;
	
	uint8_t expected_output[] = {
		0x89, 0xb6, 0x9d, 0x05, 0x16, 0xf8, 0x29, 0x89, 0x3c, 0x69, 0x62, 0x26, 0x65, 0x0a, 0x86, 0x87
	};
	int dkLen = 16;
	obliv uint8_t output[16];

	for (int ii = 0; ii < passwordlen; ii++) {
		password[ii] = feedOblivChar(password_raw[ii], 1);
	}

	for (int ii = 0; ii < saltlen; ii++) {
		salt[ii] = feedOblivChar(salt_raw[ii], 2);
	}

	oPBKDF2_SHA256(password, passwordlen, salt, saltlen, c, output, dkLen);

	bool success = true;
	for (int ii = 0; ii < dkLen; ii++) {
		uint8_t temp;
		revealOblivChar(&temp, output[ii], 0);
		success &= (temp == expected_output[ii]);
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "oPBKDF2_SHA256 - 4096 iterations, 16 byte output, with nulls", (success)?STATUS_SUCCESS:STATUS_FAILURE);
	if (!success) {
		fprintf(stderr, "\tExpected Digest:\t");
		for (int ii = 0; ii < dkLen; ii++) {
			fprintf(stderr, "%02hhX", expected_output[ii]);
		}
		fprintf(stderr, "\n\tActual Digest: \t\t");
		for (int ii = 0; ii < dkLen; ii++) {
			uint8_t temp;
			revealOblivChar(&temp, output[ii], 0);
			fprintf(stderr, "%02hhX", temp);
		}
		fprintf(stderr, "\n");
	}
}