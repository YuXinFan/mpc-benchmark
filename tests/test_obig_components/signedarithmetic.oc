/******************************************
 ******************************************
 *** obig_multiply_signed
 ******************************************
 ******************************************/

fprintf(stderr, "\n");

{	// obig_multiply_signed
	int x = 0x7E48A840;
	int y = 0xA7E0DD18;
	long long expected = (long long)x * (long long)y;

	obliv int xo;
	obliv int yo;
	xo = feedOblivInt(x, 1);
	yo = feedOblivInt(y, 2);

	obig x_test;
	obig y_test;
	obig result;

	obig_init(&x_test, sizeof(int));
	obig_init(&y_test, sizeof(int));
	obig_init(&result, sizeof(long long));

	obig_import_onative(&x_test, xo);
	obig_import_onative(&y_test, yo);
	unsigned char temp;
	unsigned long long output;

	obig_mul_signed(&result, x_test, y_test);

	for (int ii = result.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, result.data[ii], 0);
		output <<= 8;
		output += temp;
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_mul_signed", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != output) {
		fprintf(stderr, "\tExpected:\t%0llX\n\tActual: \t%0llX\n", expected, output);
	}

	obig_free(&x_test);
	obig_free(&y_test);
	obig_free(&result);
}

{	// obig_mul_signed - augmented assignment x
	int x = 0x7E48A840;
	int y = 0xA7E0DD18;
	int expected = x * y;

	obliv int xo;
	obliv int yo;
	xo = feedOblivInt(x, 1);
	yo = feedOblivInt(y, 2);

	obig x_test;
	obig y_test;
	obig result;

	obig_init(&x_test, sizeof(int));
	obig_init(&y_test, sizeof(int));

	obig_import_onative(&x_test, xo);
	obig_import_onative(&y_test, yo);
	unsigned char temp;
	unsigned int output;

	obig_mul_signed(&x_test, x_test, y_test);

	for (int ii = x_test.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, x_test.data[ii], 0);
		output <<= 8;
		output += temp;
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_mul_signed - augmented assignment x", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != output) {
		fprintf(stderr, "\tExpected:\t%0X\n\tActual: \t%0X\n", expected, output);
	}

	obig_free(&x_test);
	obig_free(&y_test);
	obig_free(&result);
}

{	// obig_mul_signed - augmented assignment y
	int x = 0x8E48A840;
	int y = 0xA7E0DD18;
	int expected = (long long)x * (long long)y;

	obliv int xo;
	obliv int yo;
	xo = feedOblivInt(x, 1);
	yo = feedOblivInt(y, 2);

	obig x_test;
	obig y_test;
	obig result;

	obig_init(&x_test, sizeof(int));
	obig_init(&y_test, sizeof(int));

	obig_import_onative(&x_test, xo);
	obig_import_onative(&y_test, yo);
	unsigned char temp;
	unsigned int output;

	obig_mul_signed(&y_test, x_test, y_test);

	for (int ii = y_test.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, y_test.data[ii], 0);
		output <<= 8;
		output += temp;
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_mul_signed - augmented assignment y", (expected == (int)output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != (int)output) {
		fprintf(stderr, "\tExpected:\t%08X\n\tActual: \t%08X\n", expected, output);
	}

	obig_free(&x_test);
	obig_free(&y_test);
	obig_free(&result);
}

{	// obig_mul_signed - odd sized inputs
	int x = 0x7E48A840;
	int y = 0xA7E0DD18;
	long long expected = (long long)x * (long long)y;

	obliv int xo;
	obliv int yo;
	xo = feedOblivInt(x, 1);
	yo = feedOblivInt(y, 2);

	obig x_test;
	obig y_test;
	obig result;

	obig_init(&x_test, sizeof(int) + 1);
	obig_init(&y_test, sizeof(int) + 1);
	obig_init(&result, sizeof(long long));

	obig_import_onative(&x_test, xo);
	obig_import_onative(&y_test, yo);
	unsigned char temp;
	unsigned long long output;

	obig_mul_signed(&result, x_test, y_test);

	for (int ii = result.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, result.data[ii], 0);
		output <<= 8;
		output += temp;
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_mul_signed - odd sized inputs", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != output) {
		fprintf(stderr, "\tExpected:\t%0llX\n\tActual: \t%0llX\n", expected, output);
	}

	obig_free(&x_test);
	obig_free(&y_test);
	obig_free(&result);
}

{	// obig_mul_signed - mismatched inputs x longer than y
	int x = 0x7E48A840;
	short y = 0xDD18;
	long long expected = (long long)x * (long long)y;

	obliv int xo;
	obliv short yo;
	xo = feedOblivInt(x, 1);
	yo = feedOblivShort(y, 2);

	obig x_test;
	obig y_test;
	obig result;

	obig_init(&x_test, sizeof(int));
	obig_init(&y_test, sizeof(short));
	obig_init(&result, sizeof(long long));

	obig_import_onative_signed(&x_test, xo);
	obig_import_onative_signed(&y_test, yo);
	unsigned char temp;
	unsigned long long output;

	obig_mul_signed(&result, x_test, y_test);

	for (int ii = result.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, result.data[ii], 0);
		output <<= 8;
		output += temp;
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_mul_signed - mismatched inputs (x longer than y)", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != output) {
		fprintf(stderr, "\tExpected:\t%0llX\n\tActual: \t%0llX\n", expected, output);
	}

	obig_free(&x_test);
	obig_free(&y_test);
	obig_free(&result);
}

{	// obig_mul_signed - mismatched inputs x shorter than y
	short x = 0xA840;
	int y = 0xA7E0DD18;
	long long expected = (long long)x * (long long)y;

	obliv short xo;
	obliv int yo;
	xo = feedOblivShort(x, 1);
	yo = feedOblivInt(y, 2);

	obig x_test;
	obig y_test;
	obig result;

	obig_init(&x_test, sizeof(short));
	obig_init(&y_test, sizeof(int));
	obig_init(&result, sizeof(long long));

	obig_import_onative_signed(&x_test, xo);
	obig_import_onative_signed(&y_test, yo);
	unsigned char temp;
	unsigned long long output;

	obig_mul_signed(&result, x_test, y_test);

	for (int ii = result.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, result.data[ii], 0);
		output <<= 8;
		output += temp;
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_mul_signed - mismatched inputs (x shorter than y)", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != output) {
		fprintf(stderr, "\tExpected:\t%0llX\n\tActual: \t%0llX\n", expected, output);
	}

	obig_free(&x_test);
	obig_free(&y_test);
	obig_free(&result);
}

{	// obig_mul_signed - extended output
	short x = 0x7E48;
	short y = 0xA7E0;
	long long expected = (long long)x * (long long)y;

	obliv short xo;
	obliv short yo;
	xo = feedOblivShort(x, 1);
	yo = feedOblivShort(y, 2);

	obig x_test;
	obig y_test;
	obig result;

	obig_init(&x_test, sizeof(short));
	obig_init(&y_test, sizeof(short));
	obig_init(&result, sizeof(long long));

	obig_import_onative(&x_test, xo);
	obig_import_onative(&y_test, yo);
	unsigned char temp;
	unsigned long long output;

	obig_mul_signed(&result, x_test, y_test);

	for (int ii = result.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, result.data[ii], 0);
		output <<= 8;
		output += temp;
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_mul_signed - extended output", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != output) {
		fprintf(stderr, "\tExpected:\t%0llX\n\tActual: \t%0llX\n", expected, output);
	}

	obig_free(&x_test);
	obig_free(&y_test);
	obig_free(&result);
}

{	// obig_mul_signed - truncated output
	int x = 0x7E48A840;
	int y = 0xA7E0DD18;
	int expected = (long long)x * (long long)y;

	obliv int xo;
	obliv int yo;
	xo = feedOblivInt(x, 1);
	yo = feedOblivInt(y, 2);

	obig x_test;
	obig y_test;
	obig result;

	obig_init(&x_test, sizeof(int));
	obig_init(&y_test, sizeof(int));
	obig_init(&result, sizeof(int));

	obig_import_onative(&x_test, xo);
	obig_import_onative(&y_test, yo);
	unsigned char temp;
	unsigned int output;

	obig_mul_signed(&result, x_test, y_test);

	for (int ii = result.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, result.data[ii], 0);
		output <<= 8;
		output += temp;
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_mul_signed - truncated output", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != output) {
		fprintf(stderr, "\tExpected:\t%0X\n\tActual: \t%0X\n", expected, output);
	}

	obig_free(&x_test);
	obig_free(&y_test);
	obig_free(&result);
}

{	// obig_mul_signed - 100 random inputs
	int x[100];
	int y[100];
	long long expected[100];
	unsigned long long output[100] = 0;

	obig x_test;
	obig y_test;
	obig result;
	obig_init(&x_test, sizeof(int));
	obig_init(&y_test, sizeof(int));
	obig_init(&result, sizeof(long long));

	bool success = true;

	for (int ii = 0; ii < 100; ii++) {
		x[ii] = ocBroadcastInt((rand()+rand()-RAND_MAX), 1);
		y[ii] = ocBroadcastInt((rand()+rand()-RAND_MAX), 1);
		expected[ii] = (long long) x[ii] * (long long) y[ii];

		obliv int xo;
		obliv int yo;
		xo = feedOblivInt(x[ii], 1);
		yo = feedOblivInt(y[ii], 1);

		obig_import_onative(&x_test, xo);
		obig_import_onative(&y_test, yo);
		unsigned char temp;

		obig_mul_signed(&result, x_test, y_test);

		for (int jj = result.digits -1; jj >= 0; jj--) {
			revealOblivChar(&temp, result.data[jj], 0);
			output[ii] <<= 8;
			output[ii] += temp;
		}

		success &= ((long long)output[ii] == expected[ii]);

	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_mul_signed - 100 random inputs", (success)?STATUS_SUCCESS:STATUS_FAILURE);
	for (int ii = 0; ii < 100; ii++) {
		if (expected[ii] != (long long)output[ii]) {
			fprintf(stderr, "\tExpected:\t%0llX\n\tActual: \t%0llX\n", expected[ii], (long long)output[ii]);
		}
	}

	obig_free(&x_test);
	obig_free(&y_test);
	obig_free(&result);
}








/******************************************
 ******************************************
 *** obig_div_mod_signed - one digit divisor
 ******************************************
 ******************************************/

{	// obig_div_mod_signed
	int x = 0x7E48A840;
	char y = 0x18;
	int expected_q = x / y;
	int expected_r = x % y;

	obliv int xo;
	obliv char yo;
	xo = feedOblivInt(x, 1);
	yo = feedOblivChar(y, 2);

	obig x_test;
	obig y_test;
	obig result_q;
	obig result_r;

	obig_init(&x_test, sizeof(int));
	obig_init(&y_test, sizeof(char));
	obig_init(&result_q, sizeof(int));
	obig_init(&result_r, sizeof(int));

	obig_import_onative(&x_test, xo);
	obig_import_onative(&y_test, yo);
	unsigned char temp;
	unsigned output_q;
	unsigned output_r;

	obliv bool success = obig_div_mod_signed(&result_q, &result_r, x_test, y_test);
	bool tempBool;
	revealOblivBool(&tempBool, success, 0);

	for (int ii = result_q.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, result_q.data[ii], 0);
		output_q <<= 8;
		output_q += temp;
	}

	for (int ii = result_r.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, result_r.data[ii], 0);
		output_r <<= 8;
		output_r += temp;
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_div_mod_signed - one digit divisor", (expected_q == (int)output_q && expected_r == (int)output_r && tempBool)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected_q != (int)output_q) {
		fprintf(stderr, "\tExpected quotient:\t%08X\n\tActual quotient: \t%08X\n", expected_q, (int)output_q);
	}
	if (expected_r != (int)output_r) {
		fprintf(stderr, "\tExpected remainder:\t%08X\n\tActual remainder: \t%08X\n", expected_r, (int)output_r);
	}

	obig_free(&x_test);
	obig_free(&y_test);
	obig_free(&result_q);
	obig_free(&result_r);
}

{	// obig_div_mod_signed - divisor larger than dividend
	char y = 0x40;
	int x = 0x00000028;
	int expected_q = x / y;
	int expected_r = x % y;

	obliv int xo;
	obliv char yo;
	xo = feedOblivInt(x, 1);
	yo = feedOblivChar(y, 2);

	obig x_test;
	obig y_test;
	obig result_q;
	obig result_r;

	obig_init(&x_test, sizeof(int));
	obig_init(&y_test, sizeof(char));
	obig_init(&result_q, sizeof(int));
	obig_init(&result_r, sizeof(int));

	obig_import_onative(&x_test, xo);
	obig_import_onative(&y_test, yo);
	unsigned char temp;
	unsigned output_q;
	unsigned output_r;

	obliv bool success = obig_div_mod_signed(&result_q, &result_r, x_test, y_test);
	bool tempBool;
	revealOblivBool(&tempBool, success, 0);

	for (int ii = result_q.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, result_q.data[ii], 0);
		output_q <<= 8;
		output_q += temp;
	}

	for (int ii = result_r.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, result_r.data[ii], 0);
		output_r <<= 8;
		output_r += temp;
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_div_mod_signed - one digit divisor - divisor larger than dividend", (expected_q == (int)output_q && expected_r == (int)output_r && tempBool)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected_q != (int)output_q) {
		fprintf(stderr, "\tExpected quotient:\t%08X\n\tActual quotient: \t%08X\n", expected_q, (int)output_q);
	}
	if (expected_r != (int)output_r) {
		fprintf(stderr, "\tExpected remainder:\t%08X\n\tActual remainder: \t%08X\n", expected_r, (int)output_r);
	}

	obig_free(&x_test);
	obig_free(&y_test);
	obig_free(&result_q);
	obig_free(&result_r);
}

{	// obig_div_mod_signed - division by 0
	int x = 0x7E48A840;
	char y = 0x0;

	obliv int xo;
	obliv char yo;
	xo = feedOblivInt(x, 1);
	yo = feedOblivChar(y, 2);

	obig x_test;
	obig y_test;
	obig result_q;
	obig result_r;

	obig_init(&x_test, sizeof(int));
	obig_init(&y_test, sizeof(char));
	obig_init(&result_q, sizeof(int));
	obig_init(&result_r, sizeof(int));

	obig_import_onative(&x_test, xo);
	obig_import_onative(&y_test, yo);

	obliv bool success = obig_div_mod_signed(&result_q, &result_r, x_test, y_test);
	bool tempBool;
	revealOblivBool(&tempBool, success, 0);

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_div_mod_signed - one digit divisor - division by 0", (!tempBool)?STATUS_SUCCESS:STATUS_FAILURE);

	obig_free(&x_test);
	obig_free(&y_test);
	obig_free(&result_q);
	obig_free(&result_r);
}

{	// obig_div_mod_signed - augmented assignment
	int x = 0xF94AE840;
	char y = 0x08;
	int expected_q = x / y;
	char expected_r = x % y;

	obliv int xo;
	obliv char yo;
	xo = feedOblivInt(x, 1);
	yo = feedOblivChar(y, 2);

	obig x_test;
	obig y_test;
	obig result_q;
	obig result_r;

	obig_init(&x_test, sizeof(int));
	obig_init(&y_test, sizeof(char));

	obig_import_onative(&x_test, xo);
	obig_import_onative(&y_test, yo);
	unsigned char temp;
	unsigned output_q;
	unsigned output_r;

	obliv bool success = obig_div_mod_signed(&x_test, &y_test, x_test, y_test);
	bool tempBool;
	revealOblivBool(&tempBool, success, 0);

	for (int ii = x_test.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, x_test.data[ii], 0);
		output_q <<= 8;
		output_q += temp;
	}

	for (int ii = y_test.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, y_test.data[ii], 0);
		output_r <<= 8;
		output_r += temp;
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_div_mod_signed - one digit divisor - augmented assignment", (expected_q == (int)output_q && expected_r == (int)output_r && tempBool)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected_q != (int)output_q) {
		fprintf(stderr, "\tExpected quotient:\t%08X\n\tActual quotient: \t%08X\n", expected_q, (int)output_q);
	}
	if (expected_r != (int)output_r) {
		fprintf(stderr, "\tExpected remainder:\t%08X\n\tActual remainder: \t%08X\n", expected_r, (int)output_r);
	}

	obig_free(&x_test);
	obig_free(&y_test);
}

{	// obig_div_mod_signed
	char x = 0xA8;
	char y = 0x19;
	int expected_q = x / y;
	int expected_r = x % y;

	obliv char xo;
	obliv char yo;
	xo = feedOblivChar(x, 1);
	yo = feedOblivChar(y, 2);

	obig x_test;
	obig y_test;
	obig result_q;
	obig result_r;

	obig_init(&x_test, sizeof(char));
	obig_init(&y_test, sizeof(char));
	obig_init(&result_q, sizeof(int));
	obig_init(&result_r, sizeof(int));

	obig_import_onative(&x_test, xo);
	obig_import_onative(&y_test, yo);
	unsigned char temp;
	unsigned output_q;
	unsigned output_r;

	obliv bool success = obig_div_mod_signed(&result_q, &result_r, x_test, y_test);
	bool tempBool;
	revealOblivBool(&tempBool, success, 0);

	for (int ii = result_q.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, result_q.data[ii], 0);
		output_q <<= 8;
		output_q += temp;
	}

	for (int ii = result_r.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, result_r.data[ii], 0);
		output_r <<= 8;
		output_r += temp;
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_div_mod_signed - one digit divisor - matched inputs", (expected_q == (int)output_q && expected_r == (int)output_r && tempBool)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected_q != (int)output_q) {
		fprintf(stderr, "\tExpected quotient:\t%08X\n\tActual quotient: \t%08X\n", expected_q, (int)output_q);
	}
	if (expected_r != (int)output_r) {
		fprintf(stderr, "\tExpected remainder:\t%08X\n\tActual remainder: \t%08X\n", expected_r, (int)output_r);
	}

	obig_free(&x_test);
	obig_free(&y_test);
	obig_free(&result_q);
	obig_free(&result_r);
}

{	// obig_div_mod_signed
	int x = 0x7E48A840;
	char y = 0x88;
	char expected_q = x / y;
	char expected_r = x % y;

	obliv int xo;
	obliv char yo;
	xo = feedOblivInt(x, 1);
	yo = feedOblivChar(y, 2);

	obig x_test;
	obig y_test;
	obig result_q;
	obig result_r;

	obig_init(&x_test, sizeof(int));
	obig_init(&y_test, sizeof(char));
	obig_init(&result_q, sizeof(char));
	obig_init(&result_r, sizeof(char));

	obig_import_onative(&x_test, xo);
	obig_import_onative(&y_test, yo);
	unsigned char temp;
	unsigned char output_q;
	unsigned char output_r;

	obliv bool success = obig_div_mod_signed(&result_q, &result_r, x_test, y_test);
	bool tempBool;
	revealOblivBool(&tempBool, success, 0);

	for (int ii = result_q.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, result_q.data[ii], 0);
		output_q <<= 8;
		output_q += temp;
	}

	for (int ii = result_r.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, result_r.data[ii], 0);
		output_r <<= 8;
		output_r += temp;
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_div_mod_signed - one digit divisor - truncated outputs", (expected_q == (int)output_q && expected_r == (int)output_r && tempBool)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected_q != (int)output_q) {
		fprintf(stderr, "\tExpected quotient:\t%08X\n\tActual quotient: \t%08X\n", expected_q, (int)output_q);
	}
	if (expected_r != (int)output_r) {
		fprintf(stderr, "\tExpected remainder:\t%08X\n\tActual remainder: \t%08X\n", expected_r, (int)output_r);
	}

	obig_free(&x_test);
	obig_free(&y_test);
	obig_free(&result_q);
	obig_free(&result_r);
}