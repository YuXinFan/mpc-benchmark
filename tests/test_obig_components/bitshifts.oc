/******************************************
 ******************************************
 *** obig_shl_native
 ******************************************
 ******************************************/

fprintf(stderr, "\n");

{	// obig_shl_native
	unsigned int x = 0x7E48A840;
	unsigned int expected = x << 1;

	obliv unsigned int xo;
	xo = feedOblivInt(x, 1);

	obig x_test;
	obig result;

	obig_init(&x_test, sizeof(int));
	obig_init(&result, sizeof(int));

	obig_set_onative(&x_test, xo);
	unsigned char temp;
	unsigned int output;

	obig_shl_native(&result, x_test, 1);

	for (int ii = result.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, result.data[ii], 0);
		output <<= 8;
		output += temp;
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_shl_native - shift by 1", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != output) {
		fprintf(stderr, "\tExpected:\t%0X\n\tActual: \t%0X\n", expected, output);
	}

	obig_free(&x_test);
	obig_free(&result);
}

{	// obig_shl_native
	unsigned int x = 0x7E48A840;
	unsigned int expected = x << 15;

	obliv unsigned int xo;
	xo = feedOblivInt(x, 1);

	obig x_test;
	obig result;

	obig_init(&x_test, sizeof(int));
	obig_init(&result, sizeof(int));

	obig_set_onative(&x_test, xo);
	unsigned char temp;
	unsigned int output;

	obig_shl_native(&result, x_test, 15);

	for (int ii = result.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, result.data[ii], 0);
		output <<= 8;
		output += temp;
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_shl_native - shift by 15", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != output) {
		fprintf(stderr, "\tExpected:\t%0X\n\tActual: \t%0X\n", expected, output);
	}

	obig_free(&x_test);
	obig_free(&result);
}

{	// obig_shl_native
	unsigned int x = 0x7E48A840;
	unsigned int expected = 0;

	obliv unsigned int xo;
	xo = feedOblivInt(x, 1);

	obig x_test;
	obig result;

	obig_init(&x_test, sizeof(int));
	obig_init(&result, sizeof(int));

	obig_set_onative(&x_test, xo);
	unsigned char temp;
	unsigned int output;

	obig_shl_native(&result, x_test, 34);

	for (int ii = result.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, result.data[ii], 0);
		output <<= 8;
		output += temp;
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_shl_native - shift by 34", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != output) {
		fprintf(stderr, "\tExpected:\t%0X\n\tActual: \t%0X\n", expected, output);
	}

	obig_free(&x_test);
	obig_free(&result);
}

{	// obig_shl_native - augmented assignment
	unsigned int x = 0x7E48A840;
	unsigned int expected = x << 15;

	obliv unsigned int xo;
	xo = feedOblivInt(x, 1);

	obig x_test;

	obig_init(&x_test, sizeof(int));

	obig_set_onative(&x_test, xo);
	unsigned char temp;
	unsigned int output;

	obig_shl_native(&x_test, x_test, 15);

	for (int ii = x_test.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, x_test.data[ii], 0);
		output <<= 8;
		output += temp;
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_shl_native - augmented assignment", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != output) {
		fprintf(stderr, "\tExpected:\t%0X\n\tActual: \t%0X\n", expected, output);
	}

	obig_free(&x_test);
}

{	// obig_shl_native - extended output
	unsigned int x = 0x7E48A840;
	unsigned long long expected = (unsigned long long) x << 15;

	obliv unsigned int xo;
	xo = feedOblivInt(x, 1);

	obig x_test;
	obig result;

	obig_init(&x_test, sizeof(int));
	obig_init(&result, sizeof(long long));

	obig_set_onative(&x_test, xo);
	unsigned char temp;
	unsigned long long output;

	obig_shl_native(&result, x_test, 15);

	for (int ii = result.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, result.data[ii], 0);
		output <<= 8;
		output += temp;
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_shl_native - extended output", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != output) {
		fprintf(stderr, "\tExpected:\t%0llX\n\tActual: \t%0llX\n", expected, output);
	}

	obig_free(&x_test);
	obig_free(&result);
}

{	// obig_shl_native - truncated output
	unsigned int x = 0x7E48A840;
	unsigned short expected = x << 15;

	obliv unsigned int xo;
	xo = feedOblivInt(x, 1);

	obig x_test;
	obig result;

	obig_init(&x_test, sizeof(int));
	obig_init(&result, sizeof(short));

	obig_set_onative(&x_test, xo);
	unsigned char temp;
	unsigned short output;

	obig_shl_native(&result, x_test, 15);

	for (int ii = result.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, result.data[ii], 0);
		output <<= 8;
		output += temp;
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_shl_native - truncated output", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != output) {
		fprintf(stderr, "\tExpected:\t%0hX\n\tActual: \t%0hX\n", expected, output);
	}

	obig_free(&x_test);
	obig_free(&result);
}



/******************************************
 ******************************************
 *** obig_shl_onative
 ******************************************
 ******************************************/

fprintf(stderr, "\n");

{	// obig_shl_onative
	unsigned int x = 0x7E48A840;
	unsigned int expected = x << 1;

	obliv unsigned int xo;
	xo = feedOblivInt(x, 1);
	obliv unsigned int yo;
	yo = feedOblivInt(1, 2);

	obig x_test;
	obig result;

	obig_init(&x_test, sizeof(int));
	obig_init(&result, sizeof(int));

	obig_set_onative(&x_test, xo);
	unsigned char temp;
	unsigned int output;

	obig_shl_onative(&result, x_test, yo);

	for (int ii = result.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, result.data[ii], 0);
		output <<= 8;
		output += temp;
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_shl_onative - shift by 1", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != output) {
		fprintf(stderr, "\tExpected:\t%0X\n\tActual: \t%0X\n", expected, output);
	}

	obig_free(&x_test);
	obig_free(&result);
}

{	// obig_shl_onative
	unsigned int x = 0x7E48A840;
	unsigned int expected = x << 15;

	obliv unsigned int xo;
	xo = feedOblivInt(x, 1);
	obliv unsigned int yo;
	yo = feedOblivInt(15, 2);

	obig x_test;
	obig result;

	obig_init(&x_test, sizeof(int));
	obig_init(&result, sizeof(int));

	obig_set_onative(&x_test, xo);
	unsigned char temp;
	unsigned int output;

	obig_shl_onative(&result, x_test, yo);

	for (int ii = result.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, result.data[ii], 0);
		output <<= 8;
		output += temp;
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_shl_onative - shift by 15", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != output) {
		fprintf(stderr, "\tExpected:\t%0X\n\tActual: \t%0X\n", expected, output);
	}

	obig_free(&x_test);
	obig_free(&result);
}

{	// obig_shl_onative
	unsigned int x = 0x7E48A840;
	unsigned int expected = 0;

	obliv unsigned int xo;
	xo = feedOblivInt(x, 1);
	obliv unsigned int yo;
	yo = feedOblivInt(34, 2);

	obig x_test;
	obig result;

	obig_init(&x_test, sizeof(int));
	obig_init(&result, sizeof(int));

	obig_set_onative(&x_test, xo);
	unsigned char temp;
	unsigned int output;

	obig_shl_onative(&result, x_test, yo);

	for (int ii = result.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, result.data[ii], 0);
		output <<= 8;
		output += temp;
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_shl_onative - shift by 34", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != output) {
		fprintf(stderr, "\tExpected:\t%0X\n\tActual: \t%0X\n", expected, output);
	}

	obig_free(&x_test);
	obig_free(&result);
}

{	// obig_shl_onative - augmented assignment
	unsigned int x = 0x7E48A840;
	unsigned int expected = x << 15;

	obliv unsigned int xo;
	xo = feedOblivInt(x, 1);
	obliv unsigned int yo;
	yo = feedOblivInt(15, 2);

	obig x_test;

	obig_init(&x_test, sizeof(int));

	obig_set_onative(&x_test, xo);
	unsigned char temp;
	unsigned int output;

	obig_shl_onative(&x_test, x_test, yo);

	for (int ii = x_test.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, x_test.data[ii], 0);
		output <<= 8;
		output += temp;
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_shl_onative - augmented assignment", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != output) {
		fprintf(stderr, "\tExpected:\t%0X\n\tActual: \t%0X\n", expected, output);
	}

	obig_free(&x_test);
}

{	// obig_shl_onative - extended output
	unsigned int x = 0x7E48A840;
	unsigned long long expected = (unsigned long long) x << 15;

	obliv unsigned int xo;
	xo = feedOblivInt(x, 1);
	obliv unsigned int yo;
	yo = feedOblivInt(15, 2);

	obig x_test;
	obig result;

	obig_init(&x_test, sizeof(int));
	obig_init(&result, sizeof(long long));

	obig_set_onative(&x_test, xo);
	unsigned char temp;
	unsigned long long output;

	obig_shl_onative(&result, x_test, yo);

	for (int ii = result.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, result.data[ii], 0);
		output <<= 8;
		output += temp;
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_shl_onative - extended output", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != output) {
		fprintf(stderr, "\tExpected:\t%0llX\n\tActual: \t%0llX\n", expected, output);
	}

	obig_free(&x_test);
	obig_free(&result);
}

{	// obig_shl_onative - truncated output
	unsigned int x = 0x7E48A840;
	unsigned short expected = x << 15;

	obliv unsigned int xo;
	xo = feedOblivInt(x, 1);
	obliv unsigned int yo;
	yo = feedOblivInt(15, 2);

	obig x_test;
	obig result;

	obig_init(&x_test, sizeof(int));
	obig_init(&result, sizeof(short));

	obig_set_onative(&x_test, xo);
	unsigned char temp;
	unsigned short output;

	obig_shl_onative(&result, x_test, yo);

	for (int ii = result.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, result.data[ii], 0);
		output <<= 8;
		output += temp;
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_shl_onative - truncated output", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != output) {
		fprintf(stderr, "\tExpected:\t%0hX\n\tActual: \t%0hX\n", expected, output);
	}

	obig_free(&x_test);
	obig_free(&result);
}


/******************************************
 ******************************************
 *** obig_shr_native
 ******************************************
 ******************************************/

fprintf(stderr, "\n");

{	// obig_shl_native
	unsigned int x = 0x7E48A840;
	unsigned int expected = x >> 1;

	obliv unsigned int xo;
	xo = feedOblivInt(x, 1);

	obig x_test;
	obig result;

	obig_init(&x_test, sizeof(int));
	obig_init(&result, sizeof(int));

	obig_set_onative(&x_test, xo);
	unsigned char temp;
	unsigned int output;

	obig_shr_native(&result, x_test, 1);

	for (int ii = result.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, result.data[ii], 0);
		output <<= 8;
		output += temp;
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_shr_native - shift by 1", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != output) {
		fprintf(stderr, "\tExpected:\t%0X\n\tActual: \t%0X\n", expected, output);
	}

	obig_free(&x_test);
	obig_free(&result);
}

{	// obig_shr_native
	unsigned int x = 0x7E48A840;
	unsigned int expected = x >> 15;

	obliv unsigned int xo;
	xo = feedOblivInt(x, 1);

	obig x_test;
	obig result;

	obig_init(&x_test, sizeof(int));
	obig_init(&result, sizeof(int));

	obig_set_onative(&x_test, xo);
	unsigned char temp;
	unsigned int output;

	obig_shr_native(&result, x_test, 15);

	for (int ii = result.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, result.data[ii], 0);
		output <<= 8;
		output += temp;
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_shr_native - shift by 15", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != output) {
		fprintf(stderr, "\tExpected:\t%0X\n\tActual: \t%0X\n", expected, output);
	}

	obig_free(&x_test);
	obig_free(&result);
}

{	// obig_shr_native
	unsigned int x = 0x7E48A840;
	unsigned int expected = 0;

	obliv unsigned int xo;
	xo = feedOblivInt(x, 1);

	obig x_test;
	obig result;

	obig_init(&x_test, sizeof(int));
	obig_init(&result, sizeof(int));

	obig_set_onative(&x_test, xo);
	unsigned char temp;
	unsigned int output;

	obig_shr_native(&result, x_test, 34);

	for (int ii = result.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, result.data[ii], 0);
		output <<= 8;
		output += temp;
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_shr_native - shift by 34", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != output) {
		fprintf(stderr, "\tExpected:\t%0X\n\tActual: \t%0X\n", expected, output);
	}

	obig_free(&x_test);
	obig_free(&result);
}

{	// obig_shl_native - augmented assignment
	unsigned int x = 0x7E48A840;
	unsigned int expected = x >> 15;

	obliv unsigned int xo;
	xo = feedOblivInt(x, 1);

	obig x_test;

	obig_init(&x_test, sizeof(int));

	obig_set_onative(&x_test, xo);
	unsigned char temp;
	unsigned int output;

	obig_shr_native(&x_test, x_test, 15);

	for (int ii = x_test.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, x_test.data[ii], 0);
		output <<= 8;
		output += temp;
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_shr_native - augmented assignment", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != output) {
		fprintf(stderr, "\tExpected:\t%0X\n\tActual: \t%0X\n", expected, output);
	}

	obig_free(&x_test);
}

{	// obig_shl_native - extended output
	unsigned int x = 0x7E48A840;
	unsigned long long expected = (unsigned long long) x >> 15;

	obliv unsigned int xo;
	xo = feedOblivInt(x, 1);

	obig x_test;
	obig result;

	obig_init(&x_test, sizeof(int));
	obig_init(&result, sizeof(unsigned long long));

	obig_set_onative(&x_test, xo);
	unsigned char temp;
	unsigned long long output;

	obig_shr_native(&result, x_test, 15);

	for (int ii = result.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, result.data[ii], 0);
		output <<= 8;
		output += temp;
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_shr_native - extended output", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != output) {
		fprintf(stderr, "\tExpected:\t%0llX\n\tActual: \t%0llX\n", expected, output);
	}

	obig_free(&x_test);
	obig_free(&result);
}

{	// obig_shl_native - truncated output
	unsigned int x = 0x7E48A840;
	unsigned short expected = x >> 15;

	obliv unsigned int xo;
	xo = feedOblivInt(x, 1);

	obig x_test;
	obig result;

	obig_init(&x_test, sizeof(int));
	obig_init(&result, sizeof(short));

	obig_set_onative(&x_test, xo);
	unsigned char temp;
	unsigned short output;

	obig_shr_native(&result, x_test, 15);

	for (int ii = result.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, result.data[ii], 0);
		output <<= 8;
		output += temp;
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_shr_native - truncated output", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != output) {
		fprintf(stderr, "\tExpected:\t%0hX\n\tActual: \t%0hX\n", expected, output);
	}

	obig_free(&x_test);
	obig_free(&result);
}



/******************************************
 ******************************************
 *** obig_shr_onative
 ******************************************
 ******************************************/

fprintf(stderr, "\n");

{	// obig_shr_onative
	unsigned int x = 0x7E48A840;
	unsigned int expected = x >> 1;

	obliv unsigned int xo;
	xo = feedOblivInt(x, 1);
	obliv unsigned int yo;
	yo = feedOblivInt(1, 2);

	obig x_test;
	obig result;

	obig_init(&x_test, sizeof(int));
	obig_init(&result, sizeof(int));

	obig_set_onative(&x_test, xo);
	unsigned char temp;
	unsigned int output;

	obig_shr_onative(&result, x_test, yo);

	for (int ii = result.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, result.data[ii], 0);
		output <<= 8;
		output += temp;
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_shr_onative - shift by 1", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != output) {
		fprintf(stderr, "\tExpected:\t%0X\n\tActual: \t%0X\n", expected, output);
	}

	obig_free(&x_test);
	obig_free(&result);
}

{	// obig_shr_onative
	unsigned int x = 0x7E48A840;
	unsigned int expected = x >> 15;

	obliv unsigned int xo;
	xo = feedOblivInt(x, 1);
	obliv unsigned int yo;
	yo = feedOblivInt(15, 2);

	obig x_test;
	obig result;

	obig_init(&x_test, sizeof(int));
	obig_init(&result, sizeof(int));

	obig_set_onative(&x_test, xo);
	unsigned char temp;
	unsigned int output;

	obig_shr_onative(&result, x_test, yo);

	for (int ii = result.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, result.data[ii], 0);
		output <<= 8;
		output += temp;
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_shr_onative - shift by 15", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != output) {
		fprintf(stderr, "\tExpected:\t%0X\n\tActual: \t%0X\n", expected, output);
	}

	obig_free(&x_test);
	obig_free(&result);
}

{	// obig_shr_onative
	unsigned int x = 0x7E48A840;
	unsigned int expected = 0;

	obliv unsigned int xo;
	xo = feedOblivInt(x, 1);
	obliv unsigned int yo;
	yo = feedOblivInt(34, 2);

	obig x_test;
	obig result;

	obig_init(&x_test, sizeof(int));
	obig_init(&result, sizeof(int));

	obig_set_onative(&x_test, xo);
	unsigned char temp;
	unsigned int output;

	obig_shr_onative(&result, x_test, yo);

	for (int ii = result.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, result.data[ii], 0);
		output <<= 8;
		output += temp;
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_shr_onative - shift by 34", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != output) {
		fprintf(stderr, "\tExpected:\t%0X\n\tActual: \t%0X\n", expected, output);
	}

	obig_free(&x_test);
	obig_free(&result);
}

{	// obig_shr_onative - augmented assignment
	unsigned int x = 0x7E48A840;
	unsigned int expected = x >> 15;

	obliv unsigned int xo;
	xo = feedOblivInt(x, 1);
	obliv unsigned int yo;
	yo = feedOblivInt(15, 2);

	obig x_test;

	obig_init(&x_test, sizeof(int));

	obig_set_onative(&x_test, xo);
	unsigned char temp;
	unsigned int output;

	obig_shr_onative(&x_test, x_test, yo);

	for (int ii = x_test.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, x_test.data[ii], 0);
		output <<= 8;
		output += temp;
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_shr_onative - augmented assignment", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != output) {
		fprintf(stderr, "\tExpected:\t%0X\n\tActual: \t%0X\n", expected, output);
	}

	obig_free(&x_test);
}

{	// obig_shr_onative - extended output
	unsigned int x = 0x7E48A840;
	unsigned long long expected = (unsigned long long) x >> 15;

	obliv unsigned int xo;
	xo = feedOblivInt(x, 1);
	obliv unsigned int yo;
	yo = feedOblivInt(15, 2);

	obig x_test;
	obig result;

	obig_init(&x_test, sizeof(int));
	obig_init(&result, sizeof(long long));

	obig_set_onative(&x_test, xo);
	unsigned char temp;
	unsigned long long output;

	obig_shr_onative(&result, x_test, yo);

	for (int ii = result.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, result.data[ii], 0);
		output <<= 8;
		output += temp;
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_shr_onative - extended output", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != output) {
		fprintf(stderr, "\tExpected:\t%0llX\n\tActual: \t%0llX\n", expected, output);
	}

	obig_free(&x_test);
	obig_free(&result);
}

{	// obig_shr_onative - truncated output
	unsigned int x = 0x7E48A840;
	unsigned short expected = x >> 15;

	obliv unsigned int xo;
	xo = feedOblivInt(x, 1);
	obliv unsigned int yo;
	yo = feedOblivInt(15, 2);

	obig x_test;
	obig result;

	obig_init(&x_test, sizeof(int));
	obig_init(&result, sizeof(short));

	obig_set_onative(&x_test, xo);
	unsigned char temp;
	unsigned short output;

	obig_shr_onative(&result, x_test, yo);

	for (int ii = result.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, result.data[ii], 0);
		output <<= 8;
		output += temp;
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_shr_onative - truncated output", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != output) {
		fprintf(stderr, "\tExpected:\t%0hX\n\tActual: \t%0hX\n", expected, output);
	}

	obig_free(&x_test);
	obig_free(&result);
}