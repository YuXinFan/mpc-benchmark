/******************************************
 ******************************************
 *** obig_import_onative
 ******************************************
 ******************************************/

fprintf(stderr, "\n");

{	// obig_import_onative - random data
	unsigned long long x[100];
	unsigned long long output[100];
	bool success = true;
	for (int jj = 0; jj < 100; jj++) {
		obliv unsigned long long xo;
		obig x_test;

		obig_init(&x_test, sizeof(long long));

		for (int ii = 0; ii < sizeof(long long)/sizeof(int); ii++) {
			x[jj] <<= sizeof(int) * 8;
			x[jj] += ocBroadcastInt(rand(), 1);
		}

		xo = feedOblivLLong(x[jj], 1);

		obig_import_onative(&x_test, xo);
		unsigned char temp;

		for (int ii = x_test.digits -1; ii >= 0; ii--) {
			revealOblivChar(&temp, x_test.data[ii], 0);
			output[jj] <<= 8;
			output[jj] += temp;
		}

		success &= x[jj] == output[jj];
		obig_free(&x_test);
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_import_onative - 100 random integers", (success)?STATUS_SUCCESS:STATUS_FAILURE);
	for (int jj = 0; jj < 100; jj++) {
		if ((x[jj] != output[jj])) {
			args->status = 1;
			fprintf(stderr, "\tExpected:\t%0llX\n\tActual: \t%0llX\n", x[jj], output[jj]);
		}
	}
}

{	// obig_import_onative - random data, extended output
	unsigned long long x[100];
	unsigned long long output[100];
	bool success = true;
	for (int jj = 0; jj < 100; jj++) {

		obliv unsigned long long xo;
		obig x_test;

		obig_init(&x_test, sizeof(long long) * 2);

		for (int ii = 0; ii < sizeof(long long)/sizeof(int); ii++) {
			x[jj] <<= sizeof(int) * 8;
			x[jj] += ocBroadcastInt(rand(), 1);
		}

		xo = feedOblivLLong(x[jj], 1);

		obig_import_onative(&x_test, xo);
		unsigned char temp;

		for (int ii = x_test.digits -1; ii >= 0; ii--) {
			revealOblivChar(&temp, x_test.data[ii], 0);
			output[jj] <<= 8;
			output[jj] += temp;
		}

		success &= x[jj] == output[jj];
		obig_free(&x_test);
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_import_onative - 100 random integers, extended output", (success)?STATUS_SUCCESS:STATUS_FAILURE);
	for (int jj = 0; jj < 100; jj++) {
		if ((x[jj] != output[jj])) {
			args->status = 1;
			fprintf(stderr, "\tExpected:\t%0llX\n\tActual: \t%0llX\n", x[jj], output[jj]);
		}
	}

}

{	// obig_import_onative - random data, truncated output
	unsigned long long x[100];
	unsigned int output[100];
	bool success = true;
	for (int jj = 0; jj < 100; jj++) {

		obliv unsigned long long xo;
		obig x_test;

		obig_init(&x_test, sizeof(int));

		for (int ii = 0; ii < sizeof(long long)/sizeof(int); ii++) {
			x[jj] <<= sizeof(int) * 8;
			x[jj] += ocBroadcastInt(rand(), 1);
		}

		xo = feedOblivLLong(x[jj], 1);

		obig_import_onative(&x_test, xo);
		unsigned char temp;

		for (int ii = x_test.digits -1; ii >= 0; ii--) {
			revealOblivChar(&temp, x_test.data[ii], 0);
			output[jj] <<= 8;
			output[jj] += temp;
		}

		success &= (unsigned)x[jj] == output[jj];
		obig_free(&x_test);
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_import_onative - 100 random integers, truncated output", (success)?STATUS_SUCCESS:STATUS_FAILURE);
	for (int jj = 0; jj < 100; jj++) {
		if (((unsigned int)x[jj] != output[jj])) {
			args->status = 1;
			fprintf(stderr, "\tExpected:\t%0X\n\tActual: \t%0X\n", x[jj], output[jj]);
		}
	}

}





/******************************************
 ******************************************
 *** obig_export_onative
 ******************************************
 ******************************************/

fprintf(stderr, "\n");

{	// obig_export_onative - random data
	unsigned long long x[100];
	unsigned long long output[100];
	bool success = true;
	for (int jj = 0; jj < 100; jj++) {
		obig x_test;
		obliv unsigned long long xo;

		obig_init(&x_test, sizeof(long long));

		for (int ii = 0; ii < sizeof(long long)/sizeof(int); ii++) {
			x[jj] <<= sizeof(int) * 8;
			x[jj] += ocBroadcastInt(rand(), 1);
		}

		for (int ii = x_test.digits -1; ii >= 0; ii--) {
			x_test.data[ii] = feedOblivChar(x[jj] >> (ii * 8), 1);
		}

		xo = obig_export_onative(x_test);

		revealOblivLLong(&output[jj], xo, 0);

		success &= x[jj] == output[jj];
		obig_free(&x_test);
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_export_onative - 100 random integers", (success)?STATUS_SUCCESS:STATUS_FAILURE);
	for (int jj = 0; jj < 100; jj++) {
		if ((x[jj] != output[jj])) {
			args->status = 1;
			fprintf(stderr, "\tExpected:\t%0X\n\tActual: \t%0X\n", x[jj], output[jj]);
		}
	}

}

{	// obig_export_onative - random data
	unsigned int x[100];
	unsigned long long output[100];
	bool success = true;
	for (int jj = 0; jj < 100; jj++) {
		obig x_test;
		obliv unsigned long long xo;

		obig_init(&x_test, sizeof(int));

		for (int ii = 0; ii < sizeof(int)/sizeof(int); ii++) {
			x[jj] <<= sizeof(int) * 8;
			x[jj] += ocBroadcastInt(rand(), 1);
		}

		for (int ii = x_test.digits -1; ii >= 0; ii--) {
			x_test.data[ii] = feedOblivChar(x[jj] >> (ii * 8), 1);
		}

		xo = obig_export_onative(x_test);

		revealOblivLLong(&output[jj], xo, 0);

		success &= x[jj] == output[jj];
		obig_free(&x_test);
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_export_onative - 100 random integers, extended output", (success)?STATUS_SUCCESS:STATUS_FAILURE);
	for (int jj = 0; jj < 100; jj++) {
		if ((x[jj] != output[jj])) {
			args->status = 1;
			fprintf(stderr, "\tExpected:\t%0X\n\tActual: \t%0X\n", x[jj], output[jj]);
		}
	}

}

{	// obig_export_onative - random data, truncated output
	unsigned long long x[100];
	unsigned int output[100];
	bool success = true;
	for (int jj = 0; jj < 100; jj++) {
		obig x_test;
		obliv unsigned int xo;

		obig_init(&x_test, sizeof(long long));

		for (int ii = 0; ii < sizeof(long long)/sizeof(int); ii++) {
			x[jj] <<= sizeof(int) * 8;
			x[jj] += ocBroadcastInt(rand(), 1);
		}

		for (int ii = x_test.digits -1; ii >= 0; ii--) {
			x_test.data[ii] = feedOblivChar(x[jj] >> (ii * 8), 1);
		}

		xo = obig_export_onative(x_test);

		revealOblivInt(&output[jj], xo, 0);

		success &= (unsigned int)x[jj] == output[jj];
		obig_free(&x_test);
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_export_onative - 100 random integers, truncated output", (success)?STATUS_SUCCESS:STATUS_FAILURE);
	for (int jj = 0; jj < 100; jj++) {
		if (((unsigned int)x[jj] != output[jj])) {
			args->status = 1;
			fprintf(stderr, "\tExpected:\t%0X\n\tActual: \t%0X\n", (unsigned int)x[jj], output[jj]);
		}
	}

}




/******************************************
 ******************************************
 *** obig_import_onative_signed
 ******************************************
 ******************************************/

fprintf(stderr, "\n");

{	// obig_import_onative_signed - random data
	long long x[100];
	long long output[100];
	bool success = true;
	for (int jj = 0; jj < 100; jj++) {
		obliv long long xo;
		obig x_test;

		obig_init(&x_test, sizeof(long long));

		for (int ii = 0; ii < sizeof(long long)/sizeof(int); ii++) {
			x[jj] <<= sizeof(int) * 8;
			x[jj] += ocBroadcastInt(rand()+rand()-RAND_MAX, 1);
		}

		xo = feedOblivLLong(x[jj], 1);

		obig_import_onative_signed(&x_test, xo);
		unsigned char temp;

		for (int ii = x_test.digits -1; ii >= 0; ii--) {
			revealOblivChar(&temp, x_test.data[ii], 0);
			output[jj] <<= 8;
			output[jj] += temp;
		}

		success &= x[jj] == output[jj];
		obig_free(&x_test);
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_import_onative_signed - 100 random integers", (success)?STATUS_SUCCESS:STATUS_FAILURE);
	for (int jj = 0; jj < 100; jj++) {
		if ((x[jj] != output[jj])) {
			args->status = 1;
			fprintf(stderr, "\tExpected:\t%0llX\n\tActual: \t%0llX\n", x[jj], output[jj]);
		}
	}
}

{	// obig_import_onative_signed - random data, extended output
	long long x[100];
	long long output[100];
	bool success = true;
	for (int jj = 0; jj < 100; jj++) {

		obliv long long xo;
		obig x_test;

		obig_init(&x_test, sizeof(long long) * 2);

		for (int ii = 0; ii < sizeof(long long)/sizeof(int); ii++) {
			x[jj] <<= sizeof(int) * 8;
			x[jj] += ocBroadcastInt(rand()+rand()-RAND_MAX, 1);
		}

		xo = feedOblivLLong(x[jj], 1);

		obig_import_onative_signed(&x_test, xo);
		unsigned char temp;

		for (int ii = x_test.digits -1; ii >= 0; ii--) {
			revealOblivChar(&temp, x_test.data[ii], 0);
			output[jj] <<= 8;
			output[jj] += temp;
		}

		success &= x[jj] == output[jj];
		obig_free(&x_test);
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_import_onative_signed - 100 random integers, extended output", (success)?STATUS_SUCCESS:STATUS_FAILURE);
	for (int jj = 0; jj < 100; jj++) {
		if ((x[jj] != output[jj])) {
			args->status = 1;
			fprintf(stderr, "\tExpected:\t%0llX\n\tActual: \t%0llX\n", x[jj], output[jj]);
		}
	}

}

{	// obig_import_onative_signed - random data, truncated output
	long long x[100];
	int output[100];
	bool success = true;
	for (int jj = 0; jj < 100; jj++) {

		obliv long long xo;
		obig x_test;

		obig_init(&x_test, sizeof(int));

		for (int ii = 0; ii < sizeof(long long)/sizeof(int); ii++) {
			x[jj] <<= sizeof(int) * 8;
			x[jj] += ocBroadcastInt(rand()+rand()-RAND_MAX, 1);
		}

		xo = feedOblivLLong(x[jj], 1);

		obig_import_onative_signed(&x_test, xo);
		unsigned char temp;

		for (int ii = x_test.digits -1; ii >= 0; ii--) {
			revealOblivChar(&temp, x_test.data[ii], 0);
			output[jj] <<= 8;
			output[jj] += temp;
		}

		success &= (unsigned)x[jj] == output[jj];
		obig_free(&x_test);
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_import_onative_signed - 100 random integers, truncated output", (success)?STATUS_SUCCESS:STATUS_FAILURE);
	for (int jj = 0; jj < 100; jj++) {
		if (((unsigned int)x[jj] != output[jj])) {
			args->status = 1;
			fprintf(stderr, "\tExpected:\t%0X\n\tActual: \t%0X\n", x[jj], output[jj]);
		}
	}

}





/******************************************
 ******************************************
 *** obig_export_onative_signed
 ******************************************
 ******************************************/

fprintf(stderr, "\n");

{	// obig_export_onative_signed - random data
	long long x[100];
	long long output[100];
	bool success = true;
	for (int jj = 0; jj < 100; jj++) {
		obig x_test;
		obliv long long xo;

		obig_init(&x_test, sizeof(long long));

		for (int ii = 0; ii < sizeof(long long)/sizeof(int); ii++) {
			x[jj] <<= sizeof(int) * 8;
			x[jj] += ocBroadcastInt(rand()+rand()-RAND_MAX, 1);
		}

		for (int ii = x_test.digits -1; ii >= 0; ii--) {
			x_test.data[ii] = feedOblivChar(x[jj] >> (ii * 8), 1);
		}

		xo = obig_export_onative_signed(x_test);

		revealOblivLLong(&output[jj], xo, 0);

		success &= x[jj] == output[jj];
		obig_free(&x_test);
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_export_onative_signed - 100 random integers", (success)?STATUS_SUCCESS:STATUS_FAILURE);
	for (int jj = 0; jj < 100; jj++) {
		if ((x[jj] != output[jj])) {
			args->status = 1;
			fprintf(stderr, "\tExpected:\t%0X\n\tActual: \t%0X\n", x[jj], output[jj]);
		}
	}

}

{	// obig_export_onative_signed - random data, extended output
	int x[100];
	long long output[100];
	bool success = true;
	for (int jj = 0; jj < 100; jj++) {
		obig x_test;
		obliv long long xo;

		obig_init(&x_test, sizeof(int));

		for (int ii = 0; ii < sizeof(int)/sizeof(int); ii++) {
			x[jj] <<= sizeof(int) * 8;
			x[jj] += ocBroadcastInt(rand()+rand()-RAND_MAX, 1);
		}

		for (int ii = x_test.digits -1; ii >= 0; ii--) {
			x_test.data[ii] = feedOblivChar(x[jj] >> (ii * 8), 1);
		}

		xo = obig_export_onative_signed(x_test);

		revealOblivLLong(&output[jj], xo, 0);

		success &= x[jj] == output[jj];
		obig_free(&x_test);
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_export_onative_signed - 100 random integers, extended output", (success)?STATUS_SUCCESS:STATUS_FAILURE);
	for (int jj = 0; jj < 100; jj++) {
		if ((x[jj] != output[jj])) {
			args->status = 1;
			fprintf(stderr, "\tExpected:\t%0X\n\tActual: \t%0X\n", x[jj], output[jj]);
		}
	}

}

{	// obig_export_onative_signed - random data, truncated output
	long long x[100];
	int output[100];
	bool success = true;
	for (int jj = 0; jj < 100; jj++) {
		obig x_test;
		obliv int xo;

		obig_init(&x_test, sizeof(long long));

		for (int ii = 0; ii < sizeof(long long)/sizeof(int); ii++) {
			x[jj] <<= sizeof(int) * 8;
			x[jj] += ocBroadcastInt(rand()+rand()-RAND_MAX, 1);
		}

		for (int ii = x_test.digits -1; ii >= 0; ii--) {
			x_test.data[ii] = feedOblivChar(x[jj] >> (ii * 8), 1);
		}

		xo = obig_export_onative_signed(x_test);

		revealOblivInt(&output[jj], xo, 0);

		success &= (unsigned int)x[jj] == output[jj];
		obig_free(&x_test);
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_export_onative_signed - 100 random integers, truncated output", (success)?STATUS_SUCCESS:STATUS_FAILURE);
	for (int jj = 0; jj < 100; jj++) {
		if (((unsigned int)x[jj] != output[jj])) {
			args->status = 1;
			fprintf(stderr, "\tExpected:\t%0X\n\tActual: \t%0X\n", (unsigned int)x[jj], output[jj]);
		}
	}

}
