/******************************************
 ******************************************
 *** obig_not
 ******************************************
 ******************************************/

fprintf(stderr, "\n");

{	// obig_not
	unsigned int x = 0x7E48A840;
	unsigned int expected = ~x;

	obliv unsigned int xo;
	xo = feedOblivInt(x, 1);

	obig x_test;
	obig result;

	obig_init(&x_test, sizeof(int));
	obig_init(&result, sizeof(int));

	obig_import_onative(&x_test, xo);
	unsigned char temp;
	unsigned int output;

	obig_not(&result, x_test);

	for (int ii = result.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, result.data[ii], 0);
		output <<= 8;
		output += temp;
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_not", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != output) {
		fprintf(stderr, "\tExpected:\t%0X\n\tActual: \t%0X\n", expected, output);
	}

	obig_free(&x_test);
	obig_free(&result);
}

{	// obig_not - augmented assignment
	unsigned int x = 0x7E48A840;
	unsigned int expected = ~x;

	obliv unsigned int xo;
	xo = feedOblivInt(x, 1);

	obig x_test;

	obig_init(&x_test, sizeof(int));

	obig_import_onative(&x_test, xo);
	unsigned char temp;
	unsigned int output;

	obig_not(&x_test, x_test);

	for (int ii = x_test.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, x_test.data[ii], 0);
		output <<= 8;
		output += temp;
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_not - augmented assignment", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != output) {
		fprintf(stderr, "\tExpected:\t%0X\n\tActual: \t%0X\n", expected, output);
	}

	obig_free(&x_test);
}

{	// obig_not - extended output
	unsigned int x = 0xAE48A840;
	unsigned long long expected = x;
	expected = ~expected;

	obliv unsigned int xo;
	xo = feedOblivInt(x, 1);

	obig x_test;
	obig result;

	obig_init(&x_test, sizeof(int));
	obig_init(&result, sizeof(long long));

	obig_import_onative(&x_test, xo);
	unsigned char temp;
	unsigned long long output;

	obig_not(&result, x_test);

	for (int ii = result.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, result.data[ii], 0);
		output <<= 8;
		output += temp;
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_not - extended output", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != output) {
		fprintf(stderr, "\tExpected:\t%0llX\n\tActual: \t%0llX\n", expected, output);
	}

	obig_free(&x_test);
	obig_free(&result);
}

{	// obig_not - truncated output
	unsigned int x = 0xAE48A840;
	unsigned short expected = x;
	expected = ~expected;

	obliv unsigned int xo;
	xo = feedOblivInt(x, 1);

	obig x_test;
	obig result;

	obig_init(&x_test, sizeof(int));
	obig_init(&result, sizeof(short));

	obig_import_onative(&x_test, xo);
	unsigned char temp;
	unsigned short output;

	obig_not(&result, x_test);

	for (int ii = result.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, result.data[ii], 0);
		output <<= 8;
		output += temp;
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_not - truncated output", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != output) {
		fprintf(stderr, "\tExpected:\t%0llX\n\tActual: \t%0llX\n", expected, output);
	}

	obig_free(&x_test);
	obig_free(&result);
}




/******************************************
 ******************************************
 *** obig_and
 ******************************************
 ******************************************/

fprintf(stderr, "\n");

{	// obig_add
	unsigned int x = 0x7E48A840;
	unsigned int y = 0x47E0DD18;
	unsigned int expected = x & y;

	obliv unsigned int xo;
	obliv unsigned int yo;
	xo = feedOblivInt(x, 1);
	yo = feedOblivInt(y, 2);

	obig x_test;
	obig y_test;
	obig result;

	obig_init(&x_test, sizeof(int));
	obig_init(&y_test, sizeof(int));
	obig_init(&result, sizeof(int));

	obig_import_onative(&x_test, xo);
	obig_import_onative(&y_test, yo);
	unsigned char temp;
	unsigned int output;

	obig_and(&result, x_test, y_test);

	for (int ii = result.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, result.data[ii], 0);
		output <<= 8;
		output += temp;
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_and", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != output) {
		fprintf(stderr, "\tExpected:\t%0X\n\tActual: \t%0X\n", expected, output);
	}

	obig_free(&x_test);
	obig_free(&y_test);
	obig_free(&result);
}

{	// obig_and - augmented assignment x
	unsigned int x = 0x7E48A840;
	unsigned int y = 0x47E0DD18;
	unsigned int expected = x & y;

	obliv unsigned int xo;
	obliv unsigned int yo;
	xo = feedOblivInt(x, 1);
	yo = feedOblivInt(y, 2);

	obig x_test;
	obig y_test;

	obig_init(&x_test, sizeof(int));
	obig_init(&y_test, sizeof(int));

	obig_import_onative(&x_test, xo);
	obig_import_onative(&y_test, yo);
	unsigned char temp;
	unsigned int output;

	obig_and(&x_test, x_test, y_test);

	for (int ii = x_test.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, x_test.data[ii], 0);
		output <<= 8;
		output += temp;
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_and - augmented assignment x", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != output) {
		fprintf(stderr, "\tExpected:\t%0X\n\tActual: \t%0X\n", expected, output);
	}

	obig_free(&x_test);
	obig_free(&y_test);
}

{	// obig_and - augmented assignment y
	unsigned int x = 0x7E48A840;
	unsigned int y = 0x47E0DD18;
	unsigned int expected = x & y;

	obliv unsigned int xo;
	obliv unsigned int yo;
	xo = feedOblivInt(x, 1);
	yo = feedOblivInt(y, 2);

	obig x_test;
	obig y_test;

	obig_init(&x_test, sizeof(int));
	obig_init(&y_test, sizeof(int));

	obig_import_onative(&x_test, xo);
	obig_import_onative(&y_test, yo);
	unsigned char temp;
	unsigned int output;

	obig_and(&y_test, x_test, y_test);

	for (int ii = y_test.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, y_test.data[ii], 0);
		output <<= 8;
		output += temp;
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_and - augmented assignment y", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != output) {
		fprintf(stderr, "\tExpected:\t%0X\n\tActual: \t%0X\n", expected, output);
	}

	obig_free(&x_test);
	obig_free(&y_test);
}

{	// obig_and - mismatched inputs (x longer than y)
	unsigned int x = 0x7E48A840;
	unsigned short y = 0xDD18;
	unsigned int expected = x & y;

	obliv unsigned int xo;
	obliv unsigned short yo;
	xo = feedOblivInt(x, 1);
	yo = feedOblivShort(y, 2);

	obig x_test;
	obig y_test;
	obig result;

	obig_init(&x_test, sizeof(int));
	obig_init(&y_test, sizeof(short));
	obig_init(&result, sizeof(int));

	obig_import_onative(&x_test, xo);
	obig_import_onative(&y_test, yo);
	unsigned char temp;
	unsigned int output;

	obig_and(&result, x_test, y_test);

	for (int ii = result.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, result.data[ii], 0);
		output <<= 8;
		output += temp;
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_and - mismatched inputs (x longer than y)", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != output) {
		fprintf(stderr, "\tExpected:\t%0llX\n\tActual: \t%0llX\n", expected, output);
	}

	obig_free(&x_test);
	obig_free(&y_test);
	obig_free(&result);
}

{	// obig_and - mismatched inputs (x shorter than y)
	unsigned short x = 0xA840;
	unsigned int y = 0x47E0DD18;
	unsigned int expected = x & y;

	obliv unsigned short xo;
	obliv unsigned int yo;
	xo = feedOblivShort(x, 1);
	yo = feedOblivInt(y, 2);

	obig x_test;
	obig y_test;
	obig result;

	obig_init(&x_test, sizeof(short));
	obig_init(&y_test, sizeof(int));
	obig_init(&result, sizeof(int));

	obig_import_onative(&x_test, xo);
	obig_import_onative(&y_test, yo);
	unsigned char temp;
	unsigned int output;

	obig_and(&result, x_test, y_test);

	for (int ii = result.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, result.data[ii], 0);
		output <<= 8;
		output += temp;
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_and - mismatched inputs (x shorter than y)", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != output) {
		fprintf(stderr, "\tExpected:\t%0llX\n\tActual: \t%0llX\n", expected, output);
	}

	obig_free(&x_test);
	obig_free(&y_test);
	obig_free(&result);
}

{	// obig_and - extended output
	unsigned int x = 0x7E48A840;
	unsigned int y = 0xA7E0DD18;
	unsigned long long expected = x;
	expected &= y;

	obliv unsigned int xo;
	obliv unsigned int yo;
	xo = feedOblivInt(x, 1);
	yo = feedOblivInt(y, 2);

	obig x_test;
	obig y_test;
	obig result;

	obig_init(&x_test, sizeof(int));
	obig_init(&y_test, sizeof(int));
	obig_init(&result, sizeof(long long));

	obig_import_onative(&x_test, xo);
	obig_import_onative(&y_test, yo);
	unsigned char temp;
	unsigned long long output;

	obig_and(&result, x_test, y_test);

	for (int ii = result.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, result.data[ii], 0);
		output <<= 8;
		output += temp;
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_and - extended output", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != output) {
		fprintf(stderr, "\tExpected:\t%0llX\n\tActual: \t%0llX\n", expected, output);
	}

	obig_free(&x_test);
	obig_free(&y_test);
	obig_free(&result);
}

{	// obig_and - truncated output
	unsigned int x = 0x7E48A840;
	unsigned int y = 0xA7E0DD18;
	unsigned short expected = x & y;

	obliv unsigned int xo;
	obliv unsigned int yo;
	xo = feedOblivInt(x, 1);
	yo = feedOblivInt(y, 2);

	obig x_test;
	obig y_test;
	obig result;

	obig_init(&x_test, sizeof(int));
	obig_init(&y_test, sizeof(int));
	obig_init(&result, sizeof(short));

	obig_import_onative(&x_test, xo);
	obig_import_onative(&y_test, yo);
	unsigned char temp;
	unsigned short output;

	obig_and(&result, x_test, y_test);

	for (int ii = result.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, result.data[ii], 0);
		output <<= 8;
		output += temp;
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_and - truncated output", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != output) {
		fprintf(stderr, "\tExpected:\t%0llX\n\tActual: \t%0llX\n", expected, output);
	}

	obig_free(&x_test);
	obig_free(&y_test);
	obig_free(&result);
}



/******************************************
 ******************************************
 *** obig_or
 ******************************************
 ******************************************/

fprintf(stderr, "\n");

{	// obig_or
	unsigned int x = 0x7E48A840;
	unsigned int y = 0x47E0DD18;
	unsigned int expected = x | y;

	obliv unsigned int xo;
	obliv unsigned int yo;
	xo = feedOblivInt(x, 1);
	yo = feedOblivInt(y, 2);

	obig x_test;
	obig y_test;
	obig result;

	obig_init(&x_test, sizeof(int));
	obig_init(&y_test, sizeof(int));
	obig_init(&result, sizeof(int));

	obig_import_onative(&x_test, xo);
	obig_import_onative(&y_test, yo);
	unsigned char temp;
	unsigned int output;

	obig_or(&result, x_test, y_test);

	for (int ii = result.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, result.data[ii], 0);
		output <<= 8;
		output += temp;
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_or", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != output) {
		fprintf(stderr, "\tExpected:\t%0X\n\tActual: \t%0X\n", expected, output);
	}

	obig_free(&x_test);
	obig_free(&y_test);
	obig_free(&result);
}

{	// obig_or - augmented assignment x
	unsigned int x = 0x7E48A840;
	unsigned int y = 0x47E0DD18;
	unsigned int expected = x | y;

	obliv unsigned int xo;
	obliv unsigned int yo;
	xo = feedOblivInt(x, 1);
	yo = feedOblivInt(y, 2);

	obig x_test;
	obig y_test;

	obig_init(&x_test, sizeof(int));
	obig_init(&y_test, sizeof(int));

	obig_import_onative(&x_test, xo);
	obig_import_onative(&y_test, yo);
	unsigned char temp;
	unsigned int output;

	obig_or(&x_test, x_test, y_test);

	for (int ii = x_test.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, x_test.data[ii], 0);
		output <<= 8;
		output += temp;
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_or - augmented assignment x", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != output) {
		fprintf(stderr, "\tExpected:\t%0X\n\tActual: \t%0X\n", expected, output);
	}

	obig_free(&x_test);
	obig_free(&y_test);
}

{	// obig_or - augmented assignment y
	unsigned int x = 0x7E48A840;
	unsigned int y = 0x47E0DD18;
	unsigned int expected = x | y;

	obliv unsigned int xo;
	obliv unsigned int yo;
	xo = feedOblivInt(x, 1);
	yo = feedOblivInt(y, 2);

	obig x_test;
	obig y_test;

	obig_init(&x_test, sizeof(int));
	obig_init(&y_test, sizeof(int));

	obig_import_onative(&x_test, xo);
	obig_import_onative(&y_test, yo);
	unsigned char temp;
	unsigned int output;

	obig_or(&y_test, x_test, y_test);

	for (int ii = y_test.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, y_test.data[ii], 0);
		output <<= 8;
		output += temp;
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_or - augmented assignment y", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != output) {
		fprintf(stderr, "\tExpected:\t%0X\n\tActual: \t%0X\n", expected, output);
	}

	obig_free(&x_test);
	obig_free(&y_test);
}

{	// obig_or - mismatched inputs (x longer than y)
	unsigned int x = 0x7E48A840;
	unsigned short y = 0xDD18;
	unsigned int expected = x | y;

	obliv unsigned int xo;
	obliv unsigned short yo;
	xo = feedOblivInt(x, 1);
	yo = feedOblivShort(y, 2);

	obig x_test;
	obig y_test;
	obig result;

	obig_init(&x_test, sizeof(int));
	obig_init(&y_test, sizeof(short));
	obig_init(&result, sizeof(int));

	obig_import_onative(&x_test, xo);
	obig_import_onative(&y_test, yo);
	unsigned char temp;
	unsigned int output;

	obig_or(&result, x_test, y_test);

	for (int ii = result.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, result.data[ii], 0);
		output <<= 8;
		output += temp;
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_or - mismatched inputs (x longer than y)", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != output) {
		fprintf(stderr, "\tExpected:\t%0llX\n\tActual: \t%0llX\n", expected, output);
	}

	obig_free(&x_test);
	obig_free(&y_test);
	obig_free(&result);
}

{	// obig_or - mismatched inputs (x shorter than y)
	unsigned short x = 0xA840;
	unsigned int y = 0x47E0DD18;
	unsigned int expected = x | y;

	obliv unsigned short xo;
	obliv unsigned int yo;
	xo = feedOblivShort(x, 1);
	yo = feedOblivInt(y, 2);

	obig x_test;
	obig y_test;
	obig result;

	obig_init(&x_test, sizeof(short));
	obig_init(&y_test, sizeof(int));
	obig_init(&result, sizeof(int));

	obig_import_onative(&x_test, xo);
	obig_import_onative(&y_test, yo);
	unsigned char temp;
	unsigned int output;

	obig_or(&result, x_test, y_test);

	for (int ii = result.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, result.data[ii], 0);
		output <<= 8;
		output += temp;
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_or - mismatched inputs (x shorter than y)", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != output) {
		fprintf(stderr, "\tExpected:\t%0llX\n\tActual: \t%0llX\n", expected, output);
	}

	obig_free(&x_test);
	obig_free(&y_test);
	obig_free(&result);
}

{	// obig_or - extended output
	unsigned int x = 0x7E48A840;
	unsigned int y = 0xA7E0DD18;
	unsigned long long expected = x;
	expected |= y;

	obliv unsigned int xo;
	obliv unsigned int yo;
	xo = feedOblivInt(x, 1);
	yo = feedOblivInt(y, 2);

	obig x_test;
	obig y_test;
	obig result;

	obig_init(&x_test, sizeof(int));
	obig_init(&y_test, sizeof(int));
	obig_init(&result, sizeof(long long));

	obig_import_onative(&x_test, xo);
	obig_import_onative(&y_test, yo);
	unsigned char temp;
	unsigned long long output;

	obig_or(&result, x_test, y_test);

	for (int ii = result.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, result.data[ii], 0);
		output <<= 8;
		output += temp;
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_or - extended output", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != output) {
		fprintf(stderr, "\tExpected:\t%0llX\n\tActual: \t%0llX\n", expected, output);
	}

	obig_free(&x_test);
	obig_free(&y_test);
	obig_free(&result);
}

{	// obig_or - truncated output
	unsigned int x = 0x7E48A840;
	unsigned int y = 0xA7E0DD18;
	unsigned short expected = x | y;

	obliv unsigned int xo;
	obliv unsigned int yo;
	xo = feedOblivInt(x, 1);
	yo = feedOblivInt(y, 2);

	obig x_test;
	obig y_test;
	obig result;

	obig_init(&x_test, sizeof(int));
	obig_init(&y_test, sizeof(int));
	obig_init(&result, sizeof(short));

	obig_import_onative(&x_test, xo);
	obig_import_onative(&y_test, yo);
	unsigned char temp;
	unsigned short output;

	obig_or(&result, x_test, y_test);

	for (int ii = result.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, result.data[ii], 0);
		output <<= 8;
		output += temp;
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_or - truncated output", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != output) {
		fprintf(stderr, "\tExpected:\t%0llX\n\tActual: \t%0llX\n", expected, output);
	}

	obig_free(&x_test);
	obig_free(&y_test);
	obig_free(&result);
}



/******************************************
 ******************************************
 *** obig_or
 ******************************************
 ******************************************/

fprintf(stderr, "\n");

{	// obig_xor
	unsigned int x = 0x7E48A840;
	unsigned int y = 0x47E0DD18;
	unsigned int expected = x ^ y;

	obliv unsigned int xo;
	obliv unsigned int yo;
	xo = feedOblivInt(x, 1);
	yo = feedOblivInt(y, 2);

	obig x_test;
	obig y_test;
	obig result;

	obig_init(&x_test, sizeof(int));
	obig_init(&y_test, sizeof(int));
	obig_init(&result, sizeof(int));

	obig_import_onative(&x_test, xo);
	obig_import_onative(&y_test, yo);
	unsigned char temp;
	unsigned int output;

	obig_xor(&result, x_test, y_test);

	for (int ii = result.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, result.data[ii], 0);
		output <<= 8;
		output += temp;
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_xor", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != output) {
		fprintf(stderr, "\tExpected:\t%0X\n\tActual: \t%0X\n", expected, output);
	}

	obig_free(&x_test);
	obig_free(&y_test);
	obig_free(&result);
}

{	// obig_xor - augmented assignment x
	unsigned int x = 0x7E48A840;
	unsigned int y = 0x47E0DD18;
	unsigned int expected = x ^ y;

	obliv unsigned int xo;
	obliv unsigned int yo;
	xo = feedOblivInt(x, 1);
	yo = feedOblivInt(y, 2);

	obig x_test;
	obig y_test;

	obig_init(&x_test, sizeof(int));
	obig_init(&y_test, sizeof(int));

	obig_import_onative(&x_test, xo);
	obig_import_onative(&y_test, yo);
	unsigned char temp;
	unsigned int output;

	obig_xor(&x_test, x_test, y_test);

	for (int ii = x_test.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, x_test.data[ii], 0);
		output <<= 8;
		output += temp;
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_xor - augmented assignment x", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != output) {
		fprintf(stderr, "\tExpected:\t%0X\n\tActual: \t%0X\n", expected, output);
	}

	obig_free(&x_test);
	obig_free(&y_test);
}

{	// obig_xor - augmented assignment y
	unsigned int x = 0x7E48A840;
	unsigned int y = 0x47E0DD18;
	unsigned int expected = x ^ y;

	obliv unsigned int xo;
	obliv unsigned int yo;
	xo = feedOblivInt(x, 1);
	yo = feedOblivInt(y, 2);

	obig x_test;
	obig y_test;

	obig_init(&x_test, sizeof(int));
	obig_init(&y_test, sizeof(int));

	obig_import_onative(&x_test, xo);
	obig_import_onative(&y_test, yo);
	unsigned char temp;
	unsigned int output;

	obig_xor(&y_test, x_test, y_test);

	for (int ii = y_test.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, y_test.data[ii], 0);
		output <<= 8;
		output += temp;
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_xor - augmented assignment y", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != output) {
		fprintf(stderr, "\tExpected:\t%0X\n\tActual: \t%0X\n", expected, output);
	}

	obig_free(&x_test);
	obig_free(&y_test);
}

{	// obig_xor - mismatched inputs (x longer than y)
	unsigned int x = 0x7E48A840;
	unsigned short y = 0xDD18;
	unsigned int expected = x ^ y;

	obliv unsigned int xo;
	obliv unsigned short yo;
	xo = feedOblivInt(x, 1);
	yo = feedOblivShort(y, 2);

	obig x_test;
	obig y_test;
	obig result;

	obig_init(&x_test, sizeof(int));
	obig_init(&y_test, sizeof(short));
	obig_init(&result, sizeof(int));

	obig_import_onative(&x_test, xo);
	obig_import_onative(&y_test, yo);
	unsigned char temp;
	unsigned int output;

	obig_xor(&result, x_test, y_test);

	for (int ii = result.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, result.data[ii], 0);
		output <<= 8;
		output += temp;
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_xor - mismatched inputs (x longer than y)", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != output) {
		fprintf(stderr, "\tExpected:\t%0llX\n\tActual: \t%0llX\n", expected, output);
	}

	obig_free(&x_test);
	obig_free(&y_test);
	obig_free(&result);
}

{	// obig_xor - mismatched inputs (x shorter than y)
	unsigned short x = 0xA840;
	unsigned int y = 0x47E0DD18;
	unsigned int expected = x ^ y;

	obliv unsigned short xo;
	obliv unsigned int yo;
	xo = feedOblivShort(x, 1);
	yo = feedOblivInt(y, 2);

	obig x_test;
	obig y_test;
	obig result;

	obig_init(&x_test, sizeof(short));
	obig_init(&y_test, sizeof(int));
	obig_init(&result, sizeof(int));

	obig_import_onative(&x_test, xo);
	obig_import_onative(&y_test, yo);
	unsigned char temp;
	unsigned int output;

	obig_xor(&result, x_test, y_test);

	for (int ii = result.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, result.data[ii], 0);
		output <<= 8;
		output += temp;
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_xor - mismatched inputs (x shorter than y)", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != output) {
		fprintf(stderr, "\tExpected:\t%0llX\n\tActual: \t%0llX\n", expected, output);
	}

	obig_free(&x_test);
	obig_free(&y_test);
	obig_free(&result);
}

{	// obig_xor - extended output
	unsigned int x = 0x7E48A840;
	unsigned int y = 0xA7E0DD18;
	unsigned long long expected = x;
	expected ^= y;

	obliv unsigned int xo;
	obliv unsigned int yo;
	xo = feedOblivInt(x, 1);
	yo = feedOblivInt(y, 2);

	obig x_test;
	obig y_test;
	obig result;

	obig_init(&x_test, sizeof(int));
	obig_init(&y_test, sizeof(int));
	obig_init(&result, sizeof(long long));

	obig_import_onative(&x_test, xo);
	obig_import_onative(&y_test, yo);
	unsigned char temp;
	unsigned long long output;

	obig_xor(&result, x_test, y_test);

	for (int ii = result.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, result.data[ii], 0);
		output <<= 8;
		output += temp;
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_xor - extended output", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != output) {
		fprintf(stderr, "\tExpected:\t%0llX\n\tActual: \t%0llX\n", expected, output);
	}

	obig_free(&x_test);
	obig_free(&y_test);
	obig_free(&result);
}

{	// obig_xor - truncated output
	unsigned int x = 0x7E48A840;
	unsigned int y = 0xA7E0DD18;
	unsigned short expected = x ^ y;

	obliv unsigned int xo;
	obliv unsigned int yo;
	xo = feedOblivInt(x, 1);
	yo = feedOblivInt(y, 2);

	obig x_test;
	obig y_test;
	obig result;

	obig_init(&x_test, sizeof(int));
	obig_init(&y_test, sizeof(int));
	obig_init(&result, sizeof(short));

	obig_import_onative(&x_test, xo);
	obig_import_onative(&y_test, yo);
	unsigned char temp;
	unsigned short output;

	obig_xor(&result, x_test, y_test);

	for (int ii = result.digits -1; ii >= 0; ii--) {
		revealOblivChar(&temp, result.data[ii], 0);
		output <<= 8;
		output += temp;
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_xor - truncated output", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != output) {
		fprintf(stderr, "\tExpected:\t%0llX\n\tActual: \t%0llX\n", expected, output);
	}

	obig_free(&x_test);
	obig_free(&y_test);
	obig_free(&result);
}