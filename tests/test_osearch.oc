#include <obliv.oh>
#include "oram.oh"
#include "osearch.oh"
#include "test_generic.h"

static const char TESTNAME[] = "osearch";

#define TEXT_HELP_SUPPLEMENTARY "\
  -o \x1b[4mTYPE\x1b[0m, --oram-type=\x1b[4mTYPE\x1b[0m \n\t\tforce all ORAMs to be \x1b[4mTYPE\x1b[0m ORAMs. Valid types are \033[1msqrt\033[0m, \033[1mcircuit\033[0m, and \033[1mlinear\033[0m.\n\n"

static const char options_string[] = "o:";
static struct option long_options[] = {
	{"oram-type", required_argument, NULL, 'o'},
	{0, 0, 0, 0}
};

char* get_test_name() {
	return TESTNAME;
}

char* get_supplementary_options_string() {
	return options_string;
}

struct option* get_long_options() {
	return long_options;
}

void print_supplementary_help() {
	fprintf(stderr, TEXT_HELP_SUPPLEMENTARY);
}

obliv int cmpInt(OcCopy * cpy, void * a, void * b) obliv {
	obliv uint32_t * aa = (obliv uint32_t *) a;
	obliv uint32_t * bb = (obliv uint32_t *) b;
	return (*aa > *bb) - (*aa < *bb);
}

void test_main(void*varg) {

	#ifdef ORAM_OVERRIDE
	oram_set_default_type(ORAM_OVERRIDE);
	#endif

	args_t * args_pass = varg;
	int arg;
	optind = 0; // this allows us to getopt a second time
	while ((arg = getopt_long(args_pass->argc, args_pass->argv, options_string, long_options, NULL)) != -1) {
		if (arg == 'o') {
			if (strcmp(optarg,"sqrt") == 0) {
				oram_set_default_type(ORAM_TYPE_SQRT);
			} else if (strcmp(optarg,"circuit") == 0) {
				oram_set_default_type(ORAM_TYPE_CIRCUIT);
			} else if (strcmp(optarg,"linear") == 0) {
				oram_set_default_type(ORAM_TYPE_LINEAR);
			} else {
				fprintf (stderr, "Invalid argument for -%c.\n", arg);
				return;
			}
		} else if (arg == '?' || arg == ':') {
			if (optopt == 'o') {
				fprintf (stderr, "Option -%c requires an argument.\n", optopt);
				return;
			} else {
				fprintf (stderr, "Option -%c not recognized.\n", optopt);
				return;
			}
		} else {
			abort();
		}
	}

	{
		uint32_t inputRaw[16] = {
			0,1,2,3,
			4,5,6,7,
			8,9,10,11,
			12,13,14,15
		};

		obliv uint32_t input[16];
		obliv uint32_t output;
		obliv uint32_t needle = 10;

		for (int ii = 0; ii < 16; ii++) {
			input[ii] = feedOblivInt(inputRaw[ii], 0);
		}

		obliv int index = obinary_search(&ocCopyInt, &output, input, 16, &needle, &cmpInt);

		bool success = true;

		uint32_t temp;
		revealOblivInt(&temp, output, 0);
		success &= (temp == 10);

		revealOblivInt(&temp, index, 0);
		success &= (temp == 10);

		fprintf(stderr, "Test Item: %-70s %s\n", "obinary_search - 16 elements", (success)?STATUS_SUCCESS:STATUS_FAILURE);
	}

	{
			
		obliv uint32_t input[2048];
		obliv uint32_t output;
		obliv uint32_t needle;
		obliv uint32_t otemp = 0;

		int chosen = ocBroadcastInt(rand()%2048, 1);

		for (int ii = 0; ii < 2048; ii++) {
			otemp += feedOblivInt(rand()%32, ii%2);
			input[ii] = otemp;
			if (ii == chosen) {
				needle = otemp;
			}
		}

		obliv int index = obinary_search(&ocCopyInt, &output, input, 2048, &needle, &cmpInt);

		bool success = true;

		uint32_t temp, temp2;
		revealOblivInt(&temp, output, 0);
		revealOblivInt(&temp2, needle, 0);
		success &= (temp == temp2);

		revealOblivInt(&temp, index, 0);
		success &= (temp == chosen);

		fprintf(stderr, "Test Item: %-70s %s\n", "obinary_search - 2048 random elements", (success)?STATUS_SUCCESS:STATUS_FAILURE);
	}


}