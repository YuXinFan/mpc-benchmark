#include <obliv.oh>
#include "oram.oh"
#include "ograph.oh"
#include "test_generic.h"

static const char TESTNAME[] = "ograph";

#define TEXT_HELP_SUPPLEMENTARY "\
  -o \x1b[4mTYPE\x1b[0m, --oram-type=\x1b[4mTYPE\x1b[0m \n\t\tforce all ORAMs to be \x1b[4mTYPE\x1b[0m ORAMs. Valid types are \033[1msqrt\033[0m, \033[1mcircuit\033[0m, and \033[1mlinear\033[0m.\n\n"

static const char options_string[] = "o:";
static struct option long_options[] = {
	{"oram-type", required_argument, NULL, 'o'},
	{0, 0, 0, 0}
};

char* get_test_name() {
	return TESTNAME;
}

char* get_supplementary_options_string() {
	return options_string;
}

struct option* get_long_options() {
	return long_options;
}

void print_supplementary_help() {
	fprintf(stderr, TEXT_HELP_SUPPLEMENTARY);
}

void test_main(void*varg) {

	#ifdef ORAM_OVERRIDE
	oram_set_default_type(ORAM_OVERRIDE);
	#endif

	args_t * args_pass = varg;
	int arg;
	optind = 0; // this allows us to getopt a second time
	while ((arg = getopt_long(args_pass->argc, args_pass->argv, options_string, long_options, NULL)) != -1) {
		if (arg == 'o') {
			if (strcmp(optarg,"sqrt") == 0) {
				oram_set_default_type(ORAM_TYPE_SQRT);
			} else if (strcmp(optarg,"circuit") == 0) {
				oram_set_default_type(ORAM_TYPE_CIRCUIT);
			} else if (strcmp(optarg,"linear") == 0) {
				oram_set_default_type(ORAM_TYPE_LINEAR);
			} else if (strcmp(optarg,"fssl") == 0) {
				oram_set_default_type(ORAM_TYPE_FSSL);
			} else {
				fprintf (stderr, "Invalid argument for -%c.\n", arg);
				return;
			}
		} else if (arg == '?' || arg == ':') {
			if (optopt == 'o') {
				fprintf (stderr, "Option -%c requires an argument.\n", optopt);
				return;
			} else {
				fprintf (stderr, "Option -%c not recognized.\n", optopt);
				return;
			}
		} else {
			abort();
		}
	}

	{
		int adjacency_count = 5;
		int vertices = 10;

		int adjacencies[10] = { 1, 2, 
								1, 3,
								1, 7,
								2, 4,
								7, 9
							  };

		if (ocCurrentParty() == 2) {
			adjacencies[0] = 5; adjacencies[1] = 9;
			adjacencies[2] = 0; adjacencies[3] = 8;
			adjacencies[6] = 3; adjacencies[7] = 9;
			adjacencies[8] = 9; adjacencies[9] = 1;
		}

		uint32_t expected_layout[20] = {
			0, 1,
			1, 4,
			5, 1,
			6, 1,
			7, 0,
			7, 1,
			8, 0,
			8, 1,
			9, 0,
			9, 1
		};

		uint32_t expected_matrix[30] = {
			8, 9, 0,
			2, 5, 1,
			3, 6, 1,
			7, 8, 1,
			7, 8, 1,
			4, 7, 0,
			9, 9, 1,
			9, 9, 1,
			9, 9 ,1,
			1, 1, 4
		};

		int expected_results[10] = {-1, 0, 1, 1, 2, -1, -1, 1, -1, 2};

		ograph_edge * edges = calloc(adjacency_count * 2, sizeof(ograph_edge));

		for (int party = 1; party < 3; party++) {
			for (int ii = 0; ii <adjacency_count; ii ++) {
				edges[(party-1)*adjacency_count+ii].v1 = feedOblivInt(adjacencies[2*ii], party);
				edges[(party-1)*adjacency_count+ii].v2 = feedOblivInt(adjacencies[2*ii+1], party);
			}
		}

		ograph_adjacency_matrix * adj = ograph_build_adjacency_matrix(vertices, edges, 2*adjacency_count);	

		bool success = true;

		for (int ii = 0; ii < 10; ii++) {
			int temp[2];
			obliv int otemp[2];
			oram_read(otemp, adj->layout, ii);
			revealOblivInt(&temp[0], otemp[0], 0);
			revealOblivInt(&temp[1], otemp[1], 0);
			success &= (expected_layout[ii*2] == temp[0]);
			success &= (expected_layout[ii*2+1] == temp[1]);
		}

		for (int ii = 0; ii < 10; ii++) {
			int temp[3];
			obliv int otemp[3];
			oram_read(otemp, adj->matrix, ii);
			revealOblivInt(&temp[0], otemp[0], 0);
			revealOblivInt(&temp[1], otemp[1], 0);
			revealOblivInt(&temp[2], otemp[2], 0);
			success &= (expected_matrix[ii*3] == temp[0]);
			success &= (expected_matrix[ii*3+1] == temp[1]);
			success &= (expected_matrix[ii*3+2] == temp[2]);
		}

		fprintf(stderr, "Test Item: %-70s %s\n", "ograph_build_adjacency_matrix - 10 adjacencies", (success)?STATUS_SUCCESS:STATUS_FAILURE);

		free(edges);
		ograph_free_adjacency_matrix(adj);
	}

	{

		int adjacency_count = 5;
		int vertices = 10;

		int adjacencies[10] = { 1, 2, 
								1, 3,
								1, 7,
								2, 4,
								7, 9
							  };

		if (ocCurrentParty() == 2) {
			adjacencies[0] = 5; adjacencies[1] = 9;
			adjacencies[2] = 0; adjacencies[3] = 8;
			adjacencies[6] = 3; adjacencies[7] = 9;
			adjacencies[8] = 9; adjacencies[9] = 1;
		}

		int expected_results[10] = {-1, 0, 1, 1, 2, -1, -1, 1, -1, 2};

		ograph_edge * edges = calloc(adjacency_count * 2, sizeof(ograph_edge));

		for (int party = 1; party < 3; party++) {
			for (int ii = 0; ii <adjacency_count; ii ++) {
				edges[(party-1)*adjacency_count+ii].v1 = feedOblivInt(adjacencies[2*ii], party);
				edges[(party-1)*adjacency_count+ii].v2 = feedOblivInt(adjacencies[2*ii+1], party);
			}
		}

		ograph_adjacency_matrix * adj = ograph_build_adjacency_matrix(vertices, edges, 2*adjacency_count);

		ograph_vertex_list * result = ograph_breadth_first_search(adj, feedOblivInt(1, 1));

		free(edges);
		ograph_free_adjacency_matrix(adj);

		bool success = true;

		for (int ii = 0; ii < result->public_size; ii++) {
			uint32_t temp;
			revealOblivInt(&temp, result->list[ii], 0);
			success &= (temp == expected_results[ii]) ;
		}

		fprintf(stderr, "Test Item: %-70s %s\n", "ograph_breadth_first_search - 10 adjacencies", (success)?STATUS_SUCCESS:STATUS_FAILURE);
		if (!success) {
			for (int ii = 0; ii < result->public_size; ii++) {
				uint32_t temp;
				revealOblivInt(&temp, result->list[ii], 0);
				if (temp != expected_results[ii]) {
					fprintf(stderr, "\tElement:\t\t\t %d\n", ii);
					fprintf(stderr, "\t\tExpected Output:\t %d\n", expected_results[ii]);
					fprintf(stderr, "\t\tActual Output:\t\t %d\n", temp);
				}
			}
		}

		ograph_free_vertex_list(result);

	}

	{

		int adjacency_count = 5;
		int vertices = 10;

		int adjacencies[10] = { 2, 1, 
								1, 3,
								3, 4,
								5, 6,
								7, 8
							  };

		if (ocCurrentParty() == 2) {
			adjacencies[0] = 6; adjacencies[1] = 7;
			adjacencies[2] = 7; adjacencies[3] = 1;
			adjacencies[6] = 4; adjacencies[7] = 5;
			adjacencies[8] = 8; adjacencies[9] = 9;
		}

		int expected_results[10] = {-1, 1, 0, 2, 3, 4, 5, 6, 7, 8};

		ograph_edge * edges = calloc(adjacency_count * 2, sizeof(ograph_edge));

		for (int party = 1; party < 3; party++) {
			for (int ii = 0; ii <adjacency_count; ii ++) {
				edges[(party-1)*adjacency_count+ii].v1 = feedOblivInt(adjacencies[2*ii], party);
				edges[(party-1)*adjacency_count+ii].v2 = feedOblivInt(adjacencies[2*ii+1], party);
			}
		}

		ograph_adjacency_matrix * adj = ograph_build_adjacency_matrix(vertices, edges, 2*adjacency_count);

		ograph_vertex_list * result = ograph_breadth_first_search(adj, feedOblivInt(2, 1));

		free(edges);
		ograph_free_adjacency_matrix(adj);

		bool success = true;

		for (int ii = 0; ii < result->public_size; ii++) {
			uint32_t temp;
			revealOblivInt(&temp, result->list[ii], 0);
			success &= (temp == expected_results[ii]) ;
		}

		fprintf(stderr, "Test Item: %-70s %s\n", "ograph_breadth_first_search - 10 adjacencies", (success)?STATUS_SUCCESS:STATUS_FAILURE);
		if (!success) {
			for (int ii = 0; ii < result->public_size; ii++) {
				uint32_t temp;
				revealOblivInt(&temp, result->list[ii], 0);
				if (temp != expected_results[ii]) {
					fprintf(stderr, "\tElement:\t\t\t %d\n", ii);
					fprintf(stderr, "\t\tExpected Output:\t %d\n", expected_results[ii]);
					fprintf(stderr, "\t\tActual Output:\t\t %d\n", temp);
				}
			}
		}

		ograph_free_vertex_list(result);

	}

}