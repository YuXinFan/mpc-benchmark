#include <obliv.oh>
#include <gcrypt.h>

#include "osha512.oh"
#include "test_generic.h"

static const char TESTNAME[] = "osha512";

char* get_test_name() {
	return TESTNAME;
}

char* get_supplementary_options_string() {
	return NULL;
}

struct option* get_long_options() {
	return NULL;
}

void print_supplementary_help() {}

void test_main(void*varg) {

	args_t *args = varg;

	{
		// test vectors http://csrc.nist.gov/groups/STM/cavp/secure-hashing.html

		obliv uint8_t digest[OSHA512_DIGEST_LENGTH];
		uint8_t digest2[] = {0xa7,0x0c,0x75,0xb9,0xb1,0xf0,0xac,0x2e,0xd2,0xc2,0x79,0x77,0x63,0xac,0x9a,0x66,0x01,0xd9,0x5f,0x46,0x88,0x9b,0x00,0xfc,0x3d,0xda,0xe4,0xd0,0xac,0x69,0x23,0x75,0x0a,0x10,0x8d,0x79,0xeb,0x76,0x4e,0x77,0xac,0x07,0xb7,0xcb,0x5c,0x01,0xcb,0x4b,0x37,0x47,0xdc,0xf6,0x9b,0xa3,0xb3,0x5c,0x51,0xfb,0x99,0x5d,0xa2,0x63,0x2e,0x70};
		char plaintext[] = {0xd5,0xe3,0x78,0xae,0x9f,0xc2,0x64,0x8f,0x4a,0x13,0xbb,0xec,0x4b,0x09,0x35,0xaf,0xb4,0xf8,0x22,0xf5,0xfe,0x0d,0x50,0x63,0x05,0x3d,0x2f,0xbd,0x54,0x7b,0x33,0xb4,0xa3,0x2e,0x7a,0x00,0x9e,0xe2,0xaf,0xaf,0xe8,0x3d,0x2e,0xbd,0x60,0x35,0x68,0xe4,0xa3,0x81,0x89,0xb5,0xd2,0x4d,0x59,0xe8,0x95,0x32,0x60,0xf1,0x5f,0x65,0x4e,0xd4,0xf4,0x2f,0x9a,0x39,0x29,0x9d,0x68,0xc3,0xeb,0x78,0xb0,0x9e,0x83,0x77,0x9d,0x57,0x18,0xb4,0x33,0xf1,0x76,0x5d,0x35,0x35,0x0e,0xac,0x46,0x49,0x3d,0x19,0x4e,0x84,0xd1,0xce,0x1f,0x81,0xc9,0x5b,0x59,0x72,0x5c,0xab,0x8a,0xb7,0x3d,0x36,0x9a,0xb0,0x1e,0x79,0x67,0xcf,0x73,0xa3,0xac,0xf1,0x78,0x92,0x27,0xee,0x75,0xfd,0xfb,0x6e,0x40,0xf3,0x53,0xff,0x04,0x84,0x48,0x65,0x42,0xbe,0x05,0x31,0x15,0xdb,0x28,0x96,0xba,0xb8,0x6c,0x77,0x4f,0x89,0x85,0xc4,0xdb,0xcc,0x4c,0x07,0x8f,0x7b,0x1c,0x3a,0x4c,0x86,0x7c,0xdc,0x65,0x80,0xfe,0x44,0xa5,0x98,0x67,0x34,0x94,0xcc,0x0f,0xb1,0xf6,0x59,0x8b,0x12,0x95,0x76,0x8a,0x58,0x40,0x41,0xfd,0xbd,0x14,0xfa,0x7b,0x90,0xfa,0x6f,0xe3,0x3f,0x71,0xb7,0x43,0xb6,0x8e,0x23,0xf8,0xe7,0x40,0x72,0x17,0xaa,0xd9,0x44,0x0c,0xc8,0xca,0xd2,0x81,0x52,0xae,0xdb,0x82,0x38,0x8b,0xe2,0xde,0x16,0x54,0x96,0xd0,0x51,0xb2,0x92,0xde,0x63,0x03,0x46,0x02,0x73,0xa4,0x35,0x08,0x29,0x6b,0x62,0x37,0xc0,0x78,0x04,0x33,0x5d,0x2e,0x81,0x22,0x9f,0x7c,0x9a,0x0e,0x77,0x61,0xe3,0x8a,0x3a,0xaf,0x77,0x99,0xf4,0x0f,0xe9,0xcb,0x00,0x45,0x7e,0xa9,0xd5,0xb5,0x99,0x53,0x23,0x26,0x76,0x68,0x1f,0xc7,0x1b,0x26,0x1a,0x6f,0x8c,0xd3,0x59,0x29,0x3f,0x5b,0x21,0xf0,0xcf,0x3a,0x11,0xb7,0xf4,0x9c,0xb5,0xad,0xb3,0xc3,0x57,0xbe,0xd2,0xaa,0x18,0x5d,0x8f,0xe8,0x40,0x81,0x92,0xd6,0xd3,0xed,0x1f,0xf4,0x65,0xb5,0x90,0x89,0x2e,0xfe,0x03};
		int msglen = sizeof(plaintext);
		obliv uint8_t * message = calloc(msglen, sizeof(obliv uint8_t));
		bool success = true;

		for (int ii = 0; ii < msglen; ii++) {
			message[ii] = feedOblivChar(plaintext[ii], 1);
		}

		oSHA512_CTX ctx;
		oSHA512_Init(&ctx);
		oSHA512_Update(&ctx, message, msglen);
		oSHA512_Final(digest, &ctx);

		free(message);

		for (int ii = 0; ii < OSHA512_DIGEST_LENGTH; ii++) {
			uint8_t temp;
			revealOblivChar(&temp, digest[ii], 0);
			success &= (temp == digest2[ii]);
		}

		fprintf(stderr, "Test Item: %-70s %s\n", "oSHA512 1", (success)?STATUS_SUCCESS:STATUS_FAILURE);
		if(!success){
			args->status = 1;
			fprintf(stderr, "\tExpected Digest:\t");
			for (int ii = 0; ii < OSHA512_DIGEST_LENGTH; ii++) {
				fprintf(stderr, "%02hhX", digest2[ii]);
			}
			fprintf(stderr, "\n\tActual Digest: \t\t");
			for (int ii = 0; ii < OSHA512_DIGEST_LENGTH; ii++) {
				uint8_t temp;
				revealOblivChar(&temp, digest[ii], 0);
				fprintf(stderr, "%02hhX", temp);
			}
			fprintf(stderr, "\n");
		}
	}

	{
		// test vectors http://csrc.nist.gov/groups/STM/cavp/secure-hashing.html

		obliv uint8_t digest[OSHA512_DIGEST_LENGTH];
		uint8_t digest2[] = {0xff,0xcb,0x3b,0x31,0x3e,0x57,0x6e,0xa5,0xb0,0xa8,0x74,0x49,0x74,0x9b,0x82,0xc1,0x52,0x39,0x47,0xad,0x01,0x9c,0x63,0x34,0x01,0xa1,0x85,0xfb,0xcb,0x4f,0xd4,0x75,0xdf,0xe4,0x22,0x89,0xc5,0x41,0x3f,0x44,0x0d,0x08,0x3f,0x73,0xb6,0x5a,0xbc,0xf2,0x38,0x6e,0x0e,0xff,0x39,0xac,0xfa,0xfa,0x39,0x8a,0x3d,0x6b,0x77,0x8f,0xde,0x23};
		char plaintext[] = {0xed,0xba,0x7d,0x63,0x12,0x14,0x4e,0x90,0xec,0x9e,0xaa,0xce,0x75,0x76,0x04,0x5a,0x46,0xe5,0x53,0xdc,0xb8,0xee,0x5a,0x98,0x49,0x27,0x2d,0xe8,0x41,0xc8,0xf1,0xea,0x95,0x02,0xe3,0x76,0x0b,0x92,0x9c,0x53,0x9f,0x95,0x93,0xaa,0x25,0x9e,0xe3,0xba,0x31,0x06,0x4e,0xce,0x34,0x83,0x82,0x6c,0xe7,0xfc,0x9c,0xd0,0xed,0x9c,0xeb,0x99,0xb4,0x26,0xf6,0xc1,0x9c,0x88,0xc0,0xd2,0x5b,0xb2,0x4a,0x57,0xa0,0xa8,0x5a,0x91,0xf6,0xd6,0x7b,0x6c,0xeb,0xa5,0x45,0xb1,0x72,0x4b,0xde,0x7d,0x87,0xe7,0xc1,0xf2,0x11,0xcd,0xbe,0x2c,0x0c,0x1e,0x42,0x77,0xe7,0x9d,0xd9,0xbf,0x2b,0xbd,0xf1,0x48,0x5e,0xff,0xe1,0x9f,0x27,0x7a,0x2a,0xd0,0xb3,0xbb,0xfc,0xd9,0x56,0xd0,0xfc,0x5f,0x76,0xa0,0x44,0xa0,0xa5,0x7e,0xab,0xa9,0x0d,0xfd,0x47,0xc8,0x11,0x05,0x31,0x45,0x31,0x26,0x88,0x4d,0x2e,0x2d,0xb9,0x2f,0x6f,0xf5,0xfd,0xcb,0xa4,0x80,0x23,0x46,0xa9,0x46,0x8f,0x03,0xad,0xcd,0x83,0xcf,0x93,0x7a,0x9d,0x5c,0x98,0xa7,0xa1,0xf1,0x37,0xf6,0x79,0x5f,0x4a,0xe4,0x7a,0x37,0x71,0xa1,0xe9,0x3a,0xb7,0x1f,0xbe,0x11,0x73,0x68,0xa7,0x3f,0x6d,0x36,0x50,0x53,0x42,0xbd,0xe2,0x62,0x0a,0xcc,0xca,0xb4,0x37,0x14,0xbb,0xbe,0xc0,0xc7,0xf6,0x50,0x80,0x66,0xc9,0x10,0xd9,0xd4,0x55,0x27,0x9c,0xae,0x95,0x3a,0x2d,0xdf,0x9c,0x9c,0xe2,0x6e,0x1e,0xc2,0xad,0x9b,0x32,0xf7,0xfb,0x2b,0x56,0x50,0xdb,0x00,0xb4,0xe3,0x63,0xec,0xa4,0x34,0x4f,0xc7,0x71,0xf0,0xec,0xbf,0x60,0xde,0x35,0xf0,0xee,0x12,0x3b,0x35,0x5a,0x64,0xca,0x3d,0x63,0x20,0x49,0xe1,0x53,0xff,0xe2,0xb4,0x3c,0x56,0xe3,0xdc,0x82,0x8e,0x64,0x21,0x99,0xd4,0x2b,0x44,0x10,0x11,0xcc,0x92,0xcf,0x1d,0x14,0xb8,0x9d,0x30,0xa8,0xd9,0xe5,0x99,0xea,0xde,0xb9,0xb2,0x1c,0x0e,0x17,0x13,0xc8,0xde,0x6b,0x06,0x5f,0x0a,0x56,0x3b,0x20,0xe4,0xae,0xbd,0x3b,0xec,0xc6,0x25,0x37,0xa2,0xef,0x0e,0x91,0x98,0x3e,0xc8,0xa6,0xcb,0x90,0x51,0xd2,0x33,0xcc,0x80,0xda,0x99,0x68,0x84,0x87,0xa9,0x2f,0x8d,0x94,0x48,0x41,0xc9,0xcb,0x28,0x5b,0x92,0x6a,0x99,0x58,0xe6,0xcb,0xa2,0xf8,0x17,0x44,0x50,0xe1,0xc3,0x4d,0x4e,0xe3,0x07,0xe0,0xb6,0x80,0xf0,0x26,0x27,0xac,0x32,0x4f,0x18,0xd1,0x1d,0xc1,0x6b,0x16,0xcc,0x76,0x45,0xe1,0xa0,0x9f,0x1e,0x9a,0xed,0x8e,0x14,0xb3,0xf2,0xd2,0x85,0xe5,0x0f,0xa4,0xdc,0xbc,0x32,0x82,0xab,0x55,0x93,0x19,0xfb,0x67,0xa1,0x68,0xe0,0x80,0x3b,0x23,0x50,0x91,0x24,0x55,0x34,0xad,0xb1,0x4a,0xc0,0x0e,0xc5,0xac,0x00,0x59,0xff,0xec,0xb4,0x22,0x32,0xe3,0x5e,0xb3,0x16,0xba,0x99,0x09,0x3d,0x07,0xac,0x20,0x48,0x38,0x5f,0x71,0x5a,0x35,0x0e,0xb8,0xcd,0x41,0xfb,0xfa,0x24,0x21,0xe8,0xc7,0x41,0x81,0xe6,0xbd,0xd9,0x93,0x68,0x4d,0x24,0xf9,0x9b,0xc2,0xd9,0xe5,0xfa,0x7e,0x59,0x7f,0x1d,0x87,0x2a,0x87,0xd1,0x43,0xa8,0x3b,0x6e,0x80,0xf7,0x7b,0x65,0xb7,0x3c,0x2b,0x19,0x92,0x0d,0xd9,0xf0,0xab,0x26,0x9f,0xa9,0x97,0x5d,0x4b,0xf0,0x23,0xd8,0xbe,0x2f,0xdd,0x7d,0x92,0xa8,0xd7,0xaa,0x00,0xc1,0xa7,0x26,0x00,0x9e,0xb2,0x58,0xb1,0xf5,0xab,0xb7,0xfc,0x1e,0x56,0x82,0x74,0x6a,0x92,0xb1,0x81,0xb6,0x96,0x2b,0xbe,0x40,0x7b,0x39,0x9f,0xb9,0xfb,0x3b,0x57,0x9b,0x78,0x9a,0xf9,0xbc,0x3f,0xfd,0xdd,0x24,0x0f,0xc0,0x45,0x1b,0xd5,0xa2,0x40,0x87,0xba,0xbd,0xcf,0x75,0x5f,0xbc,0x47,0xf6,0x67,0x48,0xf6,0x2c,0x37,0xc3,0x09,0xa4,0xf9,0x39,0xad,0xe6,0xe7,0x93,0x75,0x4b,0xc6,0x0e,0xfc,0x0f,0xb0,0xec,0xcb,0xa7,0x17,0x6a,0x7d,0x55,0x07,0xf1,0x21,0xf9,0xab,0x90,0xdf,0x2a,0x13,0xaa,0xdf,0x85,0x34,0xec,0x66,0x45,0x31,0x82,0x42,0x15,0xd9,0x8b,0x69,0x22,0x70,0xca,0xdd,0x73,0xb2,0x9e,0xd2,0x7d,0x15,0x34,0x13,0xf2,0x4f,0xfb,0xa2,0xdb,0x18,0x58,0x9e,0xe6,0x31,0x9c,0x6a,0x01,0xa5,0x33,0x0c,0x27,0x4f,0x1d,0xd3,0x7a,0x9c,0xa3,0x3d,0x93,0x92,0x42,0x17,0x16,0x11,0xec,0xe6,0x89,0x59,0x70,0x86,0x66,0xcd,0x36,0x11,0x6e,0xf7,0x2f,0x03,0x41,0xcb,0x0c,0x9b,0x2c,0x30,0xae,0x84,0x42,0xbc,0xde,0xb4,0xae,0xbf,0x3f,0x95,0x47,0x84,0x80,0x62,0x65,0xd3,0xd6,0xd4,0xf3,0xba,0xaa,0xff,0xc6,0x8e,0x8f,0x76,0x2d,0x2c,0x76,0xb6,0xca,0x84,0x25,0xc2,0xa0,0x59,0xe5,0x0a,0x6c,0x42,0x7b,0x91,0x39,0xf5,0x5a,0x4f,0x2f,0xc4,0x17,0xd5,0xac,0x68,0x1d,0x2f,0x96,0xfe,0xa2,0x0e,0xef,0x4f,0xda,0x27,0xa9,0x54,0x6a,0xd6,0xbc,0xfa,0x1f,0x07,0x77,0x22,0xe0,0x56,0x13,0xec,0xe1,0x75,0x8e,0x35,0x1a,0xce,0xb7,0x5e,0xf8,0x6a,0x85,0x4f,0x52,0x12,0xac,0xbc,0x9e,0xb4,0x72,0xa7,0x65,0x08,0xbf,0x27,0xf4,0x72,0x74,0x67,0x55,0x2b,0xfe,0xf1,0x7d,0x9c,0x2b,0x2d,0xc7,0x0a,0x3c,0x24,0xa1,0x78,0x3b,0x8a,0x85,0xc9};
		int msglen = sizeof(plaintext);
		obliv uint8_t * message = calloc(msglen, sizeof(obliv uint8_t));
		bool success = true;

		for (int ii = 0; ii < msglen; ii++) {
			message[ii] = feedOblivChar(plaintext[ii], 1);
		}

		oSHA512_CTX ctx;
		oSHA512_Init(&ctx);
		oSHA512_Update(&ctx, message, msglen);
		oSHA512_Final(digest, &ctx);

		free(message);

		for (int ii = 0; ii < OSHA512_DIGEST_LENGTH; ii++) {
			uint8_t temp;
			revealOblivChar(&temp, digest[ii], 0);
			success &= (temp == digest2[ii]);
		}

		fprintf(stderr, "Test Item: %-70s %s\n", "oSHA512 2", (success)?STATUS_SUCCESS:STATUS_FAILURE);
		if(!success){
			args->status = 1;
			fprintf(stderr, "\tExpected Digest:\t");
			for (int ii = 0; ii < OSHA512_DIGEST_LENGTH; ii++) {
				fprintf(stderr, "%02hhX", digest2[ii]);
			}
			fprintf(stderr, "\n\tActual Digest: \t\t");
			for (int ii = 0; ii < OSHA512_DIGEST_LENGTH; ii++) {
				uint8_t temp;
				revealOblivChar(&temp, digest[ii], 0);
				fprintf(stderr, "%02hhX", temp);
			}
			fprintf(stderr, "\n");
		}
	}

	{
		#define SHA_TEST_ITERS 100
		obliv uint8_t digest[OSHA512_DIGEST_LENGTH];
		uint8_t digest2[OSHA512_DIGEST_LENGTH];
		bool successes[SHA_TEST_ITERS];
		bool success = true;

		for (size_t jj = 0; jj < SHA_TEST_ITERS; jj ++) {
			int msglen = abs(ocBroadcastChar(rand(),1) % 1968) + 32;
			char * plaintext = malloc(msglen);
			obliv uint8_t * message = calloc(msglen, sizeof(obliv uint8_t));

			for (int ii = 0; ii < msglen; ii++) {
				plaintext[ii] = ocBroadcastChar(rand(),1);
				message[ii] = feedOblivChar(plaintext[ii], 1);
			}

			gcry_md_hash_buffer(GCRY_MD_SHA512, digest2, plaintext, msglen);

			oSHA512_CTX ctx;
			oSHA512_Init(&ctx);
			oSHA512_Update(&ctx, message, msglen);

			oSHA512_Final(digest, &ctx);

			successes[jj] = true;

			for (int ii = 0; ii < OSHA512_DIGEST_LENGTH; ii++) {
				uint8_t temp;
				revealOblivChar(&temp, digest[ii], 0);
				successes[jj] &= (temp == digest2[ii]);
			}

			success &= successes[jj];

			free(message);
			free(plaintext);
		}

		fprintf(stderr, "Test Item: %-70s %s\n", "oSHA512 100 random messages", (success)?STATUS_SUCCESS:STATUS_FAILURE);
		if (!success) {
			args->status = 1;
			fprintf(stderr, "\tFailures:\t");
			for (size_t jj = 0; jj < SHA_TEST_ITERS; jj ++) {
				if (!successes[jj]) fprintf(stderr, "%d, ", jj);
			}
			fprintf(stderr, "\n");
		}
	}

	fprintf(stderr, "\n");

}
