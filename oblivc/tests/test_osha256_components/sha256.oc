fprintf(stderr, "\n");

{
	// test vectors http://csrc.nist.gov/groups/STM/cavp/secure-hashing.html

	obliv uint8_t digest[OSHA256_DIGEST_LENGTH];
	uint8_t digest2[] = {0x3c,0x59,0x3a,0xa5,0x39,0xfd,0xcd,0xae,0x51,0x6c,0xdf,0x2f,0x15,0x00,0x0f,0x66,0x34,0x18,0x5c,0x88,0xf5,0x05,0xb3,0x97,0x75,0xfb,0x9a,0xb1,0x37,0xa1,0x0a,0xa2};
	obliv uint8_t message[163];
	char plaintext[] = {0x45,0x11,0x01,0x25,0x0e,0xc6,0xf2,0x66,0x52,0x24,0x9d,0x59,0xdc,0x97,0x4b,0x73,0x61,0xd5,0x71,0xa8,0x10,0x1c,0xdf,0xd3,0x6a,0xba,0x3b,0x58,0x54,0xd3,0xae,0x08,0x6b,0x5f,0xdd,0x45,0x97,0x72,0x1b,0x66,0xe3,0xc0,0xdc,0x5d,0x8c,0x60,0x6d,0x96,0x57,0xd0,0xe3,0x23,0x28,0x3a,0x52,0x17,0xd1,0xf5,0x3f,0x2f,0x28,0x4f,0x57,0xb8,0x5c,0x8a,0x61,0xac,0x89,0x24,0x71,0x1f,0x89,0x5c,0x5e,0xd9,0x0e,0xf1,0x77,0x45,0xed,0x2d,0x72,0x8a,0xbd,0x22,0xa5,0xf7,0xa1,0x34,0x79,0xa4,0x62,0xd7,0x1b,0x56,0xc1,0x9a,0x74,0xa4,0x0b,0x65,0x5c,0x58,0xed,0xfe,0x0a,0x18,0x8a,0xd2,0xcf,0x46,0xcb,0xf3,0x05,0x24,0xf6,0x5d,0x42,0x3c,0x83,0x7d,0xd1,0xff,0x2b,0xf4,0x62,0xac,0x41,0x98,0x00,0x73,0x45,0xbb,0x44,0xdb,0xb7,0xb1,0xc8,0x61,0x29,0x8c,0xdf,0x61,0x98,0x2a,0x83,0x3a,0xfc,0x72,0x8f,0xae,0x1e,0xda,0x2f,0x87,0xaa,0x2c,0x94,0x80,0x85,0x8b,0xec};
	int msglen = 163;
	bool success = true;

	for (int ii = 0; ii < msglen; ii++) {
		message[ii] = feedOblivChar(plaintext[ii], 1);
	}

	oSHA256_CTX ctx;
	oSHA256_Init(&ctx);
	oSHA256_Update(&ctx, message, msglen);
	oSHA256_Final(digest, &ctx);

	for (int ii = 0; ii < OSHA256_DIGEST_LENGTH; ii++) {
		uint8_t temp;
		revealOblivChar(&temp, digest[ii], 0);
		success &= (temp == digest2[ii]);
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "oSHA256 1", (success)?STATUS_SUCCESS:STATUS_FAILURE);
	if(!success){
		args->status = 1;
		fprintf(stderr, "\tExpected Digest:\t");
		for (int ii = 0; ii < OSHA256_DIGEST_LENGTH; ii++) {
			fprintf(stderr, "%02hhX", digest2[ii]);
		}
		fprintf(stderr, "\n\tActual Digest: \t\t");
		for (int ii = 0; ii < OSHA256_DIGEST_LENGTH; ii++) {
			uint8_t temp;
			revealOblivChar(&temp, digest[ii], 0);
			fprintf(stderr, "%02hhX", temp);
		}
		fprintf(stderr, "\n");
	}
}

{
	// test vectors http://csrc.nist.gov/groups/STM/cavp/secure-hashing.html

	obliv uint8_t digest[OSHA256_DIGEST_LENGTH];
	uint8_t digest2[] = {0xf5,0x74,0xac,0x85,0x53,0x2b,0xc0,0xc6,0xc4,0xe7,0x61,0x4a,0x2e,0x08,0x4d,0xbc,0x49,0xfb,0xc4,0x74,0xcd,0xa5,0x93,0x14,0x4a,0xf2,0x8c,0x5c,0xc5,0xf2,0x93,0xf8};
	obliv uint8_t message[856];
	char plaintext[] = {0x9c,0x4b,0xdc,0x3b,0x1a,0xf6,0xab,0x9d,0xc7,0xbd,0x2d,0xd9,0x0e,0x2e,0x42,0x9a,0x07,0xd5,0xdd,0x5c,0x48,0xbb,0x70,0x16,0xfe,0x2c,0xa5,0x1d,0x3c,0xbd,0x4f,0x45,0x92,0x8e,0xa0,0x49,0xe2,0xcd,0x9c,0x6d,0x6f,0x7b,0xcd,0x61,0x37,0x73,0x39,0x69,0x83,0xa8,0x91,0xbb,0xbc,0xae,0xab,0x28,0x80,0x7c,0x32,0xff,0xf5,0x70,0x9d,0x2f,0x5d,0x93,0x5d,0xab,0xeb,0x1f,0x5b,0x13,0xd5,0x3e,0xa1,0x90,0xab,0x15,0x57,0x00,0xe7,0x01,0xf2,0x53,0xc5,0x20,0xa8,0x34,0x55,0x14,0x27,0xec,0xce,0x03,0x86,0x84,0x25,0xe2,0x7c,0x2a,0xde,0xf4,0xd0,0xd7,0x23,0x8d,0x10,0x2e,0x13,0x1c,0x86,0xa6,0x5c,0x68,0x68,0xeb,0x0c,0x1a,0x4f,0x82,0xa4,0x7c,0xea,0xac,0x6e,0x80,0xf4,0x8e,0x11,0x04,0x63,0x8e,0x63,0x54,0xe3,0x00,0x7e,0xf1,0x82,0x02,0x16,0x91,0xad,0xa4,0x0a,0x66,0x5b,0x4d,0x38,0xa3,0x88,0x5a,0x96,0x3d,0xe5,0x07,0x7f,0xee,0xce,0x93,0x4a,0x80,0x7c,0x9f,0x21,0x48,0x7c,0xd8,0x10,0xf1,0x5f,0xd5,0x5d,0x7b,0xb4,0x42,0x18,0x82,0x33,0x3f,0xf2,0xc4,0x3b,0x03,0x53,0xde,0x7f,0xc5,0xa6,0x56,0xfc,0xdc,0xf8,0xde,0x2e,0x25,0xc1,0xd7,0x83,0xa5,0x01,0x15,0x10,0x6f,0x8f,0xe2,0x82,0xc8,0xae,0x45,0x58,0x8a,0xe2,0x84,0x50,0xc6,0x02,0xe7,0x1f,0xad,0x8d,0xbf,0x65,0xb1,0x41,0xa7,0xe0,0xe7,0xea,0x0a,0xe0,0xb0,0x79,0xe5,0xfb,0x98,0x55,0xce,0x01,0x7e,0xf6,0x36,0x33,0xf6,0xaf,0xeb,0xaf,0xeb,0xcb,0xe0,0x2f,0x89,0xdc,0x31,0xf3,0x59,0x50,0x62,0xfc,0xae,0x45,0xe8,0x7b,0x41,0x9f,0xea,0x89,0x18,0x57,0x48,0x18,0xac,0x15,0xdd,0x2a,0x4a,0x02,0x01,0x41,0xba,0xd7,0x52,0x16,0x1f,0x3b,0xb5,0x8d,0x1e,0x4b,0x97,0xe9,0x42,0x7a,0x79,0x3c,0x9f,0x9b,0xab,0x22,0xb6,0x3c,0x57,0xaf,0x99,0x36,0xc2,0xa6,0x50,0x82,0xcf,0xec,0x7a,0x4e,0xc5,0x3c,0x37,0x50,0x51,0x1b,0x46,0x5b,0xcf,0x0f,0x6b,0x30,0xc5,0x0c,0x14,0x96,0xb0,0x2f,0x3b,0xad,0x04,0xaf,0x8e,0x7f,0x6e,0x10,0xce,0xd8,0x5c,0x99,0x75,0x58,0xbf,0x09,0x9b,0xc6,0x0f,0x86,0x1a,0xa7,0x90,0xd6,0xf1,0x0f,0xd5,0xd1,0xe6,0xb8,0x82,0x16,0x70,0x51,0x56,0xfe,0xd3,0x18,0x68,0xce,0x8d,0xab,0xb0,0x31,0xf1,0x1b,0xca,0xe5,0x12,0x43,0xf7,0xb4,0xe2,0x58,0x65,0xa6,0x9b,0xc1,0xb0,0x75,0x5e,0x28,0xa8,0x41,0x1a,0xd1,0x55,0x85,0xb0,0x2a,0x38,0x4a,0x55,0xa4,0xd4,0x9a,0x37,0xc2,0x6d,0x38,0x63,0x6f,0x10,0x8e,0xe6,0x95,0xd3,0xe7,0x32,0xeb,0x5e,0xde,0xc4,0x0f,0xaa,0x16,0x04,0xd4,0x09,0x2c,0x6d,0xdd,0x67,0xea,0xed,0x6b,0xcf,0xbe,0x8f,0x73,0x31,0x6a,0x57,0xf4,0x62,0xfc,0x6d,0x87,0x64,0x01,0x7f,0x38,0xe8,0xf6,0x60,0x94,0x11,0xff,0xf5,0x03,0x7b,0xdc,0x51,0x58,0x7c,0x18,0x1f,0xa7,0xa9,0x83,0x40,0x56,0x9c,0xe3,0xb6,0x77,0xf5,0xe7,0xc1,0x55,0x9f,0x5c,0x47,0x4d,0x55,0xa3,0x79,0xe0,0x64,0x63,0xb4,0x06,0xb2,0x7b,0xa5,0xc4,0xff,0x3b,0xb1,0x00,0x6b,0xd3,0x94,0x95,0x38,0x0b,0x48,0xa3,0xd2,0x35,0x28,0x28,0x0c,0x60,0x55,0xd5,0xad,0xcf,0x59,0x1a,0x2b,0xaa,0x0a,0x84,0xb6,0xf2,0xb1,0x48,0x78,0xba,0x6c,0x20,0x1c,0x95,0xd1,0x55,0x8d,0x4b,0xd4,0x1d,0x00,0xd0,0xeb,0x28,0x34,0x76,0x70,0x76,0xf8,0x61,0x46,0x6b,0xef,0x3b,0xbf,0x25,0x90,0x2a,0xbd,0x0d,0x70,0xff,0x18,0xac,0xc4,0xb1,0x40,0xc1,0x21,0x09,0x24,0x90,0x87,0x9e,0x52,0x7c,0x9e,0x04,0x5f,0xd8,0x3f,0x41,0x89,0xfb,0x36,0x80,0x9b,0x92,0x47,0x0a,0x11,0x3b,0x6f,0x71,0x7d,0x4f,0x6b,0x0e,0x29,0xfe,0x7f,0xae,0xfe,0xa2,0x70,0x89,0xa4,0x4d,0xd2,0x74,0xeb,0xa4,0x8a,0x57,0x6a,0xf1,0x8b,0xe0,0x66,0x73,0xe3,0x79,0xf5,0xf9,0xfb,0x78,0x62,0xaf,0x1a,0x96,0xd4,0x37,0x2c,0xa3,0x2b,0xfb,0xc2,0x78,0x2b,0xc2,0x59,0x2c,0xdc,0x82,0xdf,0x8b,0x30,0x75,0x73,0xc3,0xe7,0x6f,0x6d,0x61,0xb0,0x6f,0x9e,0x7c,0x91,0x74,0xd9,0x30,0x88,0x92,0xb1,0x4f,0x73,0x44,0x85,0x52,0x2d,0x04,0xba,0x96,0xfa,0x19,0x48,0xc5,0x25,0xb1,0x78,0x91,0xe7,0x2f,0xec,0xa9,0x8b,0xc6,0xdf,0xe5,0xd0,0x47,0xae,0xc4,0x8f,0x37,0x97,0x19,0x9d,0x25,0xc1,0x01,0xf3,0x3a,0x7d,0x18,0x0c,0x12,0xcc,0xed,0x8f,0xca,0x21,0xb3,0x2e,0x5b,0x68,0x39,0xce,0x26,0x46,0x1c,0xe8,0xd0,0xa3,0x3b,0x2f,0x4f,0x66,0x6b,0x73,0x45,0x7f,0x6c,0xc5,0x8d,0x2b,0x1c,0xdc,0x14,0x73,0xeb,0xb7,0xeb,0xf6,0x8f,0x84,0x9a,0xe9,0xf9,0xc1,0xb6,0x5c,0x87,0xa1,0xb6,0xbf,0x7b,0xb1,0x02,0xa4,0xac,0xbb,0x4d,0xc7,0x7b,0xea,0x25,0x4b,0x09,0x30,0xc8,0x46,0xa7,0xe5,0x3a,0x80,0x8e,0xb1,0x94,0x78,0xd1,0xab,0x9f,0xa8,0x8f,0xc2,0xa1,0x0a,0x6d,0x5d,0x77,0xdb,0x43,0x3e,0xe4,0x9f,0x16,0xac,0x29,0x65,0x47,0xd1,0xd6,0x4c,0x09,0x61,0xdf,0x46,0x18,0x7c,0xf2,0x1c,0xa9,0xd6,0x08,0xb3,0x9c,0x15,0x3b,0x8d,0xf9,0x7a,0xd7,0x92,0x9a,0xc4,0xb3,0x11,0x25,0x51,0xc2,0x02,0x3e,0x87,0xe5,0x8e,0xfa,0x72,0x03,0xd1,0x96,0xae,0x5c,0xde,0x69,0x88,0x1a,0x03,0x17,0x60,0x29,0x4f,0x08,0x52};
	int msglen = 856;
	bool success = true;

	for (int ii = 0; ii < msglen; ii++) {
		message[ii] = feedOblivChar(plaintext[ii], 1);
	}

	gcry_md_hash_buffer(GCRY_MD_SHA256, digest2, plaintext, msglen);

	oSHA256_CTX ctx;
	oSHA256_Init(&ctx);
	oSHA256_Update(&ctx, message, msglen);

	oSHA256_Final(digest, &ctx);

	for (int ii = 0; ii < OSHA256_DIGEST_LENGTH; ii++) {
		uint8_t temp;
		revealOblivChar(&temp, digest[ii], 0);
		success &= (temp == digest2[ii]);
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "oSHA256 2", (success)?STATUS_SUCCESS:STATUS_FAILURE);
	if(!success){
		args->status = 1;
		fprintf(stderr, "\tExpected Digest:\t");
		for (int ii = 0; ii < OSHA256_DIGEST_LENGTH; ii++) {
			fprintf(stderr, "%02hhX", digest2[ii]);
		}
		fprintf(stderr, "\n\tActual Digest: \t\t");
		for (int ii = 0; ii < OSHA256_DIGEST_LENGTH; ii++) {
			uint8_t temp;
			revealOblivChar(&temp, digest[ii], 0);
			fprintf(stderr, "%02hhX", temp);
		}
		fprintf(stderr, "\n");
	}
}

{
	#define SHA_TEST_ITERS 100
	obliv uint8_t digest[OSHA256_DIGEST_LENGTH];
	uint8_t digest2[OSHA256_DIGEST_LENGTH];
	bool successes[SHA_TEST_ITERS];
	bool success = true;

	for (size_t jj = 0; jj < SHA_TEST_ITERS; jj ++) {
		int msglen = abs(ocBroadcastChar(rand(),1) % 1968) + 32;
		char * plaintext = malloc(msglen);
		obliv uint8_t * message = calloc(msglen, sizeof(obliv uint8_t));

		for (int ii = 0; ii < msglen; ii++) {
			plaintext[ii] = ocBroadcastChar(rand(),1);
			message[ii] = feedOblivChar(plaintext[ii], 1);
		}

		gcry_md_hash_buffer(GCRY_MD_SHA256, digest2, plaintext, msglen);

		oSHA256_CTX ctx;
		oSHA256_Init(&ctx);
		oSHA256_Update(&ctx, message, msglen);

		oSHA256_Final(digest, &ctx);

		successes[jj] = true;

		for (int ii = 0; ii < OSHA256_DIGEST_LENGTH; ii++) {
			uint8_t temp;
			revealOblivChar(&temp, digest[ii], 0);
			successes[jj] &= (temp == digest2[ii]);
		}

		success &= successes[jj];

		free(message);
		free(plaintext);
	}

	fprintf(stderr, "Test Item: %-70s %s\n", "oSHA256 100 random messages", (success)?STATUS_SUCCESS:STATUS_FAILURE);
	if (!success) {
		args->status = 1;
		fprintf(stderr, "\tFailures:\t");
		for (size_t jj = 0; jj < SHA_TEST_ITERS; jj ++) {
			if (!successes[jj]) fprintf(stderr, "%d, ", jj);
		}
		fprintf(stderr, "\n");
	}
}
