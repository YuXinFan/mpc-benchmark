/******************************************
 ******************************************
 *** obig_cmp
 ******************************************
 ******************************************/

fprintf(stderr, "\n");

{	// obig_cmp
	unsigned int x = 0x7E48A840;
	unsigned int y = 0x47E0DD18;
	int8_t expected = x == y ? 0 : x < y ? -1 : 1;

	obliv unsigned int xo;
	obliv unsigned int yo;
	xo = feedOblivInt(x, 1);
	yo = feedOblivInt(y, 2);

	obig x_test;
	obig y_test;
	obliv int8_t result;

	obig_init(&x_test, sizeof(int));
	obig_init(&y_test, sizeof(int));

	obig_import_onative(&x_test, xo);
	obig_import_onative(&y_test, yo);
	int8_t output;

	obliv int8_t result = obig_cmp(x_test, y_test);

	revealOblivChar(&output, result, 0);

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_cmp - x greater", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != output) {
		args->status = 1;
		fprintf(stderr, "\tExpected:\t%0X\n\tActual: \t%0X\n", expected, output);
	}

	obig_free(&x_test);
	obig_free(&y_test);
}

{	// obig_cmp
	unsigned int x = 0x0000DD18;
	unsigned int y = 0x7E48A840;
	int8_t expected = x == y ? 0 : x < y ? -1 : 1;

	obliv unsigned int xo;
	obliv unsigned int yo;
	xo = feedOblivInt(x, 1);
	yo = feedOblivInt(y, 2);

	obig x_test;
	obig y_test;
	obliv int8_t result;

	obig_init(&x_test, sizeof(int));
	obig_init(&y_test, sizeof(int));

	obig_import_onative(&x_test, xo);
	obig_import_onative(&y_test, yo);
	int8_t output;

	obliv int8_t result = obig_cmp(x_test, y_test);

	revealOblivChar(&output, result, 0);

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_cmp - y greater", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != output) {
		args->status = 1;
		fprintf(stderr, "\tExpected:\t%0X\n\tActual: \t%0X\n", expected, output);
	}

	obig_free(&x_test);
	obig_free(&y_test);
}

{	// obig_cmp
	unsigned int x = 0x0048A840;
	unsigned int y = 0x0048A840;
	int8_t expected = x == y ? 0 : x < y ? -1 : 1;

	obliv unsigned int xo;
	obliv unsigned int yo;
	xo = feedOblivInt(x, 1);
	yo = feedOblivInt(y, 2);

	obig x_test;
	obig y_test;
	obliv int8_t result;

	obig_init(&x_test, sizeof(int));
	obig_init(&y_test, sizeof(int));

	obig_import_onative(&x_test, xo);
	obig_import_onative(&y_test, yo);
	int8_t output;

	obliv int8_t result = obig_cmp(x_test, y_test);

	revealOblivChar(&output, result, 0);

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_cmp - operands equal", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != output) {
		args->status = 1;
		fprintf(stderr, "\tExpected:\t%0X\n\tActual: \t%0X\n", expected, output);
	}

	obig_free(&x_test);
	obig_free(&y_test);
}



{	// obig_cmp
	unsigned short x = 0xA840;
	unsigned int y = 0x00000018;
	int8_t expected = x == y ? 0 : x < y ? -1 : 1;

	obliv unsigned short xo;
	obliv unsigned int yo;
	xo = feedOblivShort(x, 1);
	yo = feedOblivInt(y, 2);

	obig x_test;
	obig y_test;
	obliv int8_t result;

	obig_init(&x_test, sizeof(short));
	obig_init(&y_test, sizeof(int));

	obig_import_onative(&x_test, xo);
	obig_import_onative(&y_test, yo);
	int8_t output;

	obliv int8_t result = obig_cmp(x_test, y_test);

	revealOblivChar(&output, result, 0);

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_cmp - mismatched inputs - x greater", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != output) {
		args->status = 1;
		fprintf(stderr, "\tExpected:\t%0X\n\tActual: \t%0X\n", expected, output);
	}

	obig_free(&x_test);
	obig_free(&y_test);
}

{	// obig_cmp
	unsigned short x = 0xDD18;
	unsigned int y = 0x0100DD18;
	int8_t expected = x == y ? 0 : x < y ? -1 : 1;

	obliv unsigned short xo;
	obliv unsigned int yo;
	xo = feedOblivInt(x, 1);
	yo = feedOblivInt(y, 2);

	obig x_test;
	obig y_test;
	obliv int8_t result;

	obig_init(&x_test, sizeof(short));
	obig_init(&y_test, sizeof(int));

	obig_import_onative(&x_test, xo);
	obig_import_onative(&y_test, yo);
	int8_t output;

	obliv int8_t result = obig_cmp(x_test, y_test);

	revealOblivChar(&output, result, 0);

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_cmp - mismatched inputs - y greater", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != output) {
		args->status = 1;
		fprintf(stderr, "\tExpected:\t%0X\n\tActual: \t%0X\n", expected, output);
	}

	obig_free(&x_test);
	obig_free(&y_test);
}

{	// obig_cmp
	unsigned short x = 0xA840;
	unsigned int y = 0x0000A840;
	int8_t expected = x == y ? 0 : x < y ? -1 : 1;

	obliv unsigned short xo;
	obliv unsigned int yo;
	xo = feedOblivShort(x, 1);
	yo = feedOblivInt(y, 2);

	obig x_test;
	obig y_test;
	obliv int8_t result;

	obig_init(&x_test, sizeof(short));
	obig_init(&y_test, sizeof(int));

	obig_import_onative(&x_test, xo);
	obig_import_onative(&y_test, yo);
	int8_t output;

	obliv int8_t result = obig_cmp(x_test, y_test);

	revealOblivChar(&output, result, 0);

	fprintf(stderr, "Test Item: %-70s %s\n", "obig_cmp - mismatched inputs - operands equal", (expected == output)?STATUS_SUCCESS:STATUS_FAILURE);
	if (expected != output) {
		args->status = 1;
		fprintf(stderr, "\tExpected:\t%0X\n\tActual: \t%0X\n", expected, output);
	}

	obig_free(&x_test);
	obig_free(&y_test);
}
